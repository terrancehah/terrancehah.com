/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["components_map-component_tsx"],{

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/script */ \"./node_modules/next/script.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_script__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [infoWindow, setInfoWindow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [scriptLoaded, setScriptLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Memoize getSavedPlaces to prevent unnecessary re-renders\n    // const getSavedPlaces = useCallback(() => {\n    //     const now = Date.now();\n    //     // Only update if more than 1000ms has passed since last update\n    //     if (now - lastUpdateRef.current < 1000) {\n    //         return savedPlacesRef.current;\n    //     }\n    //     lastUpdateRef.current = now;\n    //     return savedPlacesRef.current;\n    // }, []);\n    // Expose getSavedPlaces to window with debouncing\n    // useEffect(() => {\n    //     if (typeof window !== 'undefined') {\n    //         window.getSavedPlaces = getSavedPlaces;\n    //     }\n    //     return () => {\n    //         if (typeof window !== 'undefined') {\n    //             delete window.getSavedPlaces;\n    //         }\n    //     };\n    // }, [getSavedPlaces]);\n    // // Update savedPlacesRef when places are added/removed\n    // const updateSavedPlaces = useCallback((places: Place[]) => {\n    //     savedPlacesRef.current = places;\n    //     lastUpdateRef.current = Date.now();\n    // }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"MapComponent: Received props:\", {\n            city,\n            apiKeyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length\n        });\n        if (!apiKey) {\n            console.error(\"MapComponent: Google Maps API key is missing\");\n            setError(\"Google Maps API key is missing\");\n            setIsLoading(false);\n            return;\n        }\n        if (!city) {\n            // Try to get destination from session\n            const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_4__.SESSION_CONFIG.STORAGE_KEY);\n            if (sessionData) {\n                try {\n                    var _parsed_travelDetails;\n                    const parsed = JSON.parse(sessionData);\n                    if (!((_parsed_travelDetails = parsed.travelDetails) === null || _parsed_travelDetails === void 0 ? void 0 : _parsed_travelDetails.destination)) {\n                        setError(\"No destination specified\");\n                        setIsLoading(false);\n                        return;\n                    }\n                    city = parsed.travelDetails.destination;\n                } catch (error) {\n                    console.error(\"Error reading destination from session:\", error);\n                    setError(\"No destination specified\");\n                    setIsLoading(false);\n                    return;\n                }\n            } else {\n                setError(\"No destination specified\");\n                setIsLoading(false);\n                return;\n            }\n        }\n        if (!scriptLoaded || !mapRef.current) {\n            console.log(\"MapComponent: Waiting for script to load or map ref to be ready...\");\n            return;\n        }\n        let isInitialized = false;\n        console.log(\"MapComponent: Initializing map with city:\", city);\n        const initMap = async ()=>{\n            if (isInitialized) return;\n            try {\n                // Import required libraries\n                const { Map: Map1 } = await window.google.maps.importLibrary(\"maps\");\n                const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({\n                    address: city\n                }, async (results, status)=>{\n                    var _results__geometry, _results_;\n                    console.log(\"Geocoding response:\", {\n                        status,\n                        resultsLength: results === null || results === void 0 ? void 0 : results.length\n                    });\n                    if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                        console.error(\"Geocoding failed:\", status);\n                        setError(\"Could not find location for \".concat(city));\n                        setIsLoading(false);\n                        return;\n                    }\n                    try {\n                        const location = results[0].geometry.location;\n                        const newMap = new Map1(mapRef.current, {\n                            center: location,\n                            zoom: 12,\n                            mapId: \"2d604af04a7c7fa8\"\n                        });\n                        setMap(newMap);\n                        isInitialized = true;\n                        setIsLoading(false);\n                        const newInfoWindow = new google.maps.InfoWindow({\n                            maxWidth: 400\n                        });\n                        setInfoWindow(newInfoWindow);\n                        infoWindowRef.current = newInfoWindow;\n                        const createCityInfoWindowContent = async (city, location)=>{\n                            try {\n                                // Search for the city to get its details including photos\n                                const cityPlace = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.searchPlaceByText)(city, {\n                                    latitude: location.lat(),\n                                    longitude: location.lng()\n                                }, city);\n                                if (!cityPlace) return null;\n                                // Create a photo carousel HTML\n                                const photoCarousel = cityPlace.photos && cityPlace.photos.length > 0 ? '\\n                                            <div class=\"relative w-full\" style=\"height: 200px;\">\\n                                                <div class=\"carousel-container overflow-hidden w-full h-full\">\\n                                                    <div class=\"carousel-track flex transition-transform duration-500\" style=\"height: 100%;\">\\n                                                        '.concat(cityPlace.photos.slice(0, 5).map((photo, index)=>'\\n                                                            <div class=\"carousel-slide w-full h-full flex-none\">\\n                                                                <img src=\"https://places.googleapis.com/v1/'.concat(photo.name, \"/media?maxHeightPx=340&maxWidthPx=340&key=\").concat(apiKey, '\"\\n                                                                    alt=\"').concat(city, '\"\\n                                                                    class=\"w-full h-full object-cover\"\\n                                                                />\\n                                                            </div>\\n                                                        ')).join(\"\"), '\\n                                                    </div>\\n                                                </div>\\n                                                <button onclick=\"window.prevSlide()\" class=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\\n                                                    </svg>\\n                                                </button>\\n                                                <button onclick=\"window.nextSlide()\" class=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\\n                                                    </svg>\\n                                                </button>\\n                                                <div class=\"absolute bottom-2 left-0 right-0 flex justify-center gap-1\">\\n                                                    ').concat(cityPlace.photos.slice(0, 5).map((_, index)=>'\\n                                                        <button onclick=\"window.goToSlide('.concat(index, ')\" class=\"w-2 h-2 rounded-full bg-white/80 hover:bg-white shadow-sm carousel-dot\" data-index=\"').concat(index, '\">\\n                                                        </button>\\n                                                    ')).join(\"\"), \"\\n                                                </div>\\n                                            </div>\\n                                        \") : \"\";\n                                // Add carousel control functions to window\n                                if (cityPlace.photos && cityPlace.photos.length > 0) {\n                                    const numSlides = Math.min(cityPlace.photos.length, 5);\n                                    window.currentSlide = 0;\n                                    window.updateCarousel = ()=>{\n                                        const track = document.querySelector(\".carousel-track\");\n                                        if (track) {\n                                            track.style.transform = \"translateX(-\".concat(window.currentSlide * 100, \"%)\");\n                                            // Update dots\n                                            document.querySelectorAll(\".carousel-dot\").forEach((dot, index)=>{\n                                                if (index === window.currentSlide) {\n                                                    dot.classList.add(\"bg-white\");\n                                                    dot.classList.remove(\"bg-white/80\");\n                                                } else {\n                                                    dot.classList.remove(\"bg-white\");\n                                                    dot.classList.add(\"bg-white/80\");\n                                                }\n                                            });\n                                        }\n                                    };\n                                    window.nextSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide + 1) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.prevSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide - 1 + numSlides) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.goToSlide = (index)=>{\n                                        window.currentSlide = index;\n                                        window.updateCarousel();\n                                    };\n                                }\n                                return '\\n                                        <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 340px;\">\\n                                            '.concat(photoCarousel, '\\n                                            <div class=\"p-4\">\\n                                                <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">').concat(city, \"</h2>\\n                                                \").concat(cityPlace.formattedAddress ? '<p class=\"text-sm text-gray-500 mb-2\">'.concat(cityPlace.formattedAddress, \"</p>\") : \"\", \"\\n                                            </div>\\n                                        </div>\\n                                    \");\n                            } catch (error) {\n                                console.error(\"Error creating city info window:\", error);\n                                return null;\n                            }\n                        };\n                        // Create a marker for the city\n                        const cityMarker = new google.maps.marker.AdvancedMarkerElement({\n                            map: newMap,\n                            position: location,\n                            title: city\n                        });\n                        // Add click listener to the marker\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            if (infoWindow) {\n                                const content = createCityInfoWindowContent(city, location);\n                                if (content) {\n                                    infoWindow.setContent(await content);\n                                    infoWindow.open(newMap, cityMarker);\n                                }\n                            }\n                        });\n                        markers.set(city, cityMarker);\n                        // Add click listener for future interaction\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            const content = await createCityInfoWindowContent(city, location);\n                            if (content) {\n                                newInfoWindow.setContent(content);\n                                newInfoWindow.open({\n                                    anchor: cityMarker,\n                                    map: newMap\n                                });\n                            }\n                        });\n                    } catch (err) {\n                        console.error(\"Error setting up map:\", err);\n                        setError(\"Failed to initialize map\");\n                    }\n                });\n            } catch (err) {\n                console.error(\"Error initializing map:\", err);\n                setError(\"Failed to initialize map\");\n                setIsLoading(false);\n            }\n        };\n        initMap();\n    }, [\n        city,\n        scriptLoaded,\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    // Remove marker from map\n                    marker.map = null;\n                    // Close info window if open\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    // Remove event listeners\n                    google.maps.event.clearInstanceListeners(marker);\n                    // Clean up references\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            // Notify components that places changed\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                var _data_place;\n                // Add this check at the start of the function\n                const markerId = (_data_place = data.place) === null || _data_place === void 0 ? void 0 : _data_place.id;\n                if (!markerId) {\n                    console.error(\"Debug - No place ID provided\");\n                    return;\n                }\n                // Add this check for duplicates\n                if (_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.hasPlace(markerId)) {\n                    console.log(\"Debug - Place already exists:\", markerId);\n                    return;\n                }\n                // Add to global storage first\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.addPlace(data.place);\n                }\n                const [{ AdvancedMarkerElement }, { PinElement }] = await Promise.all([\n                    google.maps.importLibrary(\"marker\"),\n                    google.maps.importLibrary(\"marker\")\n                ]);\n                const pinElement = new google.maps.marker.PinElement({\n                    scale: 1\n                });\n                console.log(\"Debug - Creating marker with ID:\", markerId);\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                // Set the map property after creation\n                marker.map = map;\n                // Add click listener\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current) {\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.open(map, marker);\n                        }\n                    }\n                });\n                // Store the marker reference\n                // markersRef.current.set(markerId, marker);\n                // if (data.place) {\n                //     savedPlacesManager.addPlace(data.place);\n                //     // Force a re-render when adding a marker\n                //     setMarkerCount(prev => prev + 1);\n                //     setSavedPlaces(new Map(savedPlacesManager.places));\n                //     console.log('Debug - Added place:', savedPlacesManager.places);\n                // }\n                // console.log('Debug - Marker added successfully');\n                // Notify components that places changed\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        map,\n        infoWindow\n    ]);\n    // // Add a useEffect to monitor savedPlaces changes\n    // useEffect(() => {\n    //     console.log('Current saved places:', [...globalSavedPlaces.entries()]);\n    // }, [savedPlaces]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Save to session storage when places change\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_4__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_4__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Load saved places from session storage on mount\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_4__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    // Notify components of initial load\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    const getPhotoUrl = (photo, index)=>{\n        var _photo_getURI;\n        return ((_photo_getURI = photo.getURI) === null || _photo_getURI === void 0 ? void 0 : _photo_getURI.call(photo)) || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    //Place info window\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                    </div>\\n                    \").concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_script__WEBPACK_IMPORTED_MODULE_2___default()), {\n                src: \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker&v=beta&callback=Function.prototype\"),\n                strategy: \"afterInteractive\",\n                onLoad: ()=>{\n                    console.log(\"Google Maps script loaded\");\n                    setScriptLoaded(true);\n                },\n                onError: (e)=>{\n                    console.error(\"Failed to load Google Maps script:\", e);\n                    setError(\"Failed to load Google Maps\");\n                    setIsLoading(false);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 601,\n                columnNumber: 17\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 text-red-500 p-4 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 616,\n                columnNumber: 17\n            }, undefined),\n            isLoading && !error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-gray-600\",\n                    children: [\n                        \"Loading map...\",\n                        !apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: \"Waiting for API key...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                            lineNumber: 624,\n                            columnNumber: 37\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 622,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 621,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 628,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 599,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"y4nCoUeELttA2M9ZugFCKB6BF5k=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n"));

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: function() { return /* binding */ BUDGET_DESCRIPTIONS; },\n/* harmony export */   BUDGET_OPTIONS: function() { return /* binding */ BUDGET_OPTIONS; },\n/* harmony export */   BudgetLevel: function() { return /* binding */ BudgetLevel; },\n/* harmony export */   CURRENCY_INFO: function() { return /* binding */ CURRENCY_INFO; },\n/* harmony export */   ComponentType: function() { return /* binding */ ComponentType; },\n/* harmony export */   DEFAULT_CURRENCIES: function() { return /* binding */ DEFAULT_CURRENCIES; },\n/* harmony export */   LANGUAGE_LABELS: function() { return /* binding */ LANGUAGE_LABELS; },\n/* harmony export */   LANGUAGE_OPTIONS: function() { return /* binding */ LANGUAGE_OPTIONS; },\n/* harmony export */   PREFERENCE_ICONS: function() { return /* binding */ PREFERENCE_ICONS; },\n/* harmony export */   PREFERENCE_OPTIONS: function() { return /* binding */ PREFERENCE_OPTIONS; },\n/* harmony export */   SupportedLanguage: function() { return /* binding */ SupportedLanguage; },\n/* harmony export */   TravelPreference: function() { return /* binding */ TravelPreference; }\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map((param)=>{\n    let [key, value] = param;\n    return {\n        value,\n        label: LANGUAGE_LABELS[value]\n    };\n});\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYW5hZ2Vycy90eXBlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnRUFBZ0U7O1VBb0JwREE7Ozs7Ozs7Ozs7O0dBQUFBLGtCQUFBQTs7VUFhQUM7Ozs7O0dBQUFBLGdCQUFBQTs7VUFPQUM7Ozs7Ozs7R0FBQUEscUJBQUFBOztVQVNBQzs7Ozs7Ozs7Ozs7O0dBQUFBLHNCQUFBQTtBQWNMLE1BQU1DLHNCQUFtRDtJQUM1RCxLQUFvQixFQUFFO0lBQ3RCLE1BQXNCLEVBQUU7SUFDeEIsT0FBb0IsRUFBRTtJQUN0QixRQUF5QixFQUFFO0FBQy9CLEVBQUU7QUFFSyxNQUFNQyxtQkFBcUQ7SUFDOUQsd0JBQTBCLEVBQUU7SUFDNUIsVUFBeUIsRUFBRTtJQUMzQixVQUF1QixFQUFFO0lBQ3pCLFdBQTZCLEVBQUU7SUFDL0IsYUFBNEIsRUFBRTtJQUM5QixpQkFBMkIsRUFBRTtBQUNqQyxFQUFFO0FBRUssTUFBTUMsa0JBQXFEO0lBQzlELFdBQTJCLEVBQUU7SUFDN0IseUJBQXlCLEVBQUU7SUFDM0IsV0FBMkIsRUFBRTtJQUM3QixZQUEwQixFQUFFO0lBQzVCLFdBQTBCLEVBQUU7SUFDNUIsWUFBMkIsRUFBRTtJQUM3QixtQkFBeUIsRUFBRTtJQUMzQiw2QkFBcUMsRUFBRTtJQUN2Qyw4QkFBc0MsRUFBRTtJQUN4QyxrQkFBNEIsRUFBRTtJQUM5QixnQkFBMEIsRUFBRTtBQUNoQyxFQUFFO0FBRUssTUFBTUMsaUJBQWlCO0lBQzFCO1FBQUVDLEtBQUs7UUFBc0JDLE9BQU87UUFBVUMsYUFBYTtJQUErQztJQUMxRztRQUFFRixLQUFLO1FBQXdCQyxPQUFPO1FBQVlDLGFBQWE7SUFBb0M7SUFDbkc7UUFBRUYsS0FBSztRQUFzQkMsT0FBTztRQUFVQyxhQUFhO0lBQXlDO0lBQ3BHO1FBQUVGLEtBQUs7UUFBMkJDLE9BQU87UUFBZ0JDLGFBQWE7SUFBK0I7Q0FDeEcsQ0FBQztBQUVLLE1BQU1DLG1CQUFtQkMsT0FBT0MsT0FBTyxDQUFDVixtQkFBbUJXLEdBQUcsQ0FBQztRQUFDLENBQUNDLEtBQUtQLE1BQU07V0FBTTtRQUNyRkE7UUFDQUMsT0FBT0gsZUFBZSxDQUFDRSxNQUEyQjtJQUN0RDtBQUFBLEdBQUk7QUFFRyxNQUFNUSxxQkFBcUI7SUFDOUI7UUFBRVIsS0FBSztRQUE0QkMsT0FBTztRQUF3QlEsTUFBTVosZ0JBQWdCLHdCQUEwQjtJQUFDO0lBQ25IO1FBQUVHLEtBQUs7UUFBMkJDLE9BQU87UUFBVVEsTUFBTVosZ0JBQWdCLFVBQXlCO0lBQUM7SUFDbkc7UUFBRUcsS0FBSztRQUF5QkMsT0FBTztRQUFVUSxNQUFNWixnQkFBZ0IsVUFBdUI7SUFBQztJQUMvRjtRQUFFRyxLQUFLO1FBQStCQyxPQUFPO1FBQVdRLE1BQU1aLGdCQUFnQixXQUE2QjtJQUFDO0lBQzVHO1FBQUVHLEtBQUs7UUFBOEJDLE9BQU87UUFBYVEsTUFBTVosZ0JBQWdCLGFBQTRCO0lBQUM7SUFDNUc7UUFBRUcsS0FBSztRQUE2QkMsT0FBTztRQUFpQlEsTUFBTVosZ0JBQWdCLGlCQUEyQjtJQUFDO0NBQ2pILENBQUM7QUFrUUssTUFBTWEsZ0JBQWlEO0lBQzFELE9BQU87UUFBRUMsTUFBTTtRQUFhQyxRQUFRO1FBQUtDLFVBQVU7SUFBUztJQUM1RCxPQUFPO1FBQUVGLE1BQU07UUFBUUMsUUFBUTtRQUFLQyxVQUFVO0lBQVM7SUFDdkQsT0FBTztRQUFFRixNQUFNO1FBQWlCQyxRQUFRO1FBQUtDLFVBQVU7SUFBUztJQUNoRSxPQUFPO1FBQUVGLE1BQU07UUFBZ0JDLFFBQVE7UUFBS0MsVUFBVTtJQUFTO0lBQy9ELE9BQU87UUFBRUYsTUFBTTtRQUFnQkMsUUFBUTtRQUFLQyxVQUFVO0lBQVM7SUFDL0QsT0FBTztRQUFFRixNQUFNO1FBQW9CQyxRQUFRO1FBQU1DLFVBQVU7SUFBUztJQUNwRSxPQUFPO1FBQUVGLE1BQU07UUFBcUJDLFFBQVE7UUFBTUMsVUFBVTtJQUFTO0lBQ3JFLE9BQU87UUFBRUYsTUFBTTtRQUFvQkMsUUFBUTtRQUFLQyxVQUFVO0lBQVM7SUFDbkUsT0FBTztRQUFFRixNQUFNO1FBQXFCQyxRQUFRO1FBQU1DLFVBQVU7SUFBUztJQUNyRSxPQUFPO1FBQUVGLE1BQU07UUFBbUJDLFFBQVE7UUFBTUMsVUFBVTtJQUFTO0FBQ3ZFLEVBQUU7QUFZSyxNQUFNQyxxQkFBcUI7SUFBQztJQUFPO0lBQU87SUFBTztJQUFPO0NBQU0sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9tYW5hZ2Vycy90eXBlcy50cz9jZDliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vL1VzZXJzL3RlcnJhbmNlaGFoL0RvY3VtZW50cy90ZXJyYW5jZWhhaC5jb20vbWFuYWdlcnMvdHlwZXMudHNcblxuaW1wb3J0IHsgTWVzc2FnZSBhcyBBaU1lc3NhZ2UsIEpTT05WYWx1ZSB9IGZyb20gJ2FpJztcbmltcG9ydCB7IFBsYWNlIH0gZnJvbSAnLi4vdXRpbHMvcGxhY2VzLXV0aWxzJztcbmltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBUcmF2ZWxEZXRhaWxzIHtcbiAgICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICAgIGxvY2F0aW9uPzoge1xuICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgICAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB9O1xuICAgIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICAgIGVuZERhdGU6IHN0cmluZztcbiAgICBwcmVmZXJlbmNlczogc3RyaW5nW107XG4gICAgYnVkZ2V0OiBzdHJpbmc7XG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcbiAgICB0cmFuc3BvcnQ6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgZW51bSBDb21wb25lbnRUeXBlIHtcbiAgICBEYXRlUGlja2VyID0gJ0RhdGVQaWNrZXInLFxuICAgIFByZWZlcmVuY2VTZWxlY3RvciA9ICdQcmVmZXJlbmNlU2VsZWN0b3InLFxuICAgIEJ1ZGdldFNlbGVjdG9yID0gJ0J1ZGdldFNlbGVjdG9yJyxcbiAgICBMYW5ndWFnZVNlbGVjdG9yID0gJ0xhbmd1YWdlU2VsZWN0b3InLFxuICAgIFBsYWNlQ2FyZCA9ICdQbGFjZUNhcmQnLFxuICAgIFRyYW5zcG9ydFNlbGVjdG9yID0gJ1RyYW5zcG9ydFNlbGVjdG9yJyxcbiAgICBDYXJvdXNlbCA9ICdDYXJvdXNlbCcsXG4gICAgRGV0YWlsc0NhcmQgPSAnRGV0YWlsc0NhcmQnLFxuICAgIFNhdmVkUGxhY2VzQ2Fyb3VzZWwgPSAnU2F2ZWRQbGFjZXNDYXJvdXNlbCcsXG4gICAgUXVpY2tSZXNwb25zZSA9ICdRdWlja1Jlc3BvbnNlJ1xufVxuXG5leHBvcnQgZW51bSBCdWRnZXRMZXZlbCB7XG4gICAgQnVkZ2V0ID0gJyQnLFxuICAgIE1vZGVyYXRlID0gJyQkJyxcbiAgICBMdXh1cnkgPSAnJCQkJyxcbiAgICBVbHRyYUx1eHVyeSA9ICckJCQkJ1xufVxuXG5leHBvcnQgZW51bSBUcmF2ZWxQcmVmZXJlbmNlIHtcbiAgICBDdWx0dXJlID0gJ0N1bHR1cmUgYW5kIEhlcml0YWdlJyxcbiAgICBOYXR1cmUgPSAnTmF0dXJlJyxcbiAgICBGb29kID0gJ0Zvb2RpZScsXG4gICAgUmVsYXhhdGlvbiA9ICdMZWlzdXJlJyxcbiAgICBBZHZlbnR1cmUgPSAnQWR2ZW50dXJlJyxcbiAgICBTaG9wcGluZyA9ICdBcnRzICYgTXVzZXVtJ1xufVxuXG5leHBvcnQgZW51bSBTdXBwb3J0ZWRMYW5ndWFnZSB7XG4gICAgRW5nbGlzaCA9ICdFbmdsaXNoJyxcbiAgICBNYWxheSA9ICdNYWxheSAoQmFoYXNhIE1lbGF5dSknLFxuICAgIFNwYW5pc2ggPSAnRXNwYW5vbCcsXG4gICAgRnJlbmNoID0gJ0ZyYW5jYWlzJyxcbiAgICBHZXJtYW4gPSAnRGV1dHNjaCcsXG4gICAgSXRhbGlhbiA9ICdJdGFsaWFubycsXG4gICAgQ3plY2ggPSAnQ3plY2ggKENlc3RpbmEpJyxcbiAgICBTaW1wbGlmaWVkQ2hpbmVzZSA9ICdTaW1wbGlmaWVkIENoaW5lc2UgKOeugOS9k+S4reaWhyknLFxuICAgIFRyYWRpdGlvbmFsQ2hpbmVzZSA9ICdUcmFkaXRpb25hbCBDaGluZXNlICjnuYHpq5TkuK3mlocpJyxcbiAgICBKYXBhbmVzZSA9ICdKYXBhbmVzZSAo5pel5pys6KqeKScsXG4gICAgS29yZWFuID0gJ0tvcmVhbiAo7ZWc6rWt7Ja0KSdcbn1cblxuZXhwb3J0IGNvbnN0IEJVREdFVF9ERVNDUklQVElPTlM6IFJlY29yZDxCdWRnZXRMZXZlbCwgc3RyaW5nPiA9IHtcbiAgICBbQnVkZ2V0TGV2ZWwuQnVkZ2V0XTogJ0J1ZGdldC1mcmllbmRseSBvcHRpb25zICgkKScsXG4gICAgW0J1ZGdldExldmVsLk1vZGVyYXRlXTogJ01pZC1yYW5nZSBvcHRpb25zICgkJCknLFxuICAgIFtCdWRnZXRMZXZlbC5MdXh1cnldOiAnSGlnaC1lbmQgb3B0aW9ucyAoJCQkKScsXG4gICAgW0J1ZGdldExldmVsLlVsdHJhTHV4dXJ5XTogJ1VsdHJhIGx1eHVyeSBvcHRpb25zICgkJCQkKSdcbn07XG5cbmV4cG9ydCBjb25zdCBQUkVGRVJFTkNFX0lDT05TOiBSZWNvcmQ8VHJhdmVsUHJlZmVyZW5jZSwgc3RyaW5nPiA9IHtcbiAgICBbVHJhdmVsUHJlZmVyZW5jZS5DdWx0dXJlXTogJ/Cfjo8nLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLk5hdHVyZV06ICfwn42AJyxcbiAgICBbVHJhdmVsUHJlZmVyZW5jZS5Gb29kXTogJ/CfjbEnLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLlJlbGF4YXRpb25dOiAn8J+MhycsXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuQWR2ZW50dXJlXTogJ/CfqoInLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLlNob3BwaW5nXTogJ/CfjqgnXG59O1xuXG5leHBvcnQgY29uc3QgTEFOR1VBR0VfTEFCRUxTOiBSZWNvcmQ8U3VwcG9ydGVkTGFuZ3VhZ2UsIHN0cmluZz4gPSB7XG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLkVuZ2xpc2hdOiAnRW5nbGlzaCcsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLk1hbGF5XTogJ01hbGF5IChCYWhhc2EgTWVsYXl1KScsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLlNwYW5pc2hdOiAnRXNwYW5vbCcsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLkZyZW5jaF06ICdGcmFuY2FpcycsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLkdlcm1hbl06ICdEZXV0c2NoJyxcbiAgICBbU3VwcG9ydGVkTGFuZ3VhZ2UuSXRhbGlhbl06ICdJdGFsaWFubycsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLkN6ZWNoXTogJ0N6ZWNoIChDZXN0aW5hKScsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLlNpbXBsaWZpZWRDaGluZXNlXTogJ1NpbXBsaWZpZWQgQ2hpbmVzZSAo566A5L2T5Lit5paHKScsXG4gICAgW1N1cHBvcnRlZExhbmd1YWdlLlRyYWRpdGlvbmFsQ2hpbmVzZV06ICdUcmFkaXRpb25hbCBDaGluZXNlICjnuYHpq5TkuK3mlocpJyxcbiAgICBbU3VwcG9ydGVkTGFuZ3VhZ2UuSmFwYW5lc2VdOiAnSmFwYW5lc2UgKOaXpeacrOiqniknLFxuICAgIFtTdXBwb3J0ZWRMYW5ndWFnZS5Lb3JlYW5dOiAnS29yZWFuICjtlZzqta3slrQpJ1xufTtcblxuZXhwb3J0IGNvbnN0IEJVREdFVF9PUFRJT05TID0gW1xuICAgIHsgdmFsdWU6IEJ1ZGdldExldmVsLkJ1ZGdldCwgbGFiZWw6ICdCdWRnZXQnLCBkZXNjcmlwdGlvbjogJ0J1ZGdldC1mcmllbmRseSBvcHRpb25zIHdpdGggYmFzaWMgYW1lbml0aWVzJyB9LFxuICAgIHsgdmFsdWU6IEJ1ZGdldExldmVsLk1vZGVyYXRlLCBsYWJlbDogJ01vZGVyYXRlJywgZGVzY3JpcHRpb246ICdNaWQtcmFuZ2Ugb3B0aW9ucyB3aXRoIGdvb2QgdmFsdWUnIH0sXG4gICAgeyB2YWx1ZTogQnVkZ2V0TGV2ZWwuTHV4dXJ5LCBsYWJlbDogJ0x1eHVyeScsIGRlc2NyaXB0aW9uOiAnSGlnaC1lbmQgb3B0aW9ucyB3aXRoIHByZW1pdW0gc2VydmljZXMnIH0sXG4gICAgeyB2YWx1ZTogQnVkZ2V0TGV2ZWwuVWx0cmFMdXh1cnksIGxhYmVsOiAnVWx0cmEgTHV4dXJ5JywgZGVzY3JpcHRpb246ICdFeGNsdXNpdmUgbHV4dXJ5IGV4cGVyaWVuY2VzJyB9XG5dO1xuXG5leHBvcnQgY29uc3QgTEFOR1VBR0VfT1BUSU9OUyA9IE9iamVjdC5lbnRyaWVzKFN1cHBvcnRlZExhbmd1YWdlKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICB2YWx1ZSxcbiAgICBsYWJlbDogTEFOR1VBR0VfTEFCRUxTW3ZhbHVlIGFzIFN1cHBvcnRlZExhbmd1YWdlXVxufSkpO1xuXG5leHBvcnQgY29uc3QgUFJFRkVSRU5DRV9PUFRJT05TID0gW1xuICAgIHsgdmFsdWU6IFRyYXZlbFByZWZlcmVuY2UuQ3VsdHVyZSwgbGFiZWw6ICdDdWx0dXJlIGFuZCBIZXJpdGFnZScsIGljb246IFBSRUZFUkVOQ0VfSUNPTlNbVHJhdmVsUHJlZmVyZW5jZS5DdWx0dXJlXSB9LFxuICAgIHsgdmFsdWU6IFRyYXZlbFByZWZlcmVuY2UuTmF0dXJlLCBsYWJlbDogJ05hdHVyZScsIGljb246IFBSRUZFUkVOQ0VfSUNPTlNbVHJhdmVsUHJlZmVyZW5jZS5OYXR1cmVdIH0sXG4gICAgeyB2YWx1ZTogVHJhdmVsUHJlZmVyZW5jZS5Gb29kLCBsYWJlbDogJ0Zvb2RpZScsIGljb246IFBSRUZFUkVOQ0VfSUNPTlNbVHJhdmVsUHJlZmVyZW5jZS5Gb29kXSB9LFxuICAgIHsgdmFsdWU6IFRyYXZlbFByZWZlcmVuY2UuUmVsYXhhdGlvbiwgbGFiZWw6ICdMZWlzdXJlJywgaWNvbjogUFJFRkVSRU5DRV9JQ09OU1tUcmF2ZWxQcmVmZXJlbmNlLlJlbGF4YXRpb25dIH0sXG4gICAgeyB2YWx1ZTogVHJhdmVsUHJlZmVyZW5jZS5BZHZlbnR1cmUsIGxhYmVsOiAnQWR2ZW50dXJlJywgaWNvbjogUFJFRkVSRU5DRV9JQ09OU1tUcmF2ZWxQcmVmZXJlbmNlLkFkdmVudHVyZV0gfSxcbiAgICB7IHZhbHVlOiBUcmF2ZWxQcmVmZXJlbmNlLlNob3BwaW5nLCBsYWJlbDogJ0FydHMgJiBNdXNldW0nLCBpY29uOiBQUkVGRVJFTkNFX0lDT05TW1RyYXZlbFByZWZlcmVuY2UuU2hvcHBpbmddIH1cbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50UHJvcHMge1xuICAgIFtDb21wb25lbnRUeXBlLkRhdGVQaWNrZXJdOiB7XG4gICAgICAgIHN0YXJ0RGF0ZT86IHN0cmluZztcbiAgICAgICAgZW5kRGF0ZT86IHN0cmluZztcbiAgICAgICAgb25EYXRlQ2hhbmdlOiAoc3RhcnREYXRlOiBzdHJpbmcsIGVuZERhdGU6IHN0cmluZykgPT4gdm9pZDtcbiAgICB9O1xuICAgIFtDb21wb25lbnRUeXBlLlByZWZlcmVuY2VTZWxlY3Rvcl06IHtcbiAgICAgICAgc2VsZWN0ZWRQcmVmZXJlbmNlczogVHJhdmVsUHJlZmVyZW5jZVtdO1xuICAgICAgICBvblByZWZlcmVuY2VDaGFuZ2U6IChwcmVmZXJlbmNlczogVHJhdmVsUHJlZmVyZW5jZVtdKSA9PiB2b2lkO1xuICAgIH07XG4gICAgW0NvbXBvbmVudFR5cGUuQnVkZ2V0U2VsZWN0b3JdOiB7XG4gICAgICAgIHNlbGVjdGVkQnVkZ2V0PzogQnVkZ2V0TGV2ZWw7XG4gICAgICAgIG9uQnVkZ2V0Q2hhbmdlOiAoYnVkZ2V0OiBCdWRnZXRMZXZlbCkgPT4gdm9pZDtcbiAgICB9O1xuICAgIFtDb21wb25lbnRUeXBlLkxhbmd1YWdlU2VsZWN0b3JdOiB7XG4gICAgICAgIHNlbGVjdGVkTGFuZ3VhZ2U/OiBTdXBwb3J0ZWRMYW5ndWFnZTtcbiAgICAgICAgb25MYW5ndWFnZUNoYW5nZTogKGxhbmd1YWdlOiBTdXBwb3J0ZWRMYW5ndWFnZSkgPT4gdm9pZDtcbiAgICB9O1xuICAgIFtDb21wb25lbnRUeXBlLlBsYWNlQ2FyZF06IHtcbiAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgaW1hZ2VVcmw6IHN0cmluZztcbiAgICAgICAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gICAgfTtcbiAgICBbQ29tcG9uZW50VHlwZS5UcmFuc3BvcnRTZWxlY3Rvcl06IHtcbiAgICAgICAgb3B0aW9uczogc3RyaW5nW107XG4gICAgICAgIG9uU2VsZWN0OiAob3B0aW9uOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgfTtcbiAgICBbQ29tcG9uZW50VHlwZS5DYXJvdXNlbF06IHtcbiAgICAgICAgaXRlbXM6IEFycmF5PHtcbiAgICAgICAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICAgICAgaW1hZ2VVcmw6IHN0cmluZztcbiAgICAgICAgfT47XG4gICAgfTtcbiAgICBbQ29tcG9uZW50VHlwZS5EZXRhaWxzQ2FyZF06IHtcbiAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgICAgY29udGVudDogUmVhY3ROb2RlO1xuICAgIH07XG4gICAgW0NvbXBvbmVudFR5cGUuU2F2ZWRQbGFjZXNDYXJvdXNlbF06IHtcbiAgICAgICAgcGxhY2VzOiBQbGFjZVtdO1xuICAgICAgICBvbkRlbGV0ZTogKHBsYWNlSWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgICB9O1xuICAgIFtDb21wb25lbnRUeXBlLlF1aWNrUmVzcG9uc2VdOiB7XG4gICAgICAgIHJlc3BvbnNlczogc3RyaW5nW107XG4gICAgICAgIG9uUmVzcG9uc2VTZWxlY3Q6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRSZWdpc3RyYXRpb248VCBleHRlbmRzIENvbXBvbmVudFR5cGU+IHtcbiAgICBjb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8Q29tcG9uZW50UHJvcHNbVF0+O1xuICAgIGRlZmF1bHRQcm9wcz86IFBhcnRpYWw8Q29tcG9uZW50UHJvcHNbVF0+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudFN0YXRlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHR5cGU6IENvbXBvbmVudFR5cGU7XG4gICAgcHJvcHM6IGFueTtcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XG4gICAgb3JkZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRUcmFuc2l0aW9uIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGZyb206IFBhcnRpYWw8Q29tcG9uZW50U3RhdGU+O1xuICAgIHRvOiBQYXJ0aWFsPENvbXBvbmVudFN0YXRlPjtcbiAgICBkdXJhdGlvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRVcGRhdGUge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdXBkYXRlczogUGFydGlhbDxDb21wb25lbnRTdGF0ZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZURhdGEge1xuICAgIHRvb2xOYW1lPzogQ29tcG9uZW50VHlwZTtcbiAgICBjb21wb25lbnRQcm9wcz86IGFueTtcbiAgICBpc0RldGFpbHNDYXJkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSBleHRlbmRzIE9taXQ8QWlNZXNzYWdlLCAnZGF0YSc+IHtcbiAgICBkYXRhPzogTWVzc2FnZURhdGE7XG59XG5cbmV4cG9ydCB0eXBlIFRvb2xSZXNwb25zZTxUIGV4dGVuZHMgQ29tcG9uZW50VHlwZT4gPSB7XG4gICAgdHlwZTogVDtcbiAgICBwcm9wczogQ29tcG9uZW50UHJvcHNbVF07XG4gICAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuLy8gU2Vzc2lvbiBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBUcmF2ZWxTZXNzaW9uIHtcbiAgICAvLyBTZXNzaW9uIGluZm9cbiAgICBzZXNzaW9uSWQ6IHN0cmluZztcbiAgICBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBsYXN0QWN0aXZlOiBudW1iZXI7XG4gICAgZXhwaXJlc0F0OiBudW1iZXI7XG5cbiAgICAvLyBUcmF2ZWwgZGV0YWlsc1xuICAgIGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gICAgc3RhcnREYXRlOiBzdHJpbmc7XG4gICAgZW5kRGF0ZTogc3RyaW5nO1xuICAgIHByZWZlcmVuY2VzOiBzdHJpbmdbXTtcbiAgICBidWRnZXQ6IHN0cmluZztcbiAgICBsYW5ndWFnZTogc3RyaW5nO1xuICAgIHRyYW5zcG9ydDogc3RyaW5nW107XG4gICAgbG9jYXRpb24/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIH07XG5cbiAgICAvLyBQbGFjZXNcbiAgICBzYXZlZFBsYWNlczogYW55W107XG4gICAgY3VycmVudFN0YWdlOiBudW1iZXI7XG5cbiAgICAvLyBNZXRyaWNzXG4gICAgdG90YWxQcm9tcHRzOiBudW1iZXI7XG4gICAgc3RhZ2VQcm9tcHRzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+O1xuICAgIHNhdmVkUGxhY2VzQ291bnQ6IG51bWJlcjtcbiAgICBcbiAgICAvLyBQYXltZW50XG4gICAgaXNQYWlkOiBib29sZWFuO1xuICAgIHBheW1lbnRSZWZlcmVuY2U6IHN0cmluZztcbiAgICBwYXltZW50VGltZXN0YW1wPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBDaGF0U3RhdGUgPSAnaW5pdGlhbCcgfCAnZ2F0aGVyaW5nX2luZm8nIHwgJ3BsYW5uaW5nJyB8ICdpbnRlcnJ1cHRlZCcgfCAnY29tcGxldGVkJztcblxuZXhwb3J0IGludGVyZmFjZSBBSVJlc3BvbnNlIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcGFyYW1ldGVycz86IFRyYXZlbERldGFpbHM7XG4gICAgc3VnZ2VzdGVkQWN0aW9uPzogc3RyaW5nO1xuICAgIGVycm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlQ29uZmlnIHtcbiAgICBtYXhTaXplOiBudW1iZXI7XG4gICAgdHRsOiBudW1iZXI7IC8vIFRpbWUgdG8gbGl2ZSBpbiBtaWxsaXNlY29uZHNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWNoZUVudHJ5IHtcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgdGltZXN0YW1wOiBudW1iZXI7XG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UmVzcG9uc2Uge1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBjYWNoZWQ6IGJvb2xlYW47XG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcbiAgICBnZW5lcmF0ZWQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbEludm9jYXRpb24ge1xuICAgIHRvb2xOYW1lOiBzdHJpbmc7XG4gICAgdG9vbENhbGxJZDogc3RyaW5nO1xuICAgIHN0YXRlOiAncmVzdWx0JyB8ICdwZW5kaW5nJyB8ICdlcnJvcic7ICBcbiAgICBhcmdzOiBKU09OVmFsdWU7ICBcbiAgICByZXN1bHQ/OiB7XG4gICAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgICAgcHJvcHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+OyAgXG4gICAgfTtcbiAgICBlcnJvcj86IHN0cmluZzsgIFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAnc3lzdGVtJzsgIFxuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBjcmVhdGVkQXQ/OiBEYXRlOyAgXG4gICAgZGF0YT86IE1lc3NhZ2VEYXRhO1xuICAgIHRvb2xJbnZvY2F0aW9ucz86IFRvb2xJbnZvY2F0aW9uW107XG4gICAgcGFyZW50TWVzc2FnZUlkPzogc3RyaW5nOyAgXG59XG5cbi8vIFdlYXRoZXIgcmVsYXRlZCB0eXBlc1xuZXhwb3J0IGludGVyZmFjZSBXZWF0aGVyRGF0YSB7XG4gICAgZGF0ZTogc3RyaW5nO1xuICAgIHByZWNpcGl0YXRpb246IHtcbiAgICAgICAgdG90YWw6IG51bWJlcjtcbiAgICB9O1xuICAgIHRlbXBlcmF0dXJlOiB7XG4gICAgICAgIG1heDogbnVtYmVyO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2VhdGhlckNoYXJ0UHJvcHMge1xuICAgIGxhdDogbnVtYmVyO1xuICAgIGxvbjogbnVtYmVyO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBzdGFydERhdGU6IHN0cmluZztcbiAgICBlbmREYXRlOiBzdHJpbmc7XG4gICAgdW5pdHM/OiAndXMnIHwgJ3VrJyB8ICdtZXRyaWMnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5XZWF0aGVyRGF5UmVzcG9uc2Uge1xuICAgIGxhdDogbnVtYmVyO1xuICAgIGxvbjogbnVtYmVyO1xuICAgIHR6OiBzdHJpbmc7XG4gICAgZGF0ZTogc3RyaW5nO1xuICAgIHVuaXRzOiBzdHJpbmc7XG4gICAgY2xvdWRfY292ZXI6IHtcbiAgICBhZnRlcm5vb246IG51bWJlcjtcbiAgICB9O1xuICAgIGh1bWlkaXR5OiB7XG4gICAgYWZ0ZXJub29uOiBudW1iZXI7XG4gICAgfTtcbiAgICBwcmVjaXBpdGF0aW9uOiB7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICB9O1xuICAgIHRlbXBlcmF0dXJlOiB7XG4gICAgbWluOiBudW1iZXI7XG4gICAgbWF4OiBudW1iZXI7XG4gICAgYWZ0ZXJub29uOiBudW1iZXI7XG4gICAgbmlnaHQ6IG51bWJlcjtcbiAgICBldmVuaW5nOiBudW1iZXI7XG4gICAgbW9ybmluZzogbnVtYmVyO1xuICAgIH07XG4gICAgcHJlc3N1cmU6IHtcbiAgICBhZnRlcm5vb246IG51bWJlcjtcbiAgICB9O1xuICAgIHdpbmQ6IHtcbiAgICBtYXg6IHtcbiAgICAgICAgc3BlZWQ6IG51bWJlcjtcbiAgICAgICAgZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWF0aGVyUmVzcG9uc2Uge1xuICAgIGRhdGE6IE9wZW5XZWF0aGVyRGF5UmVzcG9uc2U7XG4gICAgeWVhcjogbnVtYmVyOyAgLy8gQWRkIHRoaXMgZmllbGRcbiAgICBlcnJvcj86IHN0cmluZztcbn1cblxuLy8gQ3VycmVuY3kgcmVsYXRlZCB0eXBlc1xuZXhwb3J0IGludGVyZmFjZSBDdXJyZW5jeVJhdGUge1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmF0ZTogbnVtYmVyO1xuICAgIHN5bWJvbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXJyZW5jeUNvbnZlcnRlclByb3BzIHtcbiAgICBiYXNlQ3VycmVuY3k/OiBzdHJpbmc7XG4gICAgYmFzZUFtb3VudD86IG51bWJlcjtcbiAgICBvbkFtb3VudENoYW5nZT86IChhbW91bnQ6IG51bWJlcikgPT4gdm9pZDtcbiAgICBkZWZhdWx0Q3VycmVuY2llcz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1cnJlbmN5SW5mbyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN5bWJvbDogc3RyaW5nO1xuICAgIHBvc2l0aW9uOiAnYmVmb3JlJyB8ICdhZnRlcic7XG59XG5cbmV4cG9ydCBjb25zdCBDVVJSRU5DWV9JTkZPOiB7IFtrZXk6IHN0cmluZ106IEN1cnJlbmN5SW5mbyB9ID0ge1xuICAgICdVU0QnOiB7IG5hbWU6ICdVUyBEb2xsYXInLCBzeW1ib2w6ICckJywgcG9zaXRpb246ICdiZWZvcmUnIH0sXG4gICAgJ0VVUic6IHsgbmFtZTogJ0V1cm8nLCBzeW1ib2w6ICfigqwnLCBwb3NpdGlvbjogJ2JlZm9yZScgfSxcbiAgICAnR0JQJzogeyBuYW1lOiAnQnJpdGlzaCBQb3VuZCcsIHN5bWJvbDogJ8KjJywgcG9zaXRpb246ICdiZWZvcmUnIH0sXG4gICAgJ0NOWSc6IHsgbmFtZTogJ0NoaW5lc2UgWXVhbicsIHN5bWJvbDogJ8KlJywgcG9zaXRpb246ICdiZWZvcmUnIH0sXG4gICAgJ0pQWSc6IHsgbmFtZTogJ0phcGFuZXNlIFllbicsIHN5bWJvbDogJ8KlJywgcG9zaXRpb246ICdiZWZvcmUnIH0sXG4gICAgJ1NHRCc6IHsgbmFtZTogJ1NpbmdhcG9yZSBEb2xsYXInLCBzeW1ib2w6ICdTJCcsIHBvc2l0aW9uOiAnYmVmb3JlJyB9LFxuICAgICdNWVInOiB7IG5hbWU6ICdNYWxheXNpYW4gUmluZ2dpdCcsIHN5bWJvbDogJ1JNJywgcG9zaXRpb246ICdiZWZvcmUnIH0sXG4gICAgJ0tSVyc6IHsgbmFtZTogJ1NvdXRoIEtvcmVhbiBXb24nLCBzeW1ib2w6ICfigqknLCBwb3NpdGlvbjogJ2JlZm9yZScgfSxcbiAgICAnQVVEJzogeyBuYW1lOiAnQXVzdHJhbGlhbiBEb2xsYXInLCBzeW1ib2w6ICdBJCcsIHBvc2l0aW9uOiAnYmVmb3JlJyB9LFxuICAgICdDQUQnOiB7IG5hbWU6ICdDYW5hZGlhbiBEb2xsYXInLCBzeW1ib2w6ICdDJCcsIHBvc2l0aW9uOiAnYmVmb3JlJyB9XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEN1cnJlbmN5Q2FjaGUge1xuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xuICAgIHJhdGVzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICAgIGJhc2VDdXJyZW5jeTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1cnJlbmN5QXBpUmVzcG9uc2Uge1xuICAgIGRhdGE6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NVUlJFTkNJRVMgPSBbJ1VTRCcsICdFVVInLCAnR0JQJywgJ0NOWScsICdKUFknXTtcblxuZXhwb3J0IGludGVyZmFjZSBTdGFnZVByb2dyZXNzUmVzdWx0IHtcbiAgICB0eXBlOiAnc3RhZ2VQcm9ncmVzcyc7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgbmV4dFN0YWdlOiBudW1iZXI7XG4gICAgICAgIHJlYXNvbjogc3RyaW5nO1xuICAgICAgICBjcml0ZXJpYTogc3RyaW5nW107XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJDb21wb25lbnRUeXBlIiwiQnVkZ2V0TGV2ZWwiLCJUcmF2ZWxQcmVmZXJlbmNlIiwiU3VwcG9ydGVkTGFuZ3VhZ2UiLCJCVURHRVRfREVTQ1JJUFRJT05TIiwiUFJFRkVSRU5DRV9JQ09OUyIsIkxBTkdVQUdFX0xBQkVMUyIsIkJVREdFVF9PUFRJT05TIiwidmFsdWUiLCJsYWJlbCIsImRlc2NyaXB0aW9uIiwiTEFOR1VBR0VfT1BUSU9OUyIsIk9iamVjdCIsImVudHJpZXMiLCJtYXAiLCJrZXkiLCJQUkVGRVJFTkNFX09QVElPTlMiLCJpY29uIiwiQ1VSUkVOQ1lfSU5GTyIsIm5hbWUiLCJzeW1ib2wiLCJwb3NpdGlvbiIsIkRFRkFVTFRfQ1VSUkVOQ0lFUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./managers/types.ts\n"));

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: function() { return /* binding */ fetchPlaces; },\n/* harmony export */   filterUniquePlaces: function() { return /* binding */ filterUniquePlaces; },\n/* harmony export */   formatPrimaryType: function() { return /* binding */ formatPrimaryType; },\n/* harmony export */   getDisplayName: function() { return /* binding */ getDisplayName; },\n/* harmony export */   getPlaceTypesFromPreferences: function() { return /* binding */ getPlaceTypesFromPreferences; },\n/* harmony export */   metricsManager: function() { return /* binding */ metricsManager; },\n/* harmony export */   preferenceToPlaceTypes: function() { return /* binding */ preferenceToPlaceTypes; },\n/* harmony export */   savedPlacesManager: function() { return /* binding */ savedPlacesManager; },\n/* harmony export */   searchMultiplePlacesByText: function() { return /* binding */ searchMultiplePlacesByText; },\n/* harmony export */   searchPlaceByText: function() { return /* binding */ searchPlaceByText; }\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            var _preferenceToPlaceTypes_pref;\n            const availableTypes = ((_preferenceToPlaceTypes_pref = preferenceToPlaceTypes[pref]) === null || _preferenceToPlaceTypes_pref === void 0 ? void 0 : _preferenceToPlaceTypes_pref.filter((type)=>!usedTypes.has(type))) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    var _place_displayName;\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from sessionStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"object\" !== \"undefined\") {\n            const savedPlaces = sessionStorage.getItem(STORAGE_KEY);\n            if (savedPlaces) {\n                try {\n                    console.log(\"[savedPlacesManager] Raw saved places:\", savedPlaces);\n                    const parsedPlaces = JSON.parse(savedPlaces);\n                    console.log(\"[savedPlacesManager] Parsed places:\", parsedPlaces);\n                    if (Array.isArray(parsedPlaces)) {\n                        // Clear existing places before loading\n                        places.clear();\n                        parsedPlaces.forEach((place)=>{\n                            var _place_photos, _place_photos1;\n                            console.log(\"[savedPlacesManager] Processing place:\", {\n                                id: place.id,\n                                hasPhotos: Boolean(place.photos),\n                                photoCount: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.length,\n                                firstPhoto: (_place_photos1 = place.photos) === null || _place_photos1 === void 0 ? void 0 : _place_photos1[0]\n                            });\n                            if (place === null || place === void 0 ? void 0 : place.id) {\n                                places.set(place.id, place);\n                            }\n                        });\n                    }\n                } catch (error) {\n                    console.error(\"[savedPlacesManager] Error loading places:\", error);\n                }\n            }\n            initialized = true;\n        }\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place === null || place === void 0 ? void 0 : place.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        updatePlace (place) {\n            if (place.id && places.has(place.id)) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        _persist () {\n            if (true) {\n                const placesArray = Array.from(places.values());\n                sessionStorage.setItem(STORAGE_KEY, JSON.stringify(placesArray));\n                // Update metrics\n                const session = metricsManager.get();\n                session.savedPlacesCount = places.size;\n                metricsManager.update(session);\n            }\n        },\n        _notifyChange () {\n            if (true) {\n                window.savedPlaces = Array.from(places.values());\n                if (window.getSavedPlaces) {\n                    window.getSavedPlaces();\n                }\n            }\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (true) {\n    savedPlacesManager.places = new Map();\n}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? \"different \".concat(searchText, \" in \").concat(cityName) : \"\".concat(searchText, \" \").concat(cityName);\n    console.log(\"[searchWithStrategy] Using \".concat(useAlternateSearch ? \"alternate\" : \"original\", \" search:\"), query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        var _data_places, _data_places__displayName;\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!((_data_places = data.places) === null || _data_places === void 0 ? void 0 : _data_places[0])) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: ((_data_places__displayName = data.places[0].displayName) === null || _data_places__displayName === void 0 ? void 0 : _data_places__displayName.text) || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        var _result_places;\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!(result === null || result === void 0 ? void 0 : (_result_places = result.places) === null || _result_places === void 0 ? void 0 : _result_places[0])) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (false) {}\n    const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n    if (!session) {\n        return initializeMetrics();\n    }\n    // Always ensure savedPlacesCount matches actual saved places\n    session.savedPlacesCount = savedPlacesManager.places.size;\n    return session;\n}\n// Update metrics in storage\nfunction updateMetrics(session) {\n    if (false) {}\n    try {\n        const storedSession = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!storedSession) return;\n        // Update only metrics-related fields\n        storedSession.totalPrompts = session.totalPrompts;\n        storedSession.stagePrompts = session.stagePrompts;\n        storedSession.savedPlacesCount = session.savedPlacesCount;\n        sessionStorage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(storedSession));\n    } catch (error) {\n        console.error(\"[Places] Error updating metrics:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    var _place_photos, _place_displayName;\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async function(searchText, location) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>{\n            var _place_displayName, _place_photos;\n            return {\n                id: place.id,\n                displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    }))) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            };\n        });\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async function(latitude, longitude, preferences) {\n    let maxResults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5, placeTypes = arguments.length > 4 ? arguments[4] : void 0;\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!(preferences === null || preferences === void 0 ? void 0 : preferences.length),\n            fromPlaceTypes: !!(placeTypes === null || placeTypes === void 0 ? void 0 : placeTypes.length)\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>{\n                        var _place_displayName, _place_photos;\n                        return {\n                            id: place.id,\n                            displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                }))) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        };\n                    });\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n"));

/***/ }),

/***/ "./node_modules/next/script.js":
/*!*************************************!*\
  !*** ./node_modules/next/script.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/script */ \"./node_modules/next/dist/client/script.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9zY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkdBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L3NjcmlwdC5qcz9lNGJhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9zY3JpcHQnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/script.js\n"));

/***/ })

}]);