/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["components_map-component_tsx"],{

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/script */ \"./node_modules/next/script.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_script__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n// Keep for backward compatibility\nconst globalSavedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places;\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [infoWindow, setInfoWindow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [scriptLoaded, setScriptLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Memoize getSavedPlaces to prevent unnecessary re-renders\n    // const getSavedPlaces = useCallback(() => {\n    //     const now = Date.now();\n    //     // Only update if more than 1000ms has passed since last update\n    //     if (now - lastUpdateRef.current < 1000) {\n    //         return savedPlacesRef.current;\n    //     }\n    //     lastUpdateRef.current = now;\n    //     return savedPlacesRef.current;\n    // }, []);\n    // Expose getSavedPlaces to window with debouncing\n    // useEffect(() => {\n    //     if (typeof window !== 'undefined') {\n    //         window.getSavedPlaces = getSavedPlaces;\n    //     }\n    //     return () => {\n    //         if (typeof window !== 'undefined') {\n    //             delete window.getSavedPlaces;\n    //         }\n    //     };\n    // }, [getSavedPlaces]);\n    // // Update savedPlacesRef when places are added/removed\n    // const updateSavedPlaces = useCallback((places: Place[]) => {\n    //     savedPlacesRef.current = places;\n    //     lastUpdateRef.current = Date.now();\n    // }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"MapComponent: Received props:\", {\n            city,\n            apiKeyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length\n        });\n        if (!apiKey) {\n            console.error(\"MapComponent: Google Maps API key is missing\");\n            setError(\"Google Maps API key is missing\");\n            setIsLoading(false);\n            return;\n        }\n        if (!scriptLoaded || !mapRef.current) {\n            console.log(\"MapComponent: Waiting for script to load or map ref to be ready...\");\n            return;\n        }\n        console.log(\"MapComponent: Initializing map with city:\", city);\n        const initMap = async ()=>{\n            try {\n                // Import required libraries\n                const { Map: Map1 } = await window.google.maps.importLibrary(\"maps\");\n                const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({\n                    address: city\n                }, async (results, status)=>{\n                    var _results__geometry, _results_;\n                    console.log(\"Geocoding response:\", {\n                        status,\n                        resultsLength: results === null || results === void 0 ? void 0 : results.length\n                    });\n                    if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                        console.error(\"Geocoding failed:\", status);\n                        setError(\"Could not find location for \".concat(city));\n                        setIsLoading(false);\n                        return;\n                    }\n                    try {\n                        const location = results[0].geometry.location;\n                        const newMap = new Map1(mapRef.current, {\n                            center: location,\n                            zoom: 12,\n                            mapId: \"2d604af04a7c7fa8\"\n                        });\n                        setMap(newMap);\n                        const newInfoWindow = new google.maps.InfoWindow({\n                            maxWidth: 400\n                        });\n                        setInfoWindow(newInfoWindow);\n                        infoWindowRef.current = newInfoWindow;\n                        const createCityInfoWindowContent = async (city, location)=>{\n                            try {\n                                // Search for the city to get its details including photos\n                                const cityPlace = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.searchPlaceByText)(city, {\n                                    latitude: location.lat(),\n                                    longitude: location.lng()\n                                }, city);\n                                if (!cityPlace) return null;\n                                // Create a photo carousel HTML\n                                const photoCarousel = cityPlace.photos && cityPlace.photos.length > 0 ? '\\n                                            <div class=\"relative w-full\" style=\"height: 200px;\">\\n                                                <div class=\"carousel-container overflow-hidden w-full h-full\">\\n                                                    <div class=\"carousel-track flex transition-transform duration-500\" style=\"height: 100%;\">\\n                                                        '.concat(cityPlace.photos.slice(0, 5).map((photo, index)=>'\\n                                                            <div class=\"carousel-slide w-full h-full flex-none\">\\n                                                                <img src=\"https://places.googleapis.com/v1/'.concat(photo.name, \"/media?maxHeightPx=340&maxWidthPx=340&key=\").concat(apiKey, '\"\\n                                                                    alt=\"').concat(city, '\"\\n                                                                    class=\"w-full h-full object-cover\"\\n                                                                />\\n                                                            </div>\\n                                                        ')).join(\"\"), '\\n                                                    </div>\\n                                                </div>\\n                                                <button onclick=\"window.prevSlide()\" class=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\\n                                                    </svg>\\n                                                </button>\\n                                                <button onclick=\"window.nextSlide()\" class=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\\n                                                    </svg>\\n                                                </button>\\n                                                <div class=\"absolute bottom-2 left-0 right-0 flex justify-center gap-1\">\\n                                                    ').concat(cityPlace.photos.slice(0, 5).map((_, index)=>'\\n                                                        <button onclick=\"window.goToSlide('.concat(index, ')\" class=\"w-2 h-2 rounded-full bg-white/80 hover:bg-white shadow-sm carousel-dot\" data-index=\"').concat(index, '\">\\n                                                        </button>\\n                                                    ')).join(\"\"), \"\\n                                                </div>\\n                                            </div>\\n                                        \") : \"\";\n                                // Add carousel control functions to window\n                                if (cityPlace.photos && cityPlace.photos.length > 0) {\n                                    const numSlides = Math.min(cityPlace.photos.length, 5);\n                                    window.currentSlide = 0;\n                                    window.updateCarousel = ()=>{\n                                        const track = document.querySelector(\".carousel-track\");\n                                        if (track) {\n                                            track.style.transform = \"translateX(-\".concat(window.currentSlide * 100, \"%)\");\n                                            // Update dots\n                                            document.querySelectorAll(\".carousel-dot\").forEach((dot, index)=>{\n                                                if (index === window.currentSlide) {\n                                                    dot.classList.add(\"bg-white\");\n                                                    dot.classList.remove(\"bg-white/80\");\n                                                } else {\n                                                    dot.classList.remove(\"bg-white\");\n                                                    dot.classList.add(\"bg-white/80\");\n                                                }\n                                            });\n                                        }\n                                    };\n                                    window.nextSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide + 1) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.prevSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide - 1 + numSlides) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.goToSlide = (index)=>{\n                                        window.currentSlide = index;\n                                        window.updateCarousel();\n                                    };\n                                }\n                                return '\\n                                        <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 340px;\">\\n                                            '.concat(photoCarousel, '\\n                                            <div class=\"p-4\">\\n                                                <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">').concat(city, \"</h2>\\n                                                \").concat(cityPlace.formattedAddress ? '<p class=\"text-sm text-gray-500 mb-2\">'.concat(cityPlace.formattedAddress, \"</p>\") : \"\", \"\\n                                            </div>\\n                                        </div>\\n                                    \");\n                            } catch (error) {\n                                console.error(\"Error creating city info window:\", error);\n                                return null;\n                            }\n                        };\n                        // Create a marker for the city\n                        const cityMarker = new google.maps.marker.AdvancedMarkerElement({\n                            map: newMap,\n                            position: location,\n                            title: city\n                        });\n                        // Add click listener to the marker\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            if (infoWindow) {\n                                const content = createCityInfoWindowContent(city, location);\n                                if (content) {\n                                    infoWindow.setContent(await content);\n                                    infoWindow.open(newMap, cityMarker);\n                                }\n                            }\n                        });\n                        markers.set(city, cityMarker);\n                        // Add click listener for future interaction\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            const content = await createCityInfoWindowContent(city, location);\n                            if (content) {\n                                newInfoWindow.setContent(content);\n                                newInfoWindow.open({\n                                    anchor: cityMarker,\n                                    map: newMap\n                                });\n                            }\n                        });\n                    } catch (err) {\n                        console.error(\"Error setting up map:\", err);\n                        setError(\"Failed to initialize map\");\n                    }\n                });\n            } catch (err) {\n                console.error(\"Error initializing map:\", err);\n                setError(\"Failed to initialize map\");\n                setIsLoading(false);\n            }\n        };\n        initMap();\n    }, [\n        city,\n        scriptLoaded,\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            // Remove from global storage\n            _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.removePlace(placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    // Simply set the map to null to remove the marker\n                    marker.position = null;\n                    // Close info window if open\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    // Remove event listeners\n                    google.maps.event.clearInstanceListeners(marker);\n                    // Clean up references\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.removePlace(placeId);\n                    // Force update component state\n                    setMarkerCount((prev)=>prev - 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places));\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            // Notify components that places changed\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                var _data_place;\n                // Add this check at the start of the function\n                const markerId = (_data_place = data.place) === null || _data_place === void 0 ? void 0 : _data_place.id;\n                if (!markerId) {\n                    console.error(\"Debug - No place ID provided\");\n                    return;\n                }\n                // Add this check for duplicates\n                if (_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.hasPlace(markerId)) {\n                    console.log(\"Debug - Place already exists:\", markerId);\n                    return;\n                }\n                // Add to global storage first\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.addPlace(data.place);\n                    // Force a re-render when adding a marker\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places));\n                    console.log(\"Debug - Added place:\", _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places);\n                }\n                const [{ AdvancedMarkerElement }, { PinElement }] = await Promise.all([\n                    google.maps.importLibrary(\"marker\"),\n                    google.maps.importLibrary(\"marker\")\n                ]);\n                const pinElement = new google.maps.marker.PinElement({\n                    scale: 1\n                });\n                console.log(\"Debug - Creating marker with ID:\", markerId);\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                // Set the map property after creation\n                marker.map = map;\n                // Add click listener\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current) {\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.open(map, marker);\n                        }\n                    }\n                });\n                // Store the marker reference\n                // markersRef.current.set(markerId, marker);\n                // if (data.place) {\n                //     savedPlacesManager.addPlace(data.place);\n                //     // Force a re-render when adding a marker\n                //     setMarkerCount(prev => prev + 1);\n                //     setSavedPlaces(new Map(savedPlacesManager.places));\n                //     console.log('Debug - Added place:', savedPlacesManager.places);\n                // }\n                // console.log('Debug - Marker added successfully');\n                // Notify components that places changed\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        map,\n        infoWindow,\n        markerCount\n    ]);\n    // // Add a useEffect to monitor savedPlaces changes\n    // useEffect(() => {\n    //     console.log('Current saved places:', [...globalSavedPlaces.entries()]);\n    // }, [savedPlaces]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Load saved places from session storage on mount\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    // Notify components of initial load\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Save to session storage when places change\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                sessionStorage.setItem(\"travelPlannerSession\", JSON.stringify({\n                    ...parsed,\n                    savedPlaces: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.getPlaces()\n                }));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    const getPhotoUrl = (photo, index)=>{\n        var _photo_getURI;\n        return ((_photo_getURI = photo.getURI) === null || _photo_getURI === void 0 ? void 0 : _photo_getURI.call(photo)) || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                        <button \\n                            onclick=\\\"\\n                                (function() {\\n                                    console.log('Debug - Delete button clicked for markerId:', '\").concat(markerId, \"');\\n                                    if (window.removePlaceFromMap) {\\n                                        window.removePlaceFromMap('\").concat(markerId, '\\');\\n                                        // Close the info window after deletion\\n                                        if (window.currentInfoWindow) {\\n                                            window.currentInfoWindow.close();\\n                                        }\\n                                    }\\n                                })();\\n                            \"\\n                            class=\"p-1 hover:bg-red-50 rounded-full\"\\n                            aria-label=\"Remove place\"\\n                        >\\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\\n                                <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\\n                            </svg>\\n                        </button>\\n                    </div>\\n                    ').concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_script__WEBPACK_IMPORTED_MODULE_2___default()), {\n                src: \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker&v=beta&callback=Function.prototype\"),\n                strategy: \"afterInteractive\",\n                onLoad: ()=>{\n                    console.log(\"Google Maps script loaded\");\n                    setScriptLoaded(true);\n                },\n                onError: (e)=>{\n                    console.error(\"Failed to load Google Maps script:\", e);\n                    setError(\"Failed to load Google Maps\");\n                    setIsLoading(false);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 598,\n                columnNumber: 17\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 text-red-500 p-4 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 613,\n                columnNumber: 17\n            }, undefined),\n            isLoading && !error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-gray-600\",\n                    children: [\n                        \"Loading map...\",\n                        !apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: \"Waiting for API key...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                            lineNumber: 621,\n                            columnNumber: 37\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 619,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 618,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 625,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 596,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"y4nCoUeELttA2M9ZugFCKB6BF5k=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n"));

/***/ }),

/***/ "./managers/stage-manager.ts":
/*!***********************************!*\
  !*** ./managers/stage-manager.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STAGE_LIMITS: function() { return /* binding */ STAGE_LIMITS; },\n/* harmony export */   validateStageProgression: function() { return /* binding */ validateStageProgression; }\n/* harmony export */ });\n// Validation functions for each stage\nconst STAGE_LIMITS = {\n    3: {\n        maxPrompts: 5,\n        upgradeMessage: \"I'm sorry to tell you that you have reached the prompts limit in the free version. \\n    Would you like to upgrade to unlock unlimited places browsing and premium features? \\n    This will give you access to personalized recommendations, detailed scheduling, and local insights.\"\n    }\n};\nconst STAGE_VALIDATORS = {\n    // Stage 1: Initial Parameter Check\n    1: {\n        validate: (details)=>{\n            var _details_preferences;\n            const missingRequirements = [];\n            if (!details.destination) missingRequirements.push(\"destination\");\n            if (!details.startDate) missingRequirements.push(\"start date\");\n            if (!details.endDate) missingRequirements.push(\"end date\");\n            if (!((_details_preferences = details.preferences) === null || _details_preferences === void 0 ? void 0 : _details_preferences.length)) missingRequirements.push(\"preferences\");\n            if (!details.language) missingRequirements.push(\"language\");\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 2: City Introduction\n    2: {\n        validate: (details, metrics)=>{\n            return {\n                isValid: true,\n                missingRequirements: []\n            };\n        }\n    },\n    // Stage 3: Places Introduction\n    3: {\n        validate: (_, metrics)=>{\n            var _metrics_stagePrompts;\n            const stagePrompts = ((_metrics_stagePrompts = metrics.stagePrompts) === null || _metrics_stagePrompts === void 0 ? void 0 : _metrics_stagePrompts[3]) || 0;\n            const maxPrompts = STAGE_LIMITS[3].maxPrompts;\n            if (stagePrompts >= maxPrompts) {\n                return {\n                    isValid: true,\n                    missingRequirements: [\n                        \"Maximum places limit reached. Ready for upgrade.\"\n                    ],\n                    upgradeRequired: true\n                };\n            }\n            return {\n                isValid: false,\n                missingRequirements: [\n                    \"Continue adding places\"\n                ]\n            };\n        }\n    },\n    // Stage 4: Itinerary Review (with payment check)\n    4: {\n        validate: (_, metrics)=>{\n            const missingRequirements = [];\n            // Only allow progression if user has paid\n            if (!metrics.isPaid) {\n                missingRequirements.push(\"payment required\");\n            }\n            return {\n                isValid: metrics.isPaid,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 5: Final Confirmation (keeping it open as requested)\n    5: {\n        validate: (_, metrics)=>{\n            const missingRequirements = [];\n            // First validate Stage 1 parameters\n            const stage1Validator = STAGE_VALIDATORS[1];\n            const stage1Result = stage1Validator.validate(_, metrics);\n            if (!stage1Result.isValid) {\n                return stage1Result;\n            }\n            return {\n                isValid: true,\n                missingRequirements\n            };\n        }\n    }\n};\n// Main validation function to be used in the chat component\nfunction validateStageProgression(currentStage, nextStage, travelDetails, metrics) {\n    // Ensure stage progression is sequential\n    if (nextStage !== currentStage + 1) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage progression\"\n            ]\n        };\n    }\n    // Get validator for the current stage\n    const validator = STAGE_VALIDATORS[currentStage];\n    if (!validator) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage\"\n            ]\n        };\n    }\n    // Run validation\n    const { isValid, missingRequirements, upgradeRequired } = validator.validate(travelDetails, metrics);\n    return {\n        canProgress: isValid,\n        missingRequirements,\n        upgradeRequired\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/stage-manager.ts\n"));

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: function() { return /* binding */ BUDGET_DESCRIPTIONS; },\n/* harmony export */   BUDGET_OPTIONS: function() { return /* binding */ BUDGET_OPTIONS; },\n/* harmony export */   BudgetLevel: function() { return /* binding */ BudgetLevel; },\n/* harmony export */   CURRENCY_INFO: function() { return /* binding */ CURRENCY_INFO; },\n/* harmony export */   ComponentType: function() { return /* binding */ ComponentType; },\n/* harmony export */   DEFAULT_CURRENCIES: function() { return /* binding */ DEFAULT_CURRENCIES; },\n/* harmony export */   LANGUAGE_LABELS: function() { return /* binding */ LANGUAGE_LABELS; },\n/* harmony export */   LANGUAGE_OPTIONS: function() { return /* binding */ LANGUAGE_OPTIONS; },\n/* harmony export */   PREFERENCE_ICONS: function() { return /* binding */ PREFERENCE_ICONS; },\n/* harmony export */   PREFERENCE_OPTIONS: function() { return /* binding */ PREFERENCE_OPTIONS; },\n/* harmony export */   SupportedLanguage: function() { return /* binding */ SupportedLanguage; },\n/* harmony export */   TravelPreference: function() { return /* binding */ TravelPreference; }\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map((param)=>{\n    let [key, value] = param;\n    return {\n        value,\n        label: LANGUAGE_LABELS[value]\n    };\n});\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/types.ts\n"));

/***/ }),

/***/ "./utils/local-metrics.ts":
/*!********************************!*\
  !*** ./utils/local-metrics.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METRICS_STORAGE_KEY: function() { return /* binding */ METRICS_STORAGE_KEY; },\n/* harmony export */   checkInputLimits: function() { return /* binding */ checkInputLimits; },\n/* harmony export */   checkSession: function() { return /* binding */ checkSession; },\n/* harmony export */   clearPaymentReference: function() { return /* binding */ clearPaymentReference; },\n/* harmony export */   getPaymentReference: function() { return /* binding */ getPaymentReference; },\n/* harmony export */   getPaymentReferenceId: function() { return /* binding */ getPaymentReferenceId; },\n/* harmony export */   getPaymentStatus: function() { return /* binding */ getPaymentStatus; },\n/* harmony export */   getStoredMetrics: function() { return /* binding */ getStoredMetrics; },\n/* harmony export */   resetMetrics: function() { return /* binding */ resetMetrics; },\n/* harmony export */   setPaymentReference: function() { return /* binding */ setPaymentReference; },\n/* harmony export */   setPaymentReferenceId: function() { return /* binding */ setPaymentReferenceId; },\n/* harmony export */   setPaymentStatus: function() { return /* binding */ setPaymentStatus; },\n/* harmony export */   updateStoredMetrics: function() { return /* binding */ updateStoredMetrics; }\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"./managers/stage-manager.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n\n\nconst METRICS_STORAGE_KEY = \"travel_interaction_metrics\";\nconst SESSION_KEY = \"travel_session_id\";\nconst PAYMENT_REF_KEY = \"payment_reference_id\";\nconst MAX_TOTAL_INPUTS = 15;\nfunction getStoredMetrics() {\n    try {\n        // Check session validity first\n        if (!(0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.checkSessionValidity)()) {\n            return resetMetrics();\n        }\n        const storedMetrics = localStorage.getItem(METRICS_STORAGE_KEY);\n        if (!storedMetrics) {\n            return resetMetrics();\n        }\n        const metrics = JSON.parse(storedMetrics);\n        // Ensure all fields exist\n        metrics.totalPrompts = metrics.totalPrompts || 0;\n        metrics.savedPlacesCount = metrics.savedPlacesCount || 0;\n        metrics.isPaid = metrics.isPaid || false;\n        metrics.stagePrompts = metrics.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        metrics.paymentReference = metrics.paymentReference || \"\";\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving metrics:\", error);\n        return resetMetrics();\n    }\n}\nfunction updateStoredMetrics(currentStage) {\n    let incrementPrompt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n    try {\n        const metrics = getStoredMetrics();\n        if (incrementPrompt) {\n            // Only increment if explicitly requested and not already at limit\n            const { withinStageLimit } = checkInputLimits(currentStage);\n            if (withinStageLimit) {\n                metrics.totalPrompts += 1;\n                if (!metrics.stagePrompts) {\n                    metrics.stagePrompts = {};\n                }\n                metrics.stagePrompts[currentStage] = (metrics.stagePrompts[currentStage] || 0) + 1;\n            }\n        }\n        // Save to storage\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating metrics:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction checkInputLimits(currentStage) {\n    var _metrics_stagePrompts;\n    const metrics = getStoredMetrics();\n    const stagePrompts = ((_metrics_stagePrompts = metrics.stagePrompts) === null || _metrics_stagePrompts === void 0 ? void 0 : _metrics_stagePrompts[currentStage]) || 0;\n    const totalPrompts = metrics.totalPrompts || 0;\n    // Only apply stage limits to stage 3, all other stages should be unlimited\n    const result = {\n        withinStageLimit: currentStage === 3 ? stagePrompts < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n        withinTotalLimit: currentStage === 3 ? totalPrompts < MAX_TOTAL_INPUTS : true,\n        stageInputCount: stagePrompts,\n        totalInputCount: totalPrompts\n    };\n    // console.log(`[Metrics] Input limit check for stage ${currentStage}:`, result);\n    return result;\n}\nfunction resetMetrics() {\n    const metrics = {\n        totalPrompts: 0,\n        savedPlacesCount: 0,\n        isPaid: false,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0\n        },\n        paymentReference: \"session_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9))\n    };\n    localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n    (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.initializeSession)(); // Initialize a new session when metrics are reset\n    return metrics;\n}\nfunction checkSession() {\n    const currentSession = localStorage.getItem(SESSION_KEY);\n    if (!currentSession) {\n        const newSession = Date.now().toString();\n        localStorage.setItem(SESSION_KEY, newSession);\n        resetMetrics();\n        return false;\n    }\n    return true;\n}\nfunction setPaymentStatus(isPaid) {\n    try {\n        const metrics = getStoredMetrics();\n        metrics.isPaid = isPaid;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating payment status:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction getPaymentStatus() {\n    const metrics = getStoredMetrics();\n    return metrics.isPaid || false;\n}\nfunction setPaymentReferenceId(referenceId) {\n    try {\n        localStorage.setItem(PAYMENT_REF_KEY, referenceId);\n        console.log(\"[Metrics] Stored payment reference ID:\", referenceId);\n    } catch (error) {\n        console.error(\"[Metrics] Error storing payment reference ID:\", error);\n    }\n}\nfunction getPaymentReferenceId() {\n    try {\n        return localStorage.getItem(PAYMENT_REF_KEY);\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving payment reference ID:\", error);\n        return null;\n    }\n}\nfunction setPaymentReference(reference) {\n    try {\n        const metrics = getStoredMetrics();\n        metrics.paymentReference = reference;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        console.log(\"[Metrics] Payment reference set:\", reference);\n    } catch (error) {\n        console.error(\"[Metrics] Error setting payment reference:\", error);\n    }\n}\nfunction getPaymentReference() {\n    try {\n        const metrics = getStoredMetrics();\n        return metrics.paymentReference;\n    } catch (error) {\n        console.error(\"[Metrics] Error getting payment reference:\", error);\n        return undefined;\n    }\n}\nfunction clearPaymentReference() {\n    try {\n        const metrics = getStoredMetrics();\n        delete metrics.paymentReference;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        console.log(\"[Metrics] Payment reference cleared\");\n    } catch (error) {\n        console.error(\"[Metrics] Error clearing payment reference:\", error);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/local-metrics.ts\n"));

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: function() { return /* binding */ fetchPlaces; },\n/* harmony export */   filterUniquePlaces: function() { return /* binding */ filterUniquePlaces; },\n/* harmony export */   formatPrimaryType: function() { return /* binding */ formatPrimaryType; },\n/* harmony export */   getDisplayName: function() { return /* binding */ getDisplayName; },\n/* harmony export */   getPlaceTypesFromPreferences: function() { return /* binding */ getPlaceTypesFromPreferences; },\n/* harmony export */   metricsManager: function() { return /* binding */ metricsManager; },\n/* harmony export */   preferenceToPlaceTypes: function() { return /* binding */ preferenceToPlaceTypes; },\n/* harmony export */   savedPlacesManager: function() { return /* binding */ savedPlacesManager; },\n/* harmony export */   searchMultiplePlacesByText: function() { return /* binding */ searchMultiplePlacesByText; },\n/* harmony export */   searchPlaceByText: function() { return /* binding */ searchPlaceByText; }\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _local_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-metrics */ \"./utils/local-metrics.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            var _preferenceToPlaceTypes_pref;\n            const availableTypes = ((_preferenceToPlaceTypes_pref = preferenceToPlaceTypes[pref]) === null || _preferenceToPlaceTypes_pref === void 0 ? void 0 : _preferenceToPlaceTypes_pref.filter((type)=>!usedTypes.has(type))) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    var _place_displayName;\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from localStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"object\" !== \"undefined\") {\n            const savedPlaces = localStorage.getItem(STORAGE_KEY);\n            if (savedPlaces) {\n                try {\n                    console.log(\"[savedPlacesManager] Raw saved places:\", savedPlaces);\n                    const parsedPlaces = JSON.parse(savedPlaces);\n                    console.log(\"[savedPlacesManager] Parsed places:\", parsedPlaces);\n                    if (Array.isArray(parsedPlaces)) {\n                        // Clear existing places before loading\n                        places.clear();\n                        parsedPlaces.forEach((place)=>{\n                            var _place_photos, _place_photos1;\n                            console.log(\"[savedPlacesManager] Processing place:\", {\n                                id: place.id,\n                                hasPhotos: Boolean(place.photos),\n                                photoCount: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.length,\n                                firstPhoto: (_place_photos1 = place.photos) === null || _place_photos1 === void 0 ? void 0 : _place_photos1[0]\n                            });\n                            if (place === null || place === void 0 ? void 0 : place.id) {\n                                places.set(place.id, place);\n                            }\n                        });\n                    }\n                } catch (error) {\n                    console.error(\"[savedPlacesManager] Error loading places:\", error);\n                }\n            }\n            initialized = true;\n        }\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place === null || place === void 0 ? void 0 : place.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        _persist () {\n            if (true) {\n                const placesArray = Array.from(places.values());\n                localStorage.setItem(STORAGE_KEY, JSON.stringify(placesArray));\n                // Update metrics\n                const metrics = metricsManager.get();\n                metrics.savedPlacesCount = places.size;\n                metricsManager.update(metrics);\n            }\n        },\n        _notifyChange () {\n            if (true) {\n                window.savedPlaces = Array.from(places.values());\n                if (window.getSavedPlaces) {\n                    window.getSavedPlaces();\n                }\n            }\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (true) {\n    savedPlacesManager.places = new Map();\n}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? \"different \".concat(searchText, \" in \").concat(cityName) : \"\".concat(searchText, \" \").concat(cityName);\n    console.log(\"[searchWithStrategy] Using \".concat(useAlternateSearch ? \"alternate\" : \"original\", \" search:\"), query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        var _data_places, _data_places__displayName;\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!((_data_places = data.places) === null || _data_places === void 0 ? void 0 : _data_places[0])) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: ((_data_places__displayName = data.places[0].displayName) === null || _data_places__displayName === void 0 ? void 0 : _data_places__displayName.text) || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        var _result_places;\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!(result === null || result === void 0 ? void 0 : (_result_places = result.places) === null || _result_places === void 0 ? void 0 : _result_places[0])) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (false) {}\n    const metrics = (0,_local_metrics__WEBPACK_IMPORTED_MODULE_1__.getStoredMetrics)();\n    // Always ensure savedPlacesCount matches actual saved places\n    metrics.savedPlacesCount = savedPlacesManager.places.size;\n    return metrics;\n}\n// Update metrics in storage\nfunction updateMetrics(metrics) {\n    if (false) {}\n    try {\n        localStorage.setItem(_local_metrics__WEBPACK_IMPORTED_MODULE_1__.METRICS_STORAGE_KEY, JSON.stringify(metrics));\n    } catch (error) {\n        console.error(\"[updateMetrics] Error:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    var _place_photos, _place_displayName;\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async function(searchText, location) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>{\n            var _place_displayName, _place_photos;\n            return {\n                id: place.id,\n                displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    }))) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            };\n        });\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async function(latitude, longitude, preferences) {\n    let maxResults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5, placeTypes = arguments.length > 4 ? arguments[4] : void 0;\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!(preferences === null || preferences === void 0 ? void 0 : preferences.length),\n            fromPlaceTypes: !!(placeTypes === null || placeTypes === void 0 ? void 0 : placeTypes.length)\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>{\n                        var _place_displayName, _place_photos;\n                        return {\n                            id: place.id,\n                            displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                }))) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        };\n                    });\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFDdkJDLFlBQVlkLFNBQVNjLFVBQVU7Z0JBQy9CNUYsT0FBT3NIO1lBQ1g7UUFDSixFQUFFLE9BQU90SCxPQUFPO1lBQ1pDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1FBQzdDO1FBRUEsc0RBQXNEO1FBQ3REQyxRQUFRZ0MsR0FBRyxDQUFDO1FBQ1osTUFBTTRGLGNBQWNILGlCQUFpQkYsVUFBVyxDQUFDLEVBQUUsR0FBRzdJLFdBQVksQ0FBQyxFQUFFO1FBQ3JFLE9BQU8sTUFBTXdJLDJCQUEyQlUsYUFBYTtZQUFFdkM7WUFBVUM7UUFBVSxHQUFHNkI7SUFFbEYsRUFBRSxPQUFPcEgsT0FBTztRQUNaQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxPQUFPLEVBQUU7SUFDYjtBQUNKLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvcGxhY2VzLXV0aWxzLnRzPzU1NWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGxhY2UgcmVsYXRlZCBpbnRlcmZhY2VzXG5leHBvcnQgaW50ZXJmYWNlIFBsYWNlIHtcbiAgICBuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgaWQ6IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZToge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGxhbmd1YWdlQ29kZTogc3RyaW5nO1xuICAgIH0gfCBzdHJpbmc7XG4gICAgZm9ybWF0dGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBsb2NhdGlvbj86IHtcbiAgICAgICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgfTtcbiAgICBwcmltYXJ5VHlwZTogc3RyaW5nO1xuICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU/OiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwaG90b3M6IHsgXG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgd2lkdGhQeD86IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0UHg/OiBudW1iZXI7XG4gICAgICAgIGF1dGhvckF0dHJpYnV0aW9ucz86IEFycmF5PHtcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICAgICAgICAgICAgdXJpPzogc3RyaW5nO1xuICAgICAgICAgICAgcGhvdG9Vcmk/OiBzdHJpbmc7XG4gICAgICAgIH0+O1xuICAgIH1bXTtcbn1cblxuaW50ZXJmYWNlIEdvb2dsZVBsYWNlUmVzcG9uc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZT86IHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBsYW5ndWFnZUNvZGU6IHN0cmluZztcbiAgICB9O1xuICAgIGZvcm1hdHRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYXRpb24/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIH07XG4gICAgcHJpbWFyeVR5cGU/OiBzdHJpbmc7XG4gICAgcHJpbWFyeVR5cGVEaXNwbGF5TmFtZT86IHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBsYW5ndWFnZUNvZGU6IHN0cmluZztcbiAgICB9O1xuICAgIHBob3Rvcz86IEFycmF5PHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB3aWR0aFB4PzogbnVtYmVyO1xuICAgICAgICBoZWlnaHRQeD86IG51bWJlcjtcbiAgICAgICAgYXV0aG9yQXR0cmlidXRpb25zPzogQXJyYXk8e1xuICAgICAgICAgICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gICAgICAgICAgICB1cmk/OiBzdHJpbmc7XG4gICAgICAgICAgICBwaG90b1VyaT86IHN0cmluZztcbiAgICAgICAgfT47XG4gICAgfT47XG59XG5cbmltcG9ydCB7IFRyYXZlbFByZWZlcmVuY2UgfSBmcm9tICcuLi9tYW5hZ2Vycy90eXBlcyc7XG5pbXBvcnQgeyBVc2VySW50ZXJhY3Rpb25NZXRyaWNzIH0gZnJvbSAnLi4vbWFuYWdlcnMvc3RhZ2UtbWFuYWdlcic7XG5pbXBvcnQgeyBNRVRSSUNTX1NUT1JBR0VfS0VZLCBnZXRTdG9yZWRNZXRyaWNzIH0gZnJvbSAnLi9sb2NhbC1tZXRyaWNzJztcblxuLy8gVXBkYXRlZCBwcmVmZXJlbmNlIHRvIHBsYWNlIHR5cGVzIG1hcHBpbmcgYmFzZWQgb24gdHJhdmVsLXJpenouaHRtbFxuZXhwb3J0IGNvbnN0IHByZWZlcmVuY2VUb1BsYWNlVHlwZXM6IFJlY29yZDxUcmF2ZWxQcmVmZXJlbmNlLCBzdHJpbmdbXT4gPSB7XG4gICAgW1RyYXZlbFByZWZlcmVuY2UuQ3VsdHVyZV06IFtcbiAgICAgICAgJ211c2V1bScsXG4gICAgICAgICdjdWx0dXJhbF9jZW50ZXInLFxuICAgICAgICAnY3VsdHVyYWxfbGFuZG1hcmsnLFxuICAgICAgICAnaGlzdG9yaWNhbF9sYW5kbWFyaycsXG4gICAgICAgICdtb251bWVudCcsXG4gICAgICAgICdhcnRfZ2FsbGVyeScsXG4gICAgICAgICdoaXN0b3JpY2FsX3BsYWNlJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuTmF0dXJlXTogW1xuICAgICAgICAnbmF0aW9uYWxfcGFyaycsXG4gICAgICAgICdzdGF0ZV9wYXJrJyxcbiAgICAgICAgJ2JvdGFuaWNhbF9nYXJkZW4nLFxuICAgICAgICAnd2lsZGxpZmVfcGFyaycsXG4gICAgICAgICdnYXJkZW4nLFxuICAgICAgICAnaGlraW5nX2FyZWEnLFxuICAgICAgICAnd2lsZGxpZmVfcmVmdWdlJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuRm9vZF06IFtcbiAgICAgICAgJ3Jlc3RhdXJhbnQnLFxuICAgICAgICAnZmluZV9kaW5pbmdfcmVzdGF1cmFudCcsXG4gICAgICAgICdjYWZlJyxcbiAgICAgICAgJ2Zvb2RfY291cnQnLFxuICAgICAgICAnYmFrZXJ5JyxcbiAgICAgICAgJ2Rlc3NlcnRfc2hvcCcsXG4gICAgICAgICdiYXJfYW5kX2dyaWxsJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuUmVsYXhhdGlvbl06IFtcbiAgICAgICAgJ3NwYScsXG4gICAgICAgICd3ZWxsbmVzc19jZW50ZXInLFxuICAgICAgICAnc2hvcHBpbmdfbWFsbCcsXG4gICAgICAgICdiZWFjaCcsXG4gICAgICAgICdnYXJkZW4nLFxuICAgICAgICAncGxhemEnLFxuICAgICAgICAneW9nYV9zdHVkaW8nXG4gICAgXSxcbiAgICBbVHJhdmVsUHJlZmVyZW5jZS5BZHZlbnR1cmVdOiBbXG4gICAgICAgICdhZHZlbnR1cmVfc3BvcnRzX2NlbnRlcicsXG4gICAgICAgICdhbXVzZW1lbnRfcGFyaycsXG4gICAgICAgICdoaWtpbmdfYXJlYScsXG4gICAgICAgICdzcG9ydHNfY29tcGxleCcsXG4gICAgICAgICd3YXRlcl9wYXJrJyxcbiAgICAgICAgJ29mZl9yb2FkaW5nX2FyZWEnLFxuICAgICAgICAnc3BvcnRzX2FjdGl2aXR5X2xvY2F0aW9uJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuU2hvcHBpbmddOiBbIC8vIEFydHMgJiBNdXNldW1cbiAgICAgICAgJ2FydF9nYWxsZXJ5JyxcbiAgICAgICAgJ2FydF9zdHVkaW8nLFxuICAgICAgICAncGVyZm9ybWluZ19hcnRzX3RoZWF0ZXInLFxuICAgICAgICAnYXVkaXRvcml1bScsXG4gICAgICAgICdjb25jZXJ0X2hhbGwnLFxuICAgICAgICAnbXVzZXVtJyxcbiAgICAgICAgJ29wZXJhX2hvdXNlJ1xuICAgIF1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgcGxhY2UgdHlwZXMgYmFzZWQgb24gcHJlZmVyZW5jZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGFjZVR5cGVzRnJvbVByZWZlcmVuY2VzKHByZWZlcmVuY2VzOiBUcmF2ZWxQcmVmZXJlbmNlW10pOiBzdHJpbmdbXSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVHJhY2sgdXNlZCB0eXBlcyB0byBhdm9pZCByZXBlYXRzXG4gICAgICAgIGNvbnN0IHVzZWRUeXBlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICBjb25zdCByZXN1bHRUeXBlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc3MgZWFjaCBwcmVmZXJlbmNlXG4gICAgICAgIHByZWZlcmVuY2VzLmZvckVhY2gocHJlZiA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVUeXBlcyA9IHByZWZlcmVuY2VUb1BsYWNlVHlwZXNbcHJlZl0/LmZpbHRlcihcbiAgICAgICAgICAgICAgICB0eXBlID0+ICF1c2VkVHlwZXMuaGFzKHR5cGUpXG4gICAgICAgICAgICApIHx8IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUYWtlIDItMyByYW5kb20gdHlwZXMgZnJvbSBlYWNoIHByZWZlcmVuY2VcbiAgICAgICAgICAgIGNvbnN0IG51bVR5cGVzID0gTWF0aC5taW4oTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgKyAyLCBhdmFpbGFibGVUeXBlcy5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUeXBlcyA9IGF2YWlsYWJsZVR5cGVzXG4gICAgICAgICAgICAgICAgLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSlcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgbnVtVHlwZXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHRvIHJlc3VsdHMgYW5kIG1hcmsgYXMgdXNlZFxuICAgICAgICAgICAgc2VsZWN0ZWRUeXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdFR5cGVzLnB1c2godHlwZSk7XG4gICAgICAgICAgICAgICAgdXNlZFR5cGVzLmFkZCh0eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0VHlwZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBwbGFjZSB0eXBlcyBmcm9tIHByZWZlcmVuY2VzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFsndG91cmlzdF9hdHRyYWN0aW9uJ107IC8vIERlZmF1bHQgZmFsbGJhY2tcbiAgICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgcHJpbWFyeSB0eXBlXG5leHBvcnQgY29uc3QgZm9ybWF0UHJpbWFyeVR5cGUgPSAodHlwZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gdHlwZS5zcGxpdCgnXycpXG4gICAgICAgIC5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSlcbiAgICAgICAgLmpvaW4oJyAnKTtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZGlzcGxheSBuYW1lIGZvciBwbGFjZSB0eXBlXG5leHBvcnQgY29uc3QgZ2V0RGlzcGxheU5hbWUgPSAocGxhY2U6IFBsYWNlKTogc3RyaW5nID0+IHtcbiAgICBpZiAodHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcGxhY2UuZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIHJldHVybiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCB8fCBwbGFjZS5uYW1lIHx8ICcnO1xufTtcblxuLy8gRnVuY3Rpb24gdG8gZmlsdGVyIG91dCBkdXBsaWNhdGUgcGxhY2VzXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVW5pcXVlUGxhY2VzKHBsYWNlczogUGxhY2VbXSk6IFBsYWNlW10ge1xuICAgIGlmICghcGxhY2VzIHx8ICFBcnJheS5pc0FycmF5KHBsYWNlcykpIHJldHVybiBbXTtcblxuICAgIC8vIEdldCBzYXZlZCBwbGFjZXMgZnJvbSBnbG9iYWwgc3RhdGUgaWYgYXZhaWxhYmxlXG4gICAgY29uc3Qgc2F2ZWRQbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG5cbiAgICBjb25zdCBzYXZlZFBsYWNlSWRzID0gbmV3IFNldChzYXZlZFBsYWNlcy5tYXAocGxhY2UgPT4gcGxhY2UuaWQpKTtcbiAgICBjb25zdCBzYXZlZFBsYWNlTmFtZXMgPSBuZXcgU2V0KHNhdmVkUGxhY2VzLm1hcChwbGFjZSA9PiBcbiAgICAgICAgdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyBcbiAgICAgICAgICAgID8gcGxhY2UuZGlzcGxheU5hbWUudG9Mb3dlckNhc2UoKSBcbiAgICAgICAgICAgIDogcGxhY2UuZGlzcGxheU5hbWUudGV4dC50b0xvd2VyQ2FzZSgpXG4gICAgKSk7XG5cbiAgICAgLy8gRmlsdGVyIG91dCBwbGFjZXMgdGhhdDpcbiAgICAvLyAxLiBIYXZlIHNhbWUgSUQgYXMgc2F2ZWQgcGxhY2VcbiAgICAvLyAyLiBIYXZlIHNhbWUgbmFtZSBhcyBzYXZlZCBwbGFjZVxuICAgIHJldHVybiBwbGFjZXMuZmlsdGVyKHBsYWNlID0+IHtcbiAgICAgICAgaWYgKCFwbGFjZS5pZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc2F2ZWRQbGFjZUlkcy5oYXMocGxhY2UuaWQpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwbGFjZU5hbWUgPSB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnIFxuICAgICAgICAgICAgPyBwbGFjZS5kaXNwbGF5TmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICA6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoc2F2ZWRQbGFjZU5hbWVzLmhhcyhwbGFjZU5hbWUpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cblxuLy8gQWRkIFNhdmVkUGxhY2VzTWFuYWdlciBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgU2F2ZWRQbGFjZXNNYW5hZ2VyIHtcbiAgICBwbGFjZXM6IE1hcDxzdHJpbmcsIFBsYWNlPjtcbiAgICBhZGRQbGFjZTogKHBsYWNlOiBQbGFjZSkgPT4gdm9pZDtcbiAgICByZW1vdmVQbGFjZTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgZ2V0UGxhY2VzOiAoKSA9PiBQbGFjZVtdO1xuICAgIGhhc1BsYWNlOiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICBfcGVyc2lzdDogKCkgPT4gdm9pZDtcbiAgICBfbm90aWZ5Q2hhbmdlOiAoKSA9PiB2b2lkO1xuICAgIHNlcmlhbGl6ZTogKCkgPT4gc3RyaW5nO1xufVxuXG5jb25zdCBTVE9SQUdFX0tFWSA9ICdzYXZlZF9wbGFjZXMnO1xuXG4vLyBTYXZlZFBsYWNlc01hbmFnZXIgc2luZ2xldG9uXG5jb25zdCBjcmVhdGVTYXZlZFBsYWNlc01hbmFnZXIgPSAoKTogU2F2ZWRQbGFjZXNNYW5hZ2VyID0+IHtcbiAgICBjb25zdCBwbGFjZXMgPSBuZXcgTWFwPHN0cmluZywgUGxhY2U+KCk7XG4gICAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAvLyBMb2FkIHBsYWNlcyBmcm9tIGxvY2FsU3RvcmFnZVxuICAgIGNvbnN0IGxvYWRGcm9tU3RvcmFnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFpbml0aWFsaXplZCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZWRQbGFjZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSk7XG4gICAgICAgICAgICBpZiAoc2F2ZWRQbGFjZXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW3NhdmVkUGxhY2VzTWFuYWdlcl0gUmF3IHNhdmVkIHBsYWNlczonLCBzYXZlZFBsYWNlcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFBsYWNlcyA9IEpTT04ucGFyc2Uoc2F2ZWRQbGFjZXMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW3NhdmVkUGxhY2VzTWFuYWdlcl0gUGFyc2VkIHBsYWNlczonLCBwYXJzZWRQbGFjZXMpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGxhY2VzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgZXhpc3RpbmcgcGxhY2VzIGJlZm9yZSBsb2FkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkUGxhY2VzLmZvckVhY2gocGxhY2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc2F2ZWRQbGFjZXNNYW5hZ2VyXSBQcm9jZXNzaW5nIHBsYWNlOicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNQaG90b3M6IEJvb2xlYW4ocGxhY2UucGhvdG9zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9Db3VudDogcGxhY2UucGhvdG9zPy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0UGhvdG86IHBsYWNlLnBob3Rvcz8uWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlPy5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZXMuc2V0KHBsYWNlLmlkLCBwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbc2F2ZWRQbGFjZXNNYW5hZ2VyXSBFcnJvciBsb2FkaW5nIHBsYWNlczonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBsYWNlcyxcbiAgICAgICAgYWRkUGxhY2UocGxhY2U6IFBsYWNlKSB7XG4gICAgICAgICAgICBsb2FkRnJvbVN0b3JhZ2UoKTsgLy8gRW5zdXJlIHBsYWNlcyBhcmUgbG9hZGVkXG4gICAgICAgICAgICBpZiAocGxhY2U/LmlkKSB7XG4gICAgICAgICAgICAgICAgcGxhY2VzLnNldChwbGFjZS5pZCwgcGxhY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnlDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlUGxhY2UoaWQ6IHN0cmluZykge1xuICAgICAgICAgICAgbG9hZEZyb21TdG9yYWdlKCk7IC8vIEVuc3VyZSBwbGFjZXMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgcGxhY2VzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICB0aGlzLl9wZXJzaXN0KCk7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlDaGFuZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UGxhY2VzKCk6IFBsYWNlW10ge1xuICAgICAgICAgICAgbG9hZEZyb21TdG9yYWdlKCk7IC8vIEVuc3VyZSBwbGFjZXMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ocGxhY2VzLnZhbHVlcygpKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzUGxhY2UoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgbG9hZEZyb21TdG9yYWdlKCk7IC8vIEVuc3VyZSBwbGFjZXMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgcmV0dXJuIHBsYWNlcy5oYXMoaWQpO1xuICAgICAgICB9LFxuICAgICAgICBfcGVyc2lzdCgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlc0FycmF5ID0gQXJyYXkuZnJvbShwbGFjZXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShwbGFjZXNBcnJheSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBtZXRyaWNzXG4gICAgICAgICAgICAgICAgY29uc3QgbWV0cmljcyA9IG1ldHJpY3NNYW5hZ2VyLmdldCgpO1xuICAgICAgICAgICAgICAgIG1ldHJpY3Muc2F2ZWRQbGFjZXNDb3VudCA9IHBsYWNlcy5zaXplO1xuICAgICAgICAgICAgICAgIG1ldHJpY3NNYW5hZ2VyLnVwZGF0ZShtZXRyaWNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25vdGlmeUNoYW5nZSgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zYXZlZFBsYWNlcyA9IEFycmF5LmZyb20ocGxhY2VzLnZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmdldFNhdmVkUGxhY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5nZXRTYXZlZFBsYWNlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWFsaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20ocGxhY2VzLnZhbHVlcygpKSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVkUGxhY2VzTWFuYWdlciA9IGNyZWF0ZVNhdmVkUGxhY2VzTWFuYWdlcigpO1xuXG4vLyBJbml0aWFsaXplIG9uIGNsaWVudCBzaWRlXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzID0gbmV3IE1hcDxzdHJpbmcsIFBsYWNlPigpO1xufVxuXG4vLyBEZWNsYXJlIHdpbmRvdyBpbnRlcmZhY2UgZm9yIHNhdmVkIHBsYWNlc1xuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBzYXZlZFBsYWNlczogUGxhY2VbXTtcbiAgICAgICAgYWRkUGxhY2VUb01hcD86IChwbGFjZToge1xuICAgICAgICAgICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICAgICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgICAgICAgICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgICAgICAgICBwbGFjZT86IFBsYWNlO1xuICAgICAgICB9KSA9PiB2b2lkO1xuICAgICAgICBnZXRTYXZlZFBsYWNlcz86ICgpID0+IFBsYWNlW107XG4gICAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gaGFuZGxlIGRpZmZlcmVudCBzZWFyY2ggc3RyYXRlZ2llc1xuYXN5bmMgZnVuY3Rpb24gc2VhcmNoV2l0aFN0cmF0ZWd5KFxuICAgIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICAgIGNpdHlOYW1lOiBzdHJpbmcsXG4gICAgdXNlQWx0ZXJuYXRlU2VhcmNoOiBib29sZWFuXG4pOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvb2dsZSBNYXBzIEFQSSBrZXkgaXMgbWlzc2luZycpO1xuICAgIH1cblxuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLUdvb2ctQXBpLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVksXG4gICAgICAgICdYLUdvb2ctRmllbGRNYXNrJzogJ3BsYWNlcy5pZCxwbGFjZXMuZGlzcGxheU5hbWUscGxhY2VzLmZvcm1hdHRlZEFkZHJlc3MscGxhY2VzLmxvY2F0aW9uLHBsYWNlcy5wcmltYXJ5VHlwZSxwbGFjZXMucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSxwbGFjZXMucGhvdG9zLm5hbWUscGxhY2VzLnBob3Rvcy53aWR0aFB4LHBsYWNlcy5waG90b3MuaGVpZ2h0UHgnXG4gICAgfSBhcyBjb25zdDtcblxuICAgIC8vIENob29zZSBxdWVyeSBiYXNlZCBvbiB3aGV0aGVyIHdlJ3JlIGRvaW5nIGFsdGVybmF0ZSBzZWFyY2hcbiAgICBjb25zdCBxdWVyeSA9IHVzZUFsdGVybmF0ZVNlYXJjaCBcbiAgICAgICAgPyBgZGlmZmVyZW50ICR7c2VhcmNoVGV4dH0gaW4gJHtjaXR5TmFtZX1gXG4gICAgICAgIDogYCR7c2VhcmNoVGV4dH0gJHtjaXR5TmFtZX1gO1xuXG4gICAgY29uc29sZS5sb2coYFtzZWFyY2hXaXRoU3RyYXRlZ3ldIFVzaW5nICR7dXNlQWx0ZXJuYXRlU2VhcmNoID8gJ2FsdGVybmF0ZScgOiAnb3JpZ2luYWwnfSBzZWFyY2g6YCwgcXVlcnkpO1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyeVNlYXJjaChxdWVyeSwgaGVhZGVycywgbG9jYXRpb24pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeVNlYXJjaChcbiAgICBxdWVyeTogc3RyaW5nLFxuICAgIGhlYWRlcnM6IGFueSxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9XG4pOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxL3BsYWNlczpzZWFyY2hUZXh0Jywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHRleHRRdWVyeTogcXVlcnksXG4gICAgICAgICAgICAgICAgbG9jYXRpb25CaWFzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9jYXRpb24ubG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMDAwMC4wXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1heFJlc3VsdENvdW50OiAxXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbdHJ5U2VhcmNoXSBTZWFyY2ggZmFpbGVkOicsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgaWYgKCFkYXRhLnBsYWNlcz8uWzBdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3RyeVNlYXJjaF0gTm8gcGxhY2VzIGZvdW5kIGZvciBxdWVyeTonLCBxdWVyeSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbdHJ5U2VhcmNoXSBGb3VuZCBuZXcgcGxhY2U6Jywge1xuICAgICAgICAgICAgaWQ6IGRhdGEucGxhY2VzWzBdLmlkLFxuICAgICAgICAgICAgbmFtZTogZGF0YS5wbGFjZXNbMF0uZGlzcGxheU5hbWU/LnRleHQgfHwgZGF0YS5wbGFjZXNbMF0ubmFtZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4geyBwbGFjZXM6IFtkYXRhLnBsYWNlc1swXV0gfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbdHJ5U2VhcmNoXSBFcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFBsYWNlQnlUZXh0KFxuICAgIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICAgIGRlc3RpbmF0aW9uOiBzdHJpbmdcbik6IFByb21pc2U8UGxhY2UgfCBudWxsPiB7XG4gICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gU3RhcnRpbmcgc2VhcmNoIHdpdGg6Jywge1xuICAgICAgICBzZWFyY2hUZXh0LFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVzdGluYXRpb25cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNpdHlOYW1lID0gZGVzdGluYXRpb247XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlYXJjaFdpdGhTdHJhdGVneShzZWFyY2hUZXh0LCBsb2NhdGlvbiwgY2l0eU5hbWUsIGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghcmVzdWx0Py5wbGFjZXM/LlswXSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwbGFjZSA9IHRyYW5zZm9ybVBsYWNlUmVzcG9uc2UocmVzdWx0LnBsYWNlc1swXSk7XG4gICAgICAgIGlmICghcGxhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgcGxhY2UgaXMgYWxyZWFkeSBzYXZlZCB1c2luZyBzYXZlZFBsYWNlc01hbmFnZXJcbiAgICAgICAgY29uc3QgaXNBbHJlYWR5U2F2ZWQgPSBzYXZlZFBsYWNlc01hbmFnZXIuaGFzUGxhY2UocGxhY2UuaWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFpc0FscmVhZHlTYXZlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gQWRkaW5nIG5ldyBwbGFjZTonLCB7XG4gICAgICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGdldERpc3BsYXlOYW1lKHBsYWNlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzYXZlZFBsYWNlc01hbmFnZXIuYWRkUGxhY2UocGxhY2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgbWV0cmljc1xuICAgICAgICAgICAgY29uc3QgbWV0cmljcyA9IG1ldHJpY3NNYW5hZ2VyLmdldCgpO1xuICAgICAgICAgICAgbWV0cmljcy5zYXZlZFBsYWNlc0NvdW50ID0gc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy5zaXplO1xuICAgICAgICAgICAgbWV0cmljc01hbmFnZXIudXBkYXRlKG1ldHJpY3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gRm91bmQgcGxhY2U6Jywge1xuICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgbmFtZTogZ2V0RGlzcGxheU5hbWUocGxhY2UpLFxuICAgICAgICAgICAgaXNBbHJlYWR5U2F2ZWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHBsYWNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gRXJyb3Igc2VhcmNoaW5nIGZvciBwbGFjZTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gSW5pdGlhbGl6ZSBtZXRyaWNzIGluIHN0b3JhZ2VcbmZ1bmN0aW9uIGluaXRpYWxpemVNZXRyaWNzKCk6IFVzZXJJbnRlcmFjdGlvbk1ldHJpY3Mge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWxQcm9tcHRzOiAwLFxuICAgICAgICAgICAgc2F2ZWRQbGFjZXNDb3VudDogMCxcbiAgICAgICAgICAgIGlzUGFpZDogZmFsc2UsXG4gICAgICAgICAgICBzdGFnZVByb21wdHM6IHt9LFxuICAgICAgICAgICAgcGF5bWVudFJlZmVyZW5jZTogJycgIC8vIEVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mIG51bGwgdG8gbWF0Y2ggdHlwZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG1ldHJpY3MgPSBnZXRTdG9yZWRNZXRyaWNzKCk7XG4gICAgLy8gQWx3YXlzIGVuc3VyZSBzYXZlZFBsYWNlc0NvdW50IG1hdGNoZXMgYWN0dWFsIHNhdmVkIHBsYWNlc1xuICAgIG1ldHJpY3Muc2F2ZWRQbGFjZXNDb3VudCA9IHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMuc2l6ZTtcbiAgICByZXR1cm4gbWV0cmljcztcbn1cblxuLy8gVXBkYXRlIG1ldHJpY3MgaW4gc3RvcmFnZVxuZnVuY3Rpb24gdXBkYXRlTWV0cmljcyhtZXRyaWNzOiBVc2VySW50ZXJhY3Rpb25NZXRyaWNzKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oTUVUUklDU19TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkobWV0cmljcykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t1cGRhdGVNZXRyaWNzXSBFcnJvcjonLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyBFeHBvcnQgdGhlIG1ldHJpY3MgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgbWV0cmljc01hbmFnZXIgPSB7XG4gICAgZ2V0OiBpbml0aWFsaXplTWV0cmljcyxcbiAgICB1cGRhdGU6IHVwZGF0ZU1ldHJpY3Ncbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gR29vZ2xlIFBsYWNlcyBBUEkgcmVzcG9uc2UgdG8gb3VyIFBsYWNlIHR5cGVcbmZ1bmN0aW9uIHRyYW5zZm9ybVBsYWNlUmVzcG9uc2UocGxhY2U6IEdvb2dsZVBsYWNlUmVzcG9uc2UpOiBQbGFjZSB8IG51bGwge1xuICAgIGlmICghcGxhY2UpIHJldHVybiBudWxsO1xuXG4gICAgY29uc29sZS5sb2coJ1t0cmFuc2Zvcm1QbGFjZVJlc3BvbnNlXSBJbnB1dCBwbGFjZTonLCB7XG4gICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgcGhvdG9zOiBwbGFjZS5waG90b3M/Lm1hcChwID0+ICh7IG5hbWU6IHAubmFtZSB9KSksXG4gICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWVcbiAgICB9KTtcblxuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgXG4gICAgICAgID8geyB0ZXh0OiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LCBsYW5ndWFnZUNvZGU6IHBsYWNlLmRpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nIH1cbiAgICAgICAgOiBwbGFjZS5uYW1lIHx8ICcnO1xuXG4gICAgLy8gRW5zdXJlIHBob3RvcyBhcnJheSBpcyBwcm9wZXJseSBmb3JtYXR0ZWRcbiAgICBjb25zdCBwaG90b3MgPSAocGxhY2UucGhvdG9zIHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChwaG90byk6IHBob3RvIGlzIE5vbk51bGxhYmxlPHR5cGVvZiBwaG90bz4gPT4gXG4gICAgICAgICAgICBCb29sZWFuKHBob3RvICYmIHBob3RvLm5hbWUpXG4gICAgICAgIClcbiAgICAgICAgLm1hcChwaG90byA9PiAoe1xuICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZSxcbiAgICAgICAgICAgIHdpZHRoUHg6IHBob3RvLndpZHRoUHgsXG4gICAgICAgICAgICBoZWlnaHRQeDogcGhvdG8uaGVpZ2h0UHgsXG4gICAgICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM6IHBob3RvLmF1dGhvckF0dHJpYnV0aW9uc1xuICAgICAgICB9KSk7XG5cbiAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHtcbiAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICBuYW1lOiBwbGFjZS5uYW1lLFxuICAgICAgICBkaXNwbGF5TmFtZSxcbiAgICAgICAgcHJpbWFyeVR5cGU6IHBsYWNlLnByaW1hcnlUeXBlIHx8ICdwbGFjZScsXG4gICAgICAgIHBob3RvcyxcbiAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcGxhY2UuZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgbG9jYXRpb246IHBsYWNlLmxvY2F0aW9uLFxuICAgICAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lIFxuICAgICAgICAgICAgPyB7IHRleHQ6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUudGV4dCwgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdbdHJhbnNmb3JtUGxhY2VSZXNwb25zZV0gVHJhbnNmb3JtZWQgcGxhY2U6Jywge1xuICAgICAgICBpZDogdHJhbnNmb3JtZWQuaWQsXG4gICAgICAgIHBob3RvczogdHJhbnNmb3JtZWQucGhvdG9zLm1hcChwID0+ICh7IG5hbWU6IHAubmFtZSB9KSksXG4gICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHRyYW5zZm9ybWVkLnByaW1hcnlUeXBlRGlzcGxheU5hbWVcbiAgICB9KTtcblxuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbn1cblxuZXhwb3J0IGNvbnN0IHNlYXJjaE11bHRpcGxlUGxhY2VzQnlUZXh0ID0gYXN5bmMgKFxuICAgIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICAgIG1heFJlc3VsdHM6IG51bWJlciA9IDVcbik6IFByb21pc2U8UGxhY2VbXT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignR29vZ2xlIE1hcHMgQVBJIGtleSBpcyBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIHNlYXJjaE11bHRpcGxlUGxhY2VzQnlUZXh0IHdpdGggcGFyYW1zOicsIHtcbiAgICAgICAgICAgIHNlYXJjaFRleHQsXG4gICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgIG1heFJlc3VsdHNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XG4gICAgICAgICAgICB0ZXh0UXVlcnk6IHNlYXJjaFRleHQsXG4gICAgICAgICAgICBsb2NhdGlvbkJpYXM6IHtcbiAgICAgICAgICAgICAgICBjaXJjbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIwMDAwLjAgLy8gMjBrbSByYWRpdXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4UmVzdWx0Q291bnQ6IG1heFJlc3VsdHNcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdYLUdvb2ctQXBpLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVksXG4gICAgICAgICAgICAnWC1Hb29nLUZpZWxkTWFzayc6ICdwbGFjZXMuaWQscGxhY2VzLmRpc3BsYXlOYW1lLHBsYWNlcy5mb3JtYXR0ZWRBZGRyZXNzLHBsYWNlcy5sb2NhdGlvbixwbGFjZXMucHJpbWFyeVR5cGUscGxhY2VzLnByaW1hcnlUeXBlRGlzcGxheU5hbWUscGxhY2VzLnBob3Rvcy5uYW1lLHBsYWNlcy5waG90b3Mud2lkdGhQeCxwbGFjZXMucGhvdG9zLmhlaWdodFB4J1xuICAgICAgICB9IGFzIGNvbnN0O1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxL3BsYWNlczpzZWFyY2hUZXh0Jywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZWFyY2ggcGxhY2VzOicsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvckRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZGF0YS5wbGFjZXMgfHwgIUFycmF5LmlzQXJyYXkoZGF0YS5wbGFjZXMpIHx8IGRhdGEucGxhY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIHBsYWNlcyBmb3VuZCBmb3IgdGV4dCBzZWFyY2g6Jywgc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YS5wbGFjZXMubWFwKChwbGFjZTogYW55KSA9PiAoe1xuICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHBsYWNlLmRpc3BsYXlOYW1lPy50ZXh0ID8ge1xuICAgICAgICAgICAgICAgIHRleHQ6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5kaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJ1xuICAgICAgICAgICAgfSA6IHBsYWNlLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgcHJpbWFyeVR5cGU6IHBsYWNlLnByaW1hcnlUeXBlIHx8ICdwbGFjZScsXG4gICAgICAgICAgICBwaG90b3M6IHBsYWNlLnBob3Rvcz8ubWFwKChwaG90bzogYW55KSA9PiAoeyBcbiAgICAgICAgICAgICAgICBuYW1lOiBwaG90by5uYW1lLFxuICAgICAgICAgICAgICAgIHdpZHRoUHg6IHBob3RvLndpZHRoUHgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0UHg6IHBob3RvLmhlaWdodFB4XG4gICAgICAgICAgICB9KSkgfHwgW10sXG4gICAgICAgICAgICBmb3JtYXR0ZWRBZGRyZXNzOiBwbGFjZS5mb3JtYXR0ZWRBZGRyZXNzLFxuICAgICAgICAgICAgbG9jYXRpb246IHBsYWNlLmxvY2F0aW9uLFxuICAgICAgICAgICAgcHJpbWFyeVR5cGVEaXNwbGF5TmFtZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSA/IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLnRleHQsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmcgZm9yIHBsYWNlczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuXG4vLyBGZXRjaCBwbGFjZXMgZnJvbSBHb29nbGUgUGxhY2VzIEFQSVxuZXhwb3J0IGNvbnN0IGZldGNoUGxhY2VzID0gYXN5bmMgKFxuICAgIGxhdGl0dWRlOiBudW1iZXIsXG4gICAgbG9uZ2l0dWRlOiBudW1iZXIsXG4gICAgcHJlZmVyZW5jZXM/OiBUcmF2ZWxQcmVmZXJlbmNlW10sXG4gICAgbWF4UmVzdWx0czogbnVtYmVyID0gNSxcbiAgICBwbGFjZVR5cGVzPzogc3RyaW5nW11cbik6IFByb21pc2U8UGxhY2VbXT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignR29vZ2xlIE1hcHMgQVBJIGtleSBpcyBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcm9tUHJlZmVyZW5jZXMgPSAhIXByZWZlcmVuY2VzICYmIHByZWZlcmVuY2VzLmxlbmd0aCA+IDA7XG4gICAgICAgIGNvbnN0IGZyb21QbGFjZVR5cGVzID0gISFwbGFjZVR5cGVzICYmIHBsYWNlVHlwZXMubGVuZ3RoID4gMDtcbiAgICAgICAgXG4gICAgICAgIGlmICghZnJvbVByZWZlcmVuY2VzICYmICFmcm9tUGxhY2VUeXBlcykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gcHJlZmVyZW5jZXMgb3IgcGxhY2UgdHlwZXMgcHJvdmlkZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZSBwcmVmZXJlbmNlcyBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIHVzZSBwbGFjZVR5cGVzLCBvdGhlcndpc2UgdXNlIGRlZmF1bHRzXG4gICAgICAgIGxldCBpbmNsdWRlZFR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAoZnJvbVByZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICBpbmNsdWRlZFR5cGVzID0gZ2V0UGxhY2VUeXBlc0Zyb21QcmVmZXJlbmNlcyhwcmVmZXJlbmNlcyEpO1xuICAgICAgICB9IGVsc2UgaWYgKGZyb21QbGFjZVR5cGVzKSB7XG4gICAgICAgICAgICBpbmNsdWRlZFR5cGVzID0gcGxhY2VUeXBlcyE7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIGZldGNocGxhY2VzIHdpdGggcGFyYW1zOicsIHtcbiAgICAgICAgICAgIGxhdGl0dWRlLFxuICAgICAgICAgICAgbG9uZ2l0dWRlLFxuICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyxcbiAgICAgICAgICAgIG1heFJlc3VsdHMsXG4gICAgICAgICAgICBmcm9tUHJlZmVyZW5jZXM6ICEhcHJlZmVyZW5jZXM/Lmxlbmd0aCxcbiAgICAgICAgICAgIGZyb21QbGFjZVR5cGVzOiAhIXBsYWNlVHlwZXM/Lmxlbmd0aFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGaXJzdCB0cnkgbmVhcmJ5IHNlYXJjaFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyxcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRDb3VudDogbWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvblJlc3RyaWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMDAwMC4wIC8vIDIwa20gcmFkaXVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ1gtR29vZy1BcGktS2V5JzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSxcbiAgICAgICAgICAgICAgICAnWC1Hb29nLUZpZWxkTWFzayc6ICdwbGFjZXMuaWQscGxhY2VzLmRpc3BsYXlOYW1lLHBsYWNlcy5mb3JtYXR0ZWRBZGRyZXNzLHBsYWNlcy5sb2NhdGlvbixwbGFjZXMucHJpbWFyeVR5cGUscGxhY2VzLnByaW1hcnlUeXBlRGlzcGxheU5hbWUscGxhY2VzLnBob3Rvcy5uYW1lLHBsYWNlcy5waG90b3Mud2lkdGhQeCxwbGFjZXMucGhvdG9zLmhlaWdodFB4J1xuICAgICAgICAgICAgfSBhcyBjb25zdDtcblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9wbGFjZXMuZ29vZ2xlYXBpcy5jb20vdjEvcGxhY2VzOnNlYXJjaE5lYXJieScsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEucGxhY2VzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5wbGFjZXMpICYmIGRhdGEucGxhY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEucGxhY2VzLm1hcCgocGxhY2U6IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UuZGlzcGxheU5hbWUubGFuZ3VhZ2VDb2RlIHx8ICdlbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBwbGFjZS5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSB8fCAncGxhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9zOiBwbGFjZS5waG90b3M/Lm1hcCgocGhvdG86IGFueSkgPT4gKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFB4OiBwaG90by53aWR0aFB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFB4OiBwaG90by5oZWlnaHRQeFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcGxhY2UuZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBwbGFjZS5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggcGxhY2VzOicsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvckRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gbmVhcmJ5IHNlYXJjaDonLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBuZWFyYnkgc2VhcmNoIGZhaWxzLCB0cnkgdGV4dCBzZWFyY2ggYXMgZmFsbGJhY2tcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhbGxpbmcgYmFjayB0byB0ZXh0IHNlYXJjaC4uLicpO1xuICAgICAgICBjb25zdCBzZWFyY2hRdWVyeSA9IGZyb21QbGFjZVR5cGVzID8gcGxhY2VUeXBlcyFbMF0gOiBwcmVmZXJlbmNlcyFbMF07XG4gICAgICAgIHJldHVybiBhd2FpdCBzZWFyY2hNdWx0aXBsZVBsYWNlc0J5VGV4dChzZWFyY2hRdWVyeSwgeyBsYXRpdHVkZSwgbG9uZ2l0dWRlIH0sIG1heFJlc3VsdHMpO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcGxhY2VzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn07Il0sIm5hbWVzIjpbIlRyYXZlbFByZWZlcmVuY2UiLCJNRVRSSUNTX1NUT1JBR0VfS0VZIiwiZ2V0U3RvcmVkTWV0cmljcyIsInByZWZlcmVuY2VUb1BsYWNlVHlwZXMiLCJDdWx0dXJlIiwiTmF0dXJlIiwiRm9vZCIsIlJlbGF4YXRpb24iLCJBZHZlbnR1cmUiLCJTaG9wcGluZyIsImdldFBsYWNlVHlwZXNGcm9tUHJlZmVyZW5jZXMiLCJwcmVmZXJlbmNlcyIsInVzZWRUeXBlcyIsIlNldCIsInJlc3VsdFR5cGVzIiwiZm9yRWFjaCIsInByZWYiLCJhdmFpbGFibGVUeXBlcyIsImZpbHRlciIsInR5cGUiLCJoYXMiLCJudW1UeXBlcyIsIk1hdGgiLCJtaW4iLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInNlbGVjdGVkVHlwZXMiLCJzb3J0Iiwic2xpY2UiLCJwdXNoIiwiYWRkIiwiZXJyb3IiLCJjb25zb2xlIiwiZm9ybWF0UHJpbWFyeVR5cGUiLCJzcGxpdCIsIm1hcCIsIndvcmQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImpvaW4iLCJnZXREaXNwbGF5TmFtZSIsInBsYWNlIiwiZGlzcGxheU5hbWUiLCJ0ZXh0IiwibmFtZSIsImZpbHRlclVuaXF1ZVBsYWNlcyIsInBsYWNlcyIsIkFycmF5IiwiaXNBcnJheSIsInNhdmVkUGxhY2VzIiwic2F2ZWRQbGFjZXNNYW5hZ2VyIiwiZ2V0UGxhY2VzIiwic2F2ZWRQbGFjZUlkcyIsImlkIiwic2F2ZWRQbGFjZU5hbWVzIiwidG9Mb3dlckNhc2UiLCJwbGFjZU5hbWUiLCJTVE9SQUdFX0tFWSIsImNyZWF0ZVNhdmVkUGxhY2VzTWFuYWdlciIsIk1hcCIsImluaXRpYWxpemVkIiwibG9hZEZyb21TdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImxvZyIsInBhcnNlZFBsYWNlcyIsIkpTT04iLCJwYXJzZSIsImNsZWFyIiwiaGFzUGhvdG9zIiwiQm9vbGVhbiIsInBob3RvcyIsInBob3RvQ291bnQiLCJmaXJzdFBob3RvIiwic2V0IiwiYWRkUGxhY2UiLCJfcGVyc2lzdCIsIl9ub3RpZnlDaGFuZ2UiLCJyZW1vdmVQbGFjZSIsImRlbGV0ZSIsImZyb20iLCJ2YWx1ZXMiLCJoYXNQbGFjZSIsInBsYWNlc0FycmF5Iiwic2V0SXRlbSIsInN0cmluZ2lmeSIsIm1ldHJpY3MiLCJtZXRyaWNzTWFuYWdlciIsImdldCIsInNhdmVkUGxhY2VzQ291bnQiLCJzaXplIiwidXBkYXRlIiwid2luZG93IiwiZ2V0U2F2ZWRQbGFjZXMiLCJzZXJpYWxpemUiLCJzZWFyY2hXaXRoU3RyYXRlZ3kiLCJzZWFyY2hUZXh0IiwibG9jYXRpb24iLCJjaXR5TmFtZSIsInVzZUFsdGVybmF0ZVNlYXJjaCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19HT09HTEVfTUFQU19BUElfS0VZIiwiRXJyb3IiLCJoZWFkZXJzIiwicXVlcnkiLCJyZXN1bHQiLCJ0cnlTZWFyY2giLCJkYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJ0ZXh0UXVlcnkiLCJsb2NhdGlvbkJpYXMiLCJjaXJjbGUiLCJjZW50ZXIiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJhZGl1cyIsIm1heFJlc3VsdENvdW50Iiwib2siLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsInNlYXJjaFBsYWNlQnlUZXh0IiwiZGVzdGluYXRpb24iLCJ0cmFuc2Zvcm1QbGFjZVJlc3BvbnNlIiwiaXNBbHJlYWR5U2F2ZWQiLCJpbml0aWFsaXplTWV0cmljcyIsInRvdGFsUHJvbXB0cyIsImlzUGFpZCIsInN0YWdlUHJvbXB0cyIsInBheW1lbnRSZWZlcmVuY2UiLCJ1cGRhdGVNZXRyaWNzIiwicCIsInByaW1hcnlUeXBlRGlzcGxheU5hbWUiLCJsYW5ndWFnZUNvZGUiLCJwaG90byIsIndpZHRoUHgiLCJoZWlnaHRQeCIsImF1dGhvckF0dHJpYnV0aW9ucyIsInRyYW5zZm9ybWVkIiwicHJpbWFyeVR5cGUiLCJmb3JtYXR0ZWRBZGRyZXNzIiwidW5kZWZpbmVkIiwic2VhcmNoTXVsdGlwbGVQbGFjZXNCeVRleHQiLCJtYXhSZXN1bHRzIiwicmVxdWVzdEJvZHkiLCJlcnJvckRhdGEiLCJmZXRjaFBsYWNlcyIsInBsYWNlVHlwZXMiLCJmcm9tUHJlZmVyZW5jZXMiLCJmcm9tUGxhY2VUeXBlcyIsImluY2x1ZGVkVHlwZXMiLCJsb2NhdGlvblJlc3RyaWN0aW9uIiwic2VhcmNoUXVlcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n"));

/***/ }),

/***/ "./utils/session-manager.ts":
/*!**********************************!*\
  !*** ./utils/session-manager.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSessionValidity: function() { return /* binding */ checkSessionValidity; },\n/* harmony export */   checkSessionWithWarning: function() { return /* binding */ checkSessionWithWarning; },\n/* harmony export */   clearSession: function() { return /* binding */ clearSession; },\n/* harmony export */   getStoredMetricsWithSession: function() { return /* binding */ getStoredMetricsWithSession; },\n/* harmony export */   handleSessionExpiry: function() { return /* binding */ handleSessionExpiry; },\n/* harmony export */   initializeSession: function() { return /* binding */ initializeSession; },\n/* harmony export */   updateLastActive: function() { return /* binding */ updateLastActive; }\n/* harmony export */ });\nconst SESSION_CONFIG = {\n    INACTIVITY_TIMEOUT: 2 * 60 * 60 * 1000,\n    ABSOLUTE_TIMEOUT: 24 * 60 * 60 * 1000,\n    WARNING_BEFORE_TIMEOUT: 5 * 60 * 1000,\n    STORAGE_KEYS: {\n        SESSION: \"travel_session\",\n        METRICS: \"travel_interaction_metrics\"\n    }\n};\nfunction initializeSession() {\n    const now = Date.now();\n    const session = {\n        sessionId: generateSessionId(),\n        startTime: now,\n        lastActive: now,\n        expiresAt: now + SESSION_CONFIG.ABSOLUTE_TIMEOUT\n    };\n    localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n    return session;\n}\n// Add warning mechanism\nfunction checkSessionWithWarning() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return {\n        isValid: false,\n        shouldWarn: false\n    };\n    try {\n        const session = JSON.parse(sessionData);\n        const now = Date.now();\n        const timeUntilInactivity = session.lastActive + SESSION_CONFIG.INACTIVITY_TIMEOUT - now;\n        // Check if we should show warning\n        if (timeUntilInactivity > 0 && timeUntilInactivity <= SESSION_CONFIG.WARNING_BEFORE_TIMEOUT) {\n            return {\n                isValid: true,\n                shouldWarn: true\n            };\n        }\n        // Regular validity check\n        if (now >= session.expiresAt || now - session.lastActive >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            return {\n                isValid: false,\n                shouldWarn: false\n            };\n        }\n        return {\n            isValid: true,\n            shouldWarn: false\n        };\n    } catch (error) {\n        console.error(\"[SessionManager] Error checking session:\", error);\n        return {\n            isValid: false,\n            shouldWarn: false\n        };\n    }\n}\nfunction checkSessionValidity() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return false;\n    try {\n        const session = JSON.parse(sessionData);\n        const now = Date.now();\n        // Check absolute timeout\n        if (now >= session.expiresAt) {\n            clearSession();\n            return false;\n        }\n        // Check inactivity timeout\n        if (now - session.lastActive >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            clearSession();\n            return false;\n        }\n        // Update last active timestamp\n        session.lastActive = now;\n        localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n        return true;\n    } catch (error) {\n        console.error(\"[SessionManager] Error parsing session:\", error);\n        clearSession();\n        return false;\n    }\n}\n// ession expiry handler\nfunction handleSessionExpiry() {\n    var _window_getSavedPlaces, _window;\n    // Save current state if needed\n    const currentState = {\n        messages: ((_window_getSavedPlaces = (_window = window).getSavedPlaces) === null || _window_getSavedPlaces === void 0 ? void 0 : _window_getSavedPlaces.call(_window)) || [],\n        lastUrl: window.location.pathname\n    };\n    localStorage.setItem(\"expiredSessionState\", JSON.stringify(currentState));\n    // Clear session\n    clearSession();\n    // Redirect to landing page with return path\n    window.location.href = \"/?return=\".concat(encodeURIComponent(currentState.lastUrl));\n}\nfunction clearSession() {\n    localStorage.removeItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    localStorage.removeItem(SESSION_CONFIG.STORAGE_KEYS.METRICS);\n}\nfunction updateLastActive() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return;\n    try {\n        const session = JSON.parse(sessionData);\n        session.lastActive = Date.now();\n        localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n    } catch (error) {\n        console.error(\"[SessionManager] Error updating last active:\", error);\n    }\n}\nfunction generateSessionId() {\n    return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n}\n// Hook this into metrics management\nfunction getStoredMetricsWithSession() {\n    if (!checkSessionValidity()) {\n        clearSession();\n        return null;\n    }\n    const metricsData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.METRICS);\n    if (!metricsData) return null;\n    try {\n        return JSON.parse(metricsData);\n    } catch (error) {\n        console.error(\"[SessionManager] Error parsing metrics:\", error);\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/session-manager.ts\n"));

/***/ }),

/***/ "./node_modules/next/script.js":
/*!*************************************!*\
  !*** ./node_modules/next/script.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/script */ \"./node_modules/next/dist/client/script.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9zY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkdBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L3NjcmlwdC5qcz9lNGJhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9zY3JpcHQnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/script.js\n"));

/***/ })

}]);