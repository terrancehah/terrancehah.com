"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: function() { return /* binding */ fetchPlaces; },\n/* harmony export */   filterUniquePlaces: function() { return /* binding */ filterUniquePlaces; },\n/* harmony export */   formatPrimaryType: function() { return /* binding */ formatPrimaryType; },\n/* harmony export */   getDisplayName: function() { return /* binding */ getDisplayName; },\n/* harmony export */   getPlaceTypesFromPreferences: function() { return /* binding */ getPlaceTypesFromPreferences; },\n/* harmony export */   preferenceToPlaceTypes: function() { return /* binding */ preferenceToPlaceTypes; },\n/* harmony export */   savedPlacesManager: function() { return /* binding */ savedPlacesManager; },\n/* harmony export */   searchMultiplePlacesByText: function() { return /* binding */ searchMultiplePlacesByText; },\n/* harmony export */   searchPlaceByText: function() { return /* binding */ searchPlaceByText; },\n/* harmony export */   searchWithStrategy: function() { return /* binding */ searchWithStrategy; }\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n// Place related interfaces\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            var _preferenceToPlaceTypes_pref;\n            const availableTypes = ((_preferenceToPlaceTypes_pref = preferenceToPlaceTypes[pref]) === null || _preferenceToPlaceTypes_pref === void 0 ? void 0 : _preferenceToPlaceTypes_pref.filter((type)=>!usedTypes.has(type))) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    var _place_displayName;\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// Initialize from localStorage if available\nfunction initializePlaces() {\n    if (false) {}\n    try {\n        const savedPlaces = localStorage.getItem(STORAGE_KEY);\n        console.log(\"[SavedPlacesManager] Loading from storage:\", savedPlaces);\n        if (savedPlaces) {\n            const parsedPlaces = JSON.parse(savedPlaces);\n            console.log(\"[SavedPlacesManager] Parsed places:\", parsedPlaces);\n            // Handle array format\n            const places = new Map();\n            if (Array.isArray(parsedPlaces)) {\n                parsedPlaces.forEach((place)=>{\n                    if (place === null || place === void 0 ? void 0 : place.id) {\n                        places.set(place.id, place);\n                    }\n                });\n            }\n            console.log(\"[SavedPlacesManager] Initialized with places:\", Array.from(places.values()));\n            return places;\n        }\n    } catch (error) {\n        console.error(\"[SavedPlacesManager] Error loading from storage:\", error);\n    }\n    console.log(\"[SavedPlacesManager] No saved places found, returning empty map\");\n    return new Map();\n}\n// Create the singleton manager\nconst savedPlacesManager = {\n    places: initializePlaces(),\n    addPlace (place) {\n        if (!this.hasPlace(place.id)) {\n            console.log(\"[SavedPlacesManager] Adding place:\", place.id);\n            this.places.set(place.id, place);\n            this._persist();\n            this._notifyChange();\n        }\n    },\n    removePlace (id) {\n        if (this.hasPlace(id)) {\n            console.log(\"[SavedPlacesManager] Removing place:\", id);\n            this.places.delete(id);\n            this._persist();\n            this._notifyChange();\n        }\n    },\n    getPlaces () {\n        return Array.from(this.places.values());\n    },\n    hasPlace (id) {\n        return this.places.has(id);\n    },\n    _persist () {\n        try {\n            const placesArray = Array.from(this.places.values());\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(placesArray));\n            // Update metrics in localStorage\n            const metrics = JSON.parse(localStorage.getItem(\"travel_interaction_metrics\") || \"{}\");\n            metrics.savedPlacesCount = placesArray.length;\n            localStorage.setItem(\"travel_interaction_metrics\", JSON.stringify(metrics));\n            console.log(\"[SavedPlacesManager] Persisted places and metrics:\", {\n                placesCount: placesArray.length,\n                metrics\n            });\n        } catch (error) {\n            console.error(\"[SavedPlacesManager] Error persisting places:\", error);\n        }\n    },\n    _notifyChange () {\n        if (true) {\n            const places = this.getPlaces();\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places,\n                    count: places.length\n                }\n            }));\n        }\n    }\n};\n// Initialize window interface for backward compatibility\nif (true) {\n    try {\n        const places = savedPlacesManager.getPlaces();\n        console.log(\"[SavedPlacesManager] Initializing window interface:\", places);\n        window.savedPlaces = places;\n        window.getSavedPlaces = ()=>savedPlacesManager.getPlaces();\n    } catch (error) {\n        console.error(\"[SavedPlacesManager] Error initializing window interface:\", error);\n    }\n}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName) {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n    };\n    // Extract place type from search text (e.g., \"park\", \"museum\", etc.)\n    const typeMatch = searchText.match(/(\\w+)\\s*$/i);\n    const placeType = typeMatch ? typeMatch[1].toLowerCase() : searchText.toLowerCase();\n    // Build search queries based on place type\n    const buildQueries = (type)=>{\n        const baseQueries = [\n            \"\".concat(type, \" in \").concat(cityName),\n            \"\".concat(type, \" near \").concat(cityName),\n            \"popular \".concat(type, \" in \").concat(cityName),\n            \"best \".concat(type, \" in \").concat(cityName),\n            \"top \".concat(type, \" in \").concat(cityName)\n        ];\n    };\n    // Get queries for this place type\n    const queries = buildQueries(placeType);\n    // Try each query in sequence\n    for (const query of queries){\n        console.log(\"[searchWithStrategy] Trying query:\", query);\n        const place = await trySearch(query, headers, location);\n        if (place) {\n            console.log(\"[searchWithStrategy] Found place with query:\", query);\n            return place;\n        }\n    }\n    console.log(\"[searchWithStrategy] No places found with any query strategy\");\n    return null;\n}\n// Helper function to try a single search query\nasync function trySearch(query, headers, location) {\n    try {\n        var _data_places;\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                }\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!((_data_places = data.places) === null || _data_places === void 0 ? void 0 : _data_places.length)) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        // Try each place until we find one that isn't saved\n        for (const place of data.places){\n            var _place_displayName;\n            if (!savedPlacesManager.hasPlace(place.id)) {\n                var _place_displayName1;\n                console.log(\"[trySearch] Found new place:\", {\n                    id: place.id,\n                    name: ((_place_displayName1 = place.displayName) === null || _place_displayName1 === void 0 ? void 0 : _place_displayName1.text) || place.name,\n                    query\n                });\n                return place;\n            }\n            console.log(\"[trySearch] Place already saved, skipping:\", ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name);\n        }\n        return null;\n    } catch (error) {\n        console.error(\"[trySearch] Error in search:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    let excludeIds = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination,\n        excludeIds,\n        currentSavedPlaces: Array.from(savedPlacesManager.places.values())\n    });\n    try {\n        // Try multiple search strategies\n        const strategies = [\n            \"\".concat(searchText, \" in \").concat(destination),\n            \"\".concat(searchText, \" near \").concat(destination),\n            searchText\n        ];\n        // Keep track of tried places to avoid duplicates\n        const triedPlaces = new Set([\n            ...excludeIds,\n            ...Array.from(savedPlacesManager.places.keys())\n        ]);\n        for (const strategy of strategies){\n            console.log(\"[searchPlaceByText] Trying strategy:\", strategy);\n            const place = await searchWithStrategy(strategy, location, destination);\n            if (!(place === null || place === void 0 ? void 0 : place.id)) {\n                console.log(\"[searchPlaceByText] No place found for strategy:\", strategy);\n                continue;\n            }\n            // Skip if we've already tried this place\n            if (triedPlaces.has(place.id)) {\n                console.log(\"[searchPlaceByText] Place already tried:\", place.id);\n                continue;\n            }\n            // Add to tried places to prevent duplicates\n            triedPlaces.add(place.id);\n            // Transform the response\n            const transformedPlace = transformPlaceResponse(place);\n            if (!transformedPlace) {\n                console.log(\"[searchPlaceByText] Failed to transform place\");\n                continue;\n            }\n            console.log(\"[searchPlaceByText] Found unique place:\", {\n                id: transformedPlace.id,\n                name: transformedPlace.displayName,\n                strategy\n            });\n            return transformedPlace;\n        }\n        console.log(\"[searchPlaceByText] No unique place found after trying all strategies\");\n        return null;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error:\", error);\n        return null;\n    }\n}\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    var _place_displayName, _place_photos;\n    if (!place) return null;\n    const displayName = ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    return {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                name: photo.name,\n                widthPx: photo.widthPx,\n                heightPx: photo.heightPx,\n                authorAttributions: photo.authorAttributions\n            }))) || [],\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n}\nconst searchMultiplePlacesByText = async function(searchText, location) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>{\n            var _place_displayName, _place_photos;\n            return {\n                id: place.id,\n                displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                        name: photo.name\n                    }))) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            };\n        });\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async function(latitude, longitude, preferences) {\n    let maxResults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5, placeTypes = arguments.length > 4 ? arguments[4] : void 0;\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!(preferences === null || preferences === void 0 ? void 0 : preferences.length),\n            fromPlaceTypes: !!(placeTypes === null || placeTypes === void 0 ? void 0 : placeTypes.length)\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>{\n                        var _place_displayName, _place_photos;\n                        return {\n                            id: place.id,\n                            displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                                    name: photo.name\n                                }))) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        };\n                    });\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTJCQTtRQUM3QztRQUVBLHNEQUFzRDtRQUN0REMsUUFBUTJCLEdBQUcsQ0FBQztRQUNaLE1BQU0yRixjQUFjSCxpQkFBaUJGLFVBQVcsQ0FBQyxFQUFFLEdBQUd2SSxXQUFZLENBQUMsRUFBRTtRQUNyRSxPQUFPLE1BQU1pSSwyQkFBMkJXLGFBQWE7WUFBRXRDO1lBQVVDO1FBQVUsR0FBRzJCO0lBRWxGLEVBQUUsT0FBTzdHLE9BQU87UUFDWkMsUUFBUUQsS0FBSyxDQUFDLDBCQUEwQkE7UUFDeEMsT0FBTyxFQUFFO0lBQ2I7QUFDSixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3V0aWxzL3BsYWNlcy11dGlscy50cz81NTVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBsYWNlIHJlbGF0ZWQgaW50ZXJmYWNlc1xuZXhwb3J0IGludGVyZmFjZSBQbGFjZSB7XG4gICAgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZGlzcGxheU5hbWU6IHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBsYW5ndWFnZUNvZGU6IHN0cmluZztcbiAgICB9IHwgc3RyaW5nO1xuICAgIGZvcm1hdHRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYXRpb24/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIH07XG4gICAgcHJpbWFyeVR5cGU6IHN0cmluZztcbiAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lPzoge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGxhbmd1YWdlQ29kZTogc3RyaW5nO1xuICAgIH07XG4gICAgcGhvdG9zPzogeyBcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB3aWR0aFB4PzogbnVtYmVyO1xuICAgICAgICBoZWlnaHRQeD86IG51bWJlcjtcbiAgICAgICAgYXV0aG9yQXR0cmlidXRpb25zPzogQXJyYXk8e1xuICAgICAgICAgICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gICAgICAgICAgICB1cmk/OiBzdHJpbmc7XG4gICAgICAgICAgICBwaG90b1VyaT86IHN0cmluZztcbiAgICAgICAgfT47XG4gICAgfVtdO1xufVxuXG5pbnRlcmZhY2UgR29vZ2xlUGxhY2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIGRpc3BsYXlOYW1lPzoge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGxhbmd1YWdlQ29kZTogc3RyaW5nO1xuICAgIH07XG4gICAgZm9ybWF0dGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBsb2NhdGlvbj86IHtcbiAgICAgICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgfTtcbiAgICBwcmltYXJ5VHlwZT86IHN0cmluZztcbiAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lPzoge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGxhbmd1YWdlQ29kZTogc3RyaW5nO1xuICAgIH07XG4gICAgcGhvdG9zPzogQXJyYXk8e1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHdpZHRoUHg/OiBudW1iZXI7XG4gICAgICAgIGhlaWdodFB4PzogbnVtYmVyO1xuICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM/OiBBcnJheTx7XG4gICAgICAgICAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAgICAgICAgIHVyaT86IHN0cmluZztcbiAgICAgICAgICAgIHBob3RvVXJpPzogc3RyaW5nO1xuICAgICAgICB9PjtcbiAgICB9Pjtcbn1cblxuaW1wb3J0IHsgVHJhdmVsUHJlZmVyZW5jZSB9IGZyb20gJy4uL21hbmFnZXJzL3R5cGVzJztcblxuLy8gVXBkYXRlZCBwcmVmZXJlbmNlIHRvIHBsYWNlIHR5cGVzIG1hcHBpbmcgYmFzZWQgb24gdHJhdmVsLXJpenouaHRtbFxuZXhwb3J0IGNvbnN0IHByZWZlcmVuY2VUb1BsYWNlVHlwZXM6IFJlY29yZDxUcmF2ZWxQcmVmZXJlbmNlLCBzdHJpbmdbXT4gPSB7XG4gICAgW1RyYXZlbFByZWZlcmVuY2UuQ3VsdHVyZV06IFtcbiAgICAgICAgJ211c2V1bScsXG4gICAgICAgICdjdWx0dXJhbF9jZW50ZXInLFxuICAgICAgICAnY3VsdHVyYWxfbGFuZG1hcmsnLFxuICAgICAgICAnaGlzdG9yaWNhbF9sYW5kbWFyaycsXG4gICAgICAgICdtb251bWVudCcsXG4gICAgICAgICdhcnRfZ2FsbGVyeScsXG4gICAgICAgICdoaXN0b3JpY2FsX3BsYWNlJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuTmF0dXJlXTogW1xuICAgICAgICAnbmF0aW9uYWxfcGFyaycsXG4gICAgICAgICdzdGF0ZV9wYXJrJyxcbiAgICAgICAgJ2JvdGFuaWNhbF9nYXJkZW4nLFxuICAgICAgICAnd2lsZGxpZmVfcGFyaycsXG4gICAgICAgICdnYXJkZW4nLFxuICAgICAgICAnaGlraW5nX2FyZWEnLFxuICAgICAgICAnd2lsZGxpZmVfcmVmdWdlJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuRm9vZF06IFtcbiAgICAgICAgJ3Jlc3RhdXJhbnQnLFxuICAgICAgICAnZmluZV9kaW5pbmdfcmVzdGF1cmFudCcsXG4gICAgICAgICdjYWZlJyxcbiAgICAgICAgJ2Zvb2RfY291cnQnLFxuICAgICAgICAnYmFrZXJ5JyxcbiAgICAgICAgJ2Rlc3NlcnRfc2hvcCcsXG4gICAgICAgICdiYXJfYW5kX2dyaWxsJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuUmVsYXhhdGlvbl06IFtcbiAgICAgICAgJ3NwYScsXG4gICAgICAgICd3ZWxsbmVzc19jZW50ZXInLFxuICAgICAgICAnc2hvcHBpbmdfbWFsbCcsXG4gICAgICAgICdiZWFjaCcsXG4gICAgICAgICdnYXJkZW4nLFxuICAgICAgICAncGxhemEnLFxuICAgICAgICAneW9nYV9zdHVkaW8nXG4gICAgXSxcbiAgICBbVHJhdmVsUHJlZmVyZW5jZS5BZHZlbnR1cmVdOiBbXG4gICAgICAgICdhZHZlbnR1cmVfc3BvcnRzX2NlbnRlcicsXG4gICAgICAgICdhbXVzZW1lbnRfcGFyaycsXG4gICAgICAgICdoaWtpbmdfYXJlYScsXG4gICAgICAgICdzcG9ydHNfY29tcGxleCcsXG4gICAgICAgICd3YXRlcl9wYXJrJyxcbiAgICAgICAgJ29mZl9yb2FkaW5nX2FyZWEnLFxuICAgICAgICAnc3BvcnRzX2FjdGl2aXR5X2xvY2F0aW9uJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuU2hvcHBpbmddOiBbIC8vIEFydHMgJiBNdXNldW1cbiAgICAgICAgJ2FydF9nYWxsZXJ5JyxcbiAgICAgICAgJ2FydF9zdHVkaW8nLFxuICAgICAgICAncGVyZm9ybWluZ19hcnRzX3RoZWF0ZXInLFxuICAgICAgICAnYXVkaXRvcml1bScsXG4gICAgICAgICdjb25jZXJ0X2hhbGwnLFxuICAgICAgICAnbXVzZXVtJyxcbiAgICAgICAgJ29wZXJhX2hvdXNlJ1xuICAgIF1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgcGxhY2UgdHlwZXMgYmFzZWQgb24gcHJlZmVyZW5jZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGFjZVR5cGVzRnJvbVByZWZlcmVuY2VzKHByZWZlcmVuY2VzOiBUcmF2ZWxQcmVmZXJlbmNlW10pOiBzdHJpbmdbXSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVHJhY2sgdXNlZCB0eXBlcyB0byBhdm9pZCByZXBlYXRzXG4gICAgICAgIGNvbnN0IHVzZWRUeXBlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICBjb25zdCByZXN1bHRUeXBlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc3MgZWFjaCBwcmVmZXJlbmNlXG4gICAgICAgIHByZWZlcmVuY2VzLmZvckVhY2gocHJlZiA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVUeXBlcyA9IHByZWZlcmVuY2VUb1BsYWNlVHlwZXNbcHJlZl0/LmZpbHRlcihcbiAgICAgICAgICAgICAgICB0eXBlID0+ICF1c2VkVHlwZXMuaGFzKHR5cGUpXG4gICAgICAgICAgICApIHx8IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUYWtlIDItMyByYW5kb20gdHlwZXMgZnJvbSBlYWNoIHByZWZlcmVuY2VcbiAgICAgICAgICAgIGNvbnN0IG51bVR5cGVzID0gTWF0aC5taW4oTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgKyAyLCBhdmFpbGFibGVUeXBlcy5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUeXBlcyA9IGF2YWlsYWJsZVR5cGVzXG4gICAgICAgICAgICAgICAgLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSlcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgbnVtVHlwZXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHRvIHJlc3VsdHMgYW5kIG1hcmsgYXMgdXNlZFxuICAgICAgICAgICAgc2VsZWN0ZWRUeXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdFR5cGVzLnB1c2godHlwZSk7XG4gICAgICAgICAgICAgICAgdXNlZFR5cGVzLmFkZCh0eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0VHlwZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBwbGFjZSB0eXBlcyBmcm9tIHByZWZlcmVuY2VzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFsndG91cmlzdF9hdHRyYWN0aW9uJ107IC8vIERlZmF1bHQgZmFsbGJhY2tcbiAgICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgcHJpbWFyeSB0eXBlXG5leHBvcnQgY29uc3QgZm9ybWF0UHJpbWFyeVR5cGUgPSAodHlwZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gdHlwZS5zcGxpdCgnXycpXG4gICAgICAgIC5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSlcbiAgICAgICAgLmpvaW4oJyAnKTtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZGlzcGxheSBuYW1lIGZvciBwbGFjZSB0eXBlXG5leHBvcnQgY29uc3QgZ2V0RGlzcGxheU5hbWUgPSAocGxhY2U6IFBsYWNlKTogc3RyaW5nID0+IHtcbiAgICBpZiAodHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcGxhY2UuZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIHJldHVybiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCB8fCBwbGFjZS5uYW1lIHx8ICcnO1xufTtcblxuLy8gRnVuY3Rpb24gdG8gZmlsdGVyIG91dCBkdXBsaWNhdGUgcGxhY2VzXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVW5pcXVlUGxhY2VzKHBsYWNlczogUGxhY2VbXSk6IFBsYWNlW10ge1xuICAgIGlmICghcGxhY2VzIHx8ICFBcnJheS5pc0FycmF5KHBsYWNlcykpIHJldHVybiBbXTtcblxuICAgIC8vIEdldCBzYXZlZCBwbGFjZXMgZnJvbSBnbG9iYWwgc3RhdGUgaWYgYXZhaWxhYmxlXG4gICAgY29uc3Qgc2F2ZWRQbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG5cbiAgICBjb25zdCBzYXZlZFBsYWNlSWRzID0gbmV3IFNldChzYXZlZFBsYWNlcy5tYXAocGxhY2UgPT4gcGxhY2UuaWQpKTtcbiAgICBjb25zdCBzYXZlZFBsYWNlTmFtZXMgPSBuZXcgU2V0KHNhdmVkUGxhY2VzLm1hcChwbGFjZSA9PiBcbiAgICAgICAgdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyBcbiAgICAgICAgICAgID8gcGxhY2UuZGlzcGxheU5hbWUudG9Mb3dlckNhc2UoKSBcbiAgICAgICAgICAgIDogcGxhY2UuZGlzcGxheU5hbWUudGV4dC50b0xvd2VyQ2FzZSgpXG4gICAgKSk7XG5cbiAgICAgLy8gRmlsdGVyIG91dCBwbGFjZXMgdGhhdDpcbiAgICAvLyAxLiBIYXZlIHNhbWUgSUQgYXMgc2F2ZWQgcGxhY2VcbiAgICAvLyAyLiBIYXZlIHNhbWUgbmFtZSBhcyBzYXZlZCBwbGFjZVxuICAgIHJldHVybiBwbGFjZXMuZmlsdGVyKHBsYWNlID0+IHtcbiAgICAgICAgaWYgKCFwbGFjZS5pZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc2F2ZWRQbGFjZUlkcy5oYXMocGxhY2UuaWQpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwbGFjZU5hbWUgPSB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnIFxuICAgICAgICAgICAgPyBwbGFjZS5kaXNwbGF5TmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICA6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoc2F2ZWRQbGFjZU5hbWVzLmhhcyhwbGFjZU5hbWUpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cblxuLy8gQWRkIFNhdmVkUGxhY2VzTWFuYWdlciBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgU2F2ZWRQbGFjZXNNYW5hZ2VyIHtcbiAgICBwbGFjZXM6IE1hcDxzdHJpbmcsIFBsYWNlPjtcbiAgICBhZGRQbGFjZTogKHBsYWNlOiBQbGFjZSkgPT4gdm9pZDtcbiAgICByZW1vdmVQbGFjZTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgZ2V0UGxhY2VzOiAoKSA9PiBQbGFjZVtdO1xuICAgIGhhc1BsYWNlOiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICBfcGVyc2lzdDogKCkgPT4gdm9pZDtcbiAgICBfbm90aWZ5Q2hhbmdlOiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBTVE9SQUdFX0tFWSA9ICdzYXZlZF9wbGFjZXMnO1xuXG4vLyBJbml0aWFsaXplIGZyb20gbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuZnVuY3Rpb24gaW5pdGlhbGl6ZVBsYWNlcygpOiBNYXA8c3RyaW5nLCBQbGFjZT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1NhdmVkUGxhY2VzTWFuYWdlcl0gU2VydmVyLXNpZGUsIHJldHVybmluZyBlbXB0eSBtYXAnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXA8c3RyaW5nLCBQbGFjZT4oKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzYXZlZFBsYWNlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tTYXZlZFBsYWNlc01hbmFnZXJdIExvYWRpbmcgZnJvbSBzdG9yYWdlOicsIHNhdmVkUGxhY2VzKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChzYXZlZFBsYWNlcykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkUGxhY2VzID0gSlNPTi5wYXJzZShzYXZlZFBsYWNlcykgYXMgUGxhY2VbXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbU2F2ZWRQbGFjZXNNYW5hZ2VyXSBQYXJzZWQgcGxhY2VzOicsIHBhcnNlZFBsYWNlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhhbmRsZSBhcnJheSBmb3JtYXRcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlcyA9IG5ldyBNYXA8c3RyaW5nLCBQbGFjZT4oKTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFBsYWNlcykpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRQbGFjZXMuZm9yRWFjaChwbGFjZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZT8uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlcy5zZXQocGxhY2UuaWQsIHBsYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1NhdmVkUGxhY2VzTWFuYWdlcl0gSW5pdGlhbGl6ZWQgd2l0aCBwbGFjZXM6JywgQXJyYXkuZnJvbShwbGFjZXMudmFsdWVzKCkpKTtcbiAgICAgICAgICAgIHJldHVybiBwbGFjZXM7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU2F2ZWRQbGFjZXNNYW5hZ2VyXSBFcnJvciBsb2FkaW5nIGZyb20gc3RvcmFnZTonLCBlcnJvcik7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1tTYXZlZFBsYWNlc01hbmFnZXJdIE5vIHNhdmVkIHBsYWNlcyBmb3VuZCwgcmV0dXJuaW5nIGVtcHR5IG1hcCcpO1xuICAgIHJldHVybiBuZXcgTWFwPHN0cmluZywgUGxhY2U+KCk7XG59XG5cbi8vIERlY2xhcmUgd2luZG93IGludGVyZmFjZSBmb3Igc2F2ZWQgcGxhY2VzXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgICAgIHNhdmVkUGxhY2VzOiBQbGFjZVtdO1xuICAgICAgICBhZGRQbGFjZVRvTWFwPzogKHBsYWNlOiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgICAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgICAgICAgICB0aXRsZT86IHN0cmluZztcbiAgICAgICAgICAgIHBsYWNlPzogUGxhY2U7XG4gICAgICAgIH0pID0+IHZvaWQ7XG4gICAgICAgIGdldFNhdmVkUGxhY2VzPzogKCkgPT4gUGxhY2VbXTtcbiAgICB9XG59XG5cbi8vIENyZWF0ZSB0aGUgc2luZ2xldG9uIG1hbmFnZXJcbmV4cG9ydCBjb25zdCBzYXZlZFBsYWNlc01hbmFnZXIgPSB7XG4gICAgcGxhY2VzOiBpbml0aWFsaXplUGxhY2VzKCksXG5cbiAgICBhZGRQbGFjZShwbGFjZTogUGxhY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1BsYWNlKHBsYWNlLmlkKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTYXZlZFBsYWNlc01hbmFnZXJdIEFkZGluZyBwbGFjZTonLCBwbGFjZS5pZCk7XG4gICAgICAgICAgICB0aGlzLnBsYWNlcy5zZXQocGxhY2UuaWQsIHBsYWNlKTtcbiAgICAgICAgICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeUNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbW92ZVBsYWNlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzUGxhY2UoaWQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1NhdmVkUGxhY2VzTWFuYWdlcl0gUmVtb3ZpbmcgcGxhY2U6JywgaWQpO1xuICAgICAgICAgICAgdGhpcy5wbGFjZXMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeUNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFBsYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wbGFjZXMudmFsdWVzKCkpO1xuICAgIH0sXG5cbiAgICBoYXNQbGFjZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYWNlcy5oYXMoaWQpO1xuICAgIH0sXG5cbiAgICBfcGVyc2lzdCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlc0FycmF5ID0gQXJyYXkuZnJvbSh0aGlzLnBsYWNlcy52YWx1ZXMoKSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkocGxhY2VzQXJyYXkpKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIG1ldHJpY3MgaW4gbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICBjb25zdCBtZXRyaWNzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndHJhdmVsX2ludGVyYWN0aW9uX21ldHJpY3MnKSB8fCAne30nKTtcbiAgICAgICAgICAgIG1ldHJpY3Muc2F2ZWRQbGFjZXNDb3VudCA9IHBsYWNlc0FycmF5Lmxlbmd0aDtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0cmF2ZWxfaW50ZXJhY3Rpb25fbWV0cmljcycsIEpTT04uc3RyaW5naWZ5KG1ldHJpY3MpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTYXZlZFBsYWNlc01hbmFnZXJdIFBlcnNpc3RlZCBwbGFjZXMgYW5kIG1ldHJpY3M6JywgeyBcbiAgICAgICAgICAgICAgICBwbGFjZXNDb3VudDogcGxhY2VzQXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1ldHJpY3MgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTYXZlZFBsYWNlc01hbmFnZXJdIEVycm9yIHBlcnNpc3RpbmcgcGxhY2VzOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfbm90aWZ5Q2hhbmdlKCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlcyA9IHRoaXMuZ2V0UGxhY2VzKCk7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NhdmVkUGxhY2VzQ2hhbmdlZCcsIHsgXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7IFxuICAgICAgICAgICAgICAgICAgICBwbGFjZXMsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBwbGFjZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufSBhcyBjb25zdDtcblxuLy8gSW5pdGlhbGl6ZSB3aW5kb3cgaW50ZXJmYWNlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbU2F2ZWRQbGFjZXNNYW5hZ2VyXSBJbml0aWFsaXppbmcgd2luZG93IGludGVyZmFjZTonLCBwbGFjZXMpO1xuICAgICAgICB3aW5kb3cuc2F2ZWRQbGFjZXMgPSBwbGFjZXM7XG4gICAgICAgIHdpbmRvdy5nZXRTYXZlZFBsYWNlcyA9ICgpID0+IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZXMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU2F2ZWRQbGFjZXNNYW5hZ2VyXSBFcnJvciBpbml0aWFsaXppbmcgd2luZG93IGludGVyZmFjZTonLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gaGFuZGxlIGRpZmZlcmVudCBzZWFyY2ggc3RyYXRlZ2llc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFdpdGhTdHJhdGVneShcbiAgICBzZWFyY2hUZXh0OiBzdHJpbmcsXG4gICAgbG9jYXRpb246IHsgbGF0aXR1ZGU6IG51bWJlcjsgbG9uZ2l0dWRlOiBudW1iZXIgfSxcbiAgICBjaXR5TmFtZTogc3RyaW5nXG4pOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLUdvb2ctQXBpLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVksXG4gICAgICAgICdYLUdvb2ctRmllbGRNYXNrJzogJ3BsYWNlcy5pZCxwbGFjZXMuZGlzcGxheU5hbWUscGxhY2VzLmZvcm1hdHRlZEFkZHJlc3MscGxhY2VzLmxvY2F0aW9uLHBsYWNlcy5wcmltYXJ5VHlwZSxwbGFjZXMucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSxwbGFjZXMucGhvdG9zLm5hbWUnXG4gICAgfSBhcyBjb25zdDtcblxuICAgIC8vIEV4dHJhY3QgcGxhY2UgdHlwZSBmcm9tIHNlYXJjaCB0ZXh0IChlLmcuLCBcInBhcmtcIiwgXCJtdXNldW1cIiwgZXRjLilcbiAgICBjb25zdCB0eXBlTWF0Y2ggPSBzZWFyY2hUZXh0Lm1hdGNoKC8oXFx3KylcXHMqJC9pKTtcbiAgICBjb25zdCBwbGFjZVR5cGUgPSB0eXBlTWF0Y2ggPyB0eXBlTWF0Y2hbMV0udG9Mb3dlckNhc2UoKSA6IHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEJ1aWxkIHNlYXJjaCBxdWVyaWVzIGJhc2VkIG9uIHBsYWNlIHR5cGVcbiAgICBjb25zdCBidWlsZFF1ZXJpZXMgPSAodHlwZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGJhc2VRdWVyaWVzID0gW1xuICAgICAgICAgICAgYCR7dHlwZX0gaW4gJHtjaXR5TmFtZX1gLFxuICAgICAgICAgICAgYCR7dHlwZX0gbmVhciAke2NpdHlOYW1lfWAsXG4gICAgICAgICAgICBgcG9wdWxhciAke3R5cGV9IGluICR7Y2l0eU5hbWV9YCxcbiAgICAgICAgICAgIGBiZXN0ICR7dHlwZX0gaW4gJHtjaXR5TmFtZX1gLFxuICAgICAgICAgICAgYHRvcCAke3R5cGV9IGluICR7Y2l0eU5hbWV9YFxuICAgICAgICBdXG4gICAgfTtcblxuICAgIC8vIEdldCBxdWVyaWVzIGZvciB0aGlzIHBsYWNlIHR5cGVcbiAgICBjb25zdCBxdWVyaWVzID0gYnVpbGRRdWVyaWVzKHBsYWNlVHlwZSk7XG4gICAgXG4gICAgLy8gVHJ5IGVhY2ggcXVlcnkgaW4gc2VxdWVuY2VcbiAgICBmb3IgKGNvbnN0IHF1ZXJ5IG9mIHF1ZXJpZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hXaXRoU3RyYXRlZ3ldIFRyeWluZyBxdWVyeTonLCBxdWVyeSk7XG4gICAgICAgIGNvbnN0IHBsYWNlID0gYXdhaXQgdHJ5U2VhcmNoKHF1ZXJ5LCBoZWFkZXJzLCBsb2NhdGlvbik7XG4gICAgICAgIGlmIChwbGFjZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hXaXRoU3RyYXRlZ3ldIEZvdW5kIHBsYWNlIHdpdGggcXVlcnk6JywgcXVlcnkpO1xuICAgICAgICAgICAgcmV0dXJuIHBsYWNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1tzZWFyY2hXaXRoU3RyYXRlZ3ldIE5vIHBsYWNlcyBmb3VuZCB3aXRoIGFueSBxdWVyeSBzdHJhdGVneScpO1xuICAgIHJldHVybiBudWxsO1xufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gdHJ5IGEgc2luZ2xlIHNlYXJjaCBxdWVyeVxuYXN5bmMgZnVuY3Rpb24gdHJ5U2VhcmNoKFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgaGVhZGVyczogYW55LFxuICAgIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyIH1cbik6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9wbGFjZXMuZ29vZ2xlYXBpcy5jb20vdjEvcGxhY2VzOnNlYXJjaFRleHQnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdGV4dFF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbkJpYXM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIwMDAwLjBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t0cnlTZWFyY2hdIFNlYXJjaCBmYWlsZWQ6Jywge1xuICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBpZiAoIWRhdGEucGxhY2VzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdHJ5U2VhcmNoXSBObyBwbGFjZXMgZm91bmQgZm9yIHF1ZXJ5OicsIHF1ZXJ5KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJ5IGVhY2ggcGxhY2UgdW50aWwgd2UgZmluZCBvbmUgdGhhdCBpc24ndCBzYXZlZFxuICAgICAgICBmb3IgKGNvbnN0IHBsYWNlIG9mIGRhdGEucGxhY2VzKSB7XG4gICAgICAgICAgICBpZiAoIXNhdmVkUGxhY2VzTWFuYWdlci5oYXNQbGFjZShwbGFjZS5pZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW3RyeVNlYXJjaF0gRm91bmQgbmV3IHBsYWNlOicsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCB8fCBwbGFjZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGFjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdHJ5U2VhcmNoXSBQbGFjZSBhbHJlYWR5IHNhdmVkLCBza2lwcGluZzonLCBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCB8fCBwbGFjZS5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t0cnlTZWFyY2hdIEVycm9yIGluIHNlYXJjaDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFBsYWNlQnlUZXh0KFxuICAgIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcsXG4gICAgZXhjbHVkZUlkczogc3RyaW5nW10gPSBbXVxuKTogUHJvbWlzZTxQbGFjZSB8IG51bGw+IHtcbiAgICBjb25zb2xlLmxvZygnW3NlYXJjaFBsYWNlQnlUZXh0XSBTdGFydGluZyBzZWFyY2ggd2l0aDonLCB7XG4gICAgICAgIHNlYXJjaFRleHQsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZXN0aW5hdGlvbixcbiAgICAgICAgZXhjbHVkZUlkcyxcbiAgICAgICAgY3VycmVudFNhdmVkUGxhY2VzOiBBcnJheS5mcm9tKHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMudmFsdWVzKCkpXG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBUcnkgbXVsdGlwbGUgc2VhcmNoIHN0cmF0ZWdpZXNcbiAgICAgICAgY29uc3Qgc3RyYXRlZ2llcyA9IFtcbiAgICAgICAgICAgIGAke3NlYXJjaFRleHR9IGluICR7ZGVzdGluYXRpb259YCxcbiAgICAgICAgICAgIGAke3NlYXJjaFRleHR9IG5lYXIgJHtkZXN0aW5hdGlvbn1gLFxuICAgICAgICAgICAgc2VhcmNoVGV4dFxuICAgICAgICBdO1xuXG4gICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdHJpZWQgcGxhY2VzIHRvIGF2b2lkIGR1cGxpY2F0ZXNcbiAgICAgICAgY29uc3QgdHJpZWRQbGFjZXMgPSBuZXcgU2V0KFsuLi5leGNsdWRlSWRzLCAuLi5BcnJheS5mcm9tKHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMua2V5cygpKV0pO1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3RyYXRlZ3kgb2Ygc3RyYXRlZ2llcykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gVHJ5aW5nIHN0cmF0ZWd5OicsIHN0cmF0ZWd5KTtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlID0gYXdhaXQgc2VhcmNoV2l0aFN0cmF0ZWd5KHN0cmF0ZWd5LCBsb2NhdGlvbiwgZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXBsYWNlPy5pZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc2VhcmNoUGxhY2VCeVRleHRdIE5vIHBsYWNlIGZvdW5kIGZvciBzdHJhdGVneTonLCBzdHJhdGVneSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNraXAgaWYgd2UndmUgYWxyZWFkeSB0cmllZCB0aGlzIHBsYWNlXG4gICAgICAgICAgICBpZiAodHJpZWRQbGFjZXMuaGFzKHBsYWNlLmlkKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc2VhcmNoUGxhY2VCeVRleHRdIFBsYWNlIGFscmVhZHkgdHJpZWQ6JywgcGxhY2UuaWQpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgdG8gdHJpZWQgcGxhY2VzIHRvIHByZXZlbnQgZHVwbGljYXRlc1xuICAgICAgICAgICAgdHJpZWRQbGFjZXMuYWRkKHBsYWNlLmlkKTtcblxuICAgICAgICAgICAgLy8gVHJhbnNmb3JtIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRQbGFjZSA9IHRyYW5zZm9ybVBsYWNlUmVzcG9uc2UocGxhY2UpO1xuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1lZFBsYWNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gRmFpbGVkIHRvIHRyYW5zZm9ybSBwbGFjZScpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3NlYXJjaFBsYWNlQnlUZXh0XSBGb3VuZCB1bmlxdWUgcGxhY2U6Jywge1xuICAgICAgICAgICAgICAgIGlkOiB0cmFuc2Zvcm1lZFBsYWNlLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRyYW5zZm9ybWVkUGxhY2UuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgc3RyYXRlZ3lcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRQbGFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbc2VhcmNoUGxhY2VCeVRleHRdIE5vIHVuaXF1ZSBwbGFjZSBmb3VuZCBhZnRlciB0cnlpbmcgYWxsIHN0cmF0ZWdpZXMnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW3NlYXJjaFBsYWNlQnlUZXh0XSBFcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSBHb29nbGUgUGxhY2VzIEFQSSByZXNwb25zZSB0byBvdXIgUGxhY2UgdHlwZVxuZnVuY3Rpb24gdHJhbnNmb3JtUGxhY2VSZXNwb25zZShwbGFjZTogR29vZ2xlUGxhY2VSZXNwb25zZSk6IFBsYWNlIHwgbnVsbCB7XG4gICAgaWYgKCFwbGFjZSkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IHBsYWNlLmRpc3BsYXlOYW1lPy50ZXh0IFxuICAgICAgICA/IHsgdGV4dDogcGxhY2UuZGlzcGxheU5hbWUudGV4dCwgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5kaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJyB9XG4gICAgICAgIDogcGxhY2UubmFtZSB8fCAnJztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgbmFtZTogcGxhY2UubmFtZSxcbiAgICAgICAgZGlzcGxheU5hbWUsXG4gICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSB8fCAncGxhY2UnLFxuICAgICAgICBwaG90b3M6IHBsYWNlLnBob3Rvcz8ubWFwKHBob3RvID0+ICh7IFxuICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZSxcbiAgICAgICAgICAgIHdpZHRoUHg6IHBob3RvLndpZHRoUHgsXG4gICAgICAgICAgICBoZWlnaHRQeDogcGhvdG8uaGVpZ2h0UHgsXG4gICAgICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM6IHBob3RvLmF1dGhvckF0dHJpYnV0aW9uc1xuICAgICAgICB9KSkgfHwgW10sXG4gICAgICAgIGZvcm1hdHRlZEFkZHJlc3M6IHBsYWNlLmZvcm1hdHRlZEFkZHJlc3MsXG4gICAgICAgIGxvY2F0aW9uOiBwbGFjZS5sb2NhdGlvbixcbiAgICAgICAgcHJpbWFyeVR5cGVEaXNwbGF5TmFtZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSBcbiAgICAgICAgICAgID8geyB0ZXh0OiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLnRleHQsIGxhbmd1YWdlQ29kZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJyB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBzZWFyY2hNdWx0aXBsZVBsYWNlc0J5VGV4dCA9IGFzeW5jIChcbiAgICBzZWFyY2hUZXh0OiBzdHJpbmcsXG4gICAgbG9jYXRpb246IHsgbGF0aXR1ZGU6IG51bWJlcjsgbG9uZ2l0dWRlOiBudW1iZXIgfSxcbiAgICBtYXhSZXN1bHRzOiBudW1iZXIgPSA1XG4pOiBQcm9taXNlPFBsYWNlW10+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dvb2dsZSBNYXBzIEFQSSBrZXkgaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0V4ZWN1dGluZyBzZWFyY2hNdWx0aXBsZVBsYWNlc0J5VGV4dCB3aXRoIHBhcmFtczonLCB7XG4gICAgICAgICAgICBzZWFyY2hUZXh0LFxuICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICBtYXhSZXN1bHRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xuICAgICAgICAgICAgdGV4dFF1ZXJ5OiBzZWFyY2hUZXh0LFxuICAgICAgICAgICAgbG9jYXRpb25CaWFzOiB7XG4gICAgICAgICAgICAgICAgY2lyY2xlOiB7XG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMDAwMC4wIC8vIDIwa20gcmFkaXVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heFJlc3VsdENvdW50OiBtYXhSZXN1bHRzXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnWC1Hb29nLUFwaS1LZXknOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HT09HTEVfTUFQU19BUElfS0VZLFxuICAgICAgICAgICAgJ1gtR29vZy1GaWVsZE1hc2snOiAncGxhY2VzLmlkLHBsYWNlcy5kaXNwbGF5TmFtZSxwbGFjZXMuZm9ybWF0dGVkQWRkcmVzcyxwbGFjZXMubG9jYXRpb24scGxhY2VzLnByaW1hcnlUeXBlLHBsYWNlcy5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLHBsYWNlcy5waG90b3MubmFtZSdcbiAgICAgICAgfSBhcyBjb25zdDtcblxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3BsYWNlcy5nb29nbGVhcGlzLmNvbS92MS9wbGFjZXM6c2VhcmNoVGV4dCcsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2VhcmNoIHBsYWNlczonLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JEYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWRhdGEucGxhY2VzIHx8ICFBcnJheS5pc0FycmF5KGRhdGEucGxhY2VzKSB8fCBkYXRhLnBsYWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBwbGFjZXMgZm91bmQgZm9yIHRleHQgc2VhcmNoOicsIHNlYXJjaFRleHQpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGEucGxhY2VzLm1hcCgocGxhY2U6IGFueSkgPT4gKHtcbiAgICAgICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCA/IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UuZGlzcGxheU5hbWUubGFuZ3VhZ2VDb2RlIHx8ICdlbidcbiAgICAgICAgICAgIH0gOiBwbGFjZS5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSB8fCAncGxhY2UnLFxuICAgICAgICAgICAgcGhvdG9zOiBwbGFjZS5waG90b3M/Lm1hcCgocGhvdG86IGFueSkgPT4gKHsgXG4gICAgICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZVxuICAgICAgICAgICAgfSkpIHx8IFtdLFxuICAgICAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcGxhY2UuZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBwbGFjZS5sb2NhdGlvbixcbiAgICAgICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUgPyB7XG4gICAgICAgICAgICAgICAgdGV4dDogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJ1xuICAgICAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIGZvciBwbGFjZXM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufTtcblxuLy8gRmV0Y2ggcGxhY2VzIGZyb20gR29vZ2xlIFBsYWNlcyBBUElcbmV4cG9ydCBjb25zdCBmZXRjaFBsYWNlcyA9IGFzeW5jIChcbiAgICBsYXRpdHVkZTogbnVtYmVyLFxuICAgIGxvbmdpdHVkZTogbnVtYmVyLFxuICAgIHByZWZlcmVuY2VzPzogVHJhdmVsUHJlZmVyZW5jZVtdLFxuICAgIG1heFJlc3VsdHM6IG51bWJlciA9IDUsXG4gICAgcGxhY2VUeXBlcz86IHN0cmluZ1tdXG4pOiBQcm9taXNlPFBsYWNlW10+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dvb2dsZSBNYXBzIEFQSSBrZXkgaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnJvbVByZWZlcmVuY2VzID0gISFwcmVmZXJlbmNlcyAmJiBwcmVmZXJlbmNlcy5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBmcm9tUGxhY2VUeXBlcyA9ICEhcGxhY2VUeXBlcyAmJiBwbGFjZVR5cGVzLmxlbmd0aCA+IDA7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWZyb21QcmVmZXJlbmNlcyAmJiAhZnJvbVBsYWNlVHlwZXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIHByZWZlcmVuY2VzIG9yIHBsYWNlIHR5cGVzIHByb3ZpZGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2UgcHJlZmVyZW5jZXMgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSB1c2UgcGxhY2VUeXBlcywgb3RoZXJ3aXNlIHVzZSBkZWZhdWx0c1xuICAgICAgICBsZXQgaW5jbHVkZWRUeXBlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgaWYgKGZyb21QcmVmZXJlbmNlcykge1xuICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyA9IGdldFBsYWNlVHlwZXNGcm9tUHJlZmVyZW5jZXMocHJlZmVyZW5jZXMhKTtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9tUGxhY2VUeXBlcykge1xuICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyA9IHBsYWNlVHlwZXMhO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0V4ZWN1dGluZyBmZXRjaHBsYWNlcyB3aXRoIHBhcmFtczonLCB7XG4gICAgICAgICAgICBsYXRpdHVkZSxcbiAgICAgICAgICAgIGxvbmdpdHVkZSxcbiAgICAgICAgICAgIGluY2x1ZGVkVHlwZXMsXG4gICAgICAgICAgICBtYXhSZXN1bHRzLFxuICAgICAgICAgICAgZnJvbVByZWZlcmVuY2VzOiAhIXByZWZlcmVuY2VzPy5sZW5ndGgsXG4gICAgICAgICAgICBmcm9tUGxhY2VUeXBlczogISFwbGFjZVR5cGVzPy5sZW5ndGhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRmlyc3QgdHJ5IG5lYXJieSBzZWFyY2hcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xuICAgICAgICAgICAgICAgIGluY2x1ZGVkVHlwZXMsXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0Q291bnQ6IG1heFJlc3VsdHMsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25SZXN0cmljdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBjaXJjbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBsYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAwMDAuMCAvLyAyMGttIHJhZGl1c1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdYLUdvb2ctQXBpLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVksXG4gICAgICAgICAgICAgICAgJ1gtR29vZy1GaWVsZE1hc2snOiAncGxhY2VzLmlkLHBsYWNlcy5kaXNwbGF5TmFtZSxwbGFjZXMuZm9ybWF0dGVkQWRkcmVzcyxwbGFjZXMubG9jYXRpb24scGxhY2VzLnByaW1hcnlUeXBlLHBsYWNlcy5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLHBsYWNlcy5waG90b3MubmFtZSdcbiAgICAgICAgICAgIH0gYXMgY29uc3Q7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxL3BsYWNlczpzZWFyY2hOZWFyYnknLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYWNlcyAmJiBBcnJheS5pc0FycmF5KGRhdGEucGxhY2VzKSAmJiBkYXRhLnBsYWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnBsYWNlcy5tYXAoKHBsYWNlOiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcGxhY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcGxhY2UuZGlzcGxheU5hbWUudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUNvZGU6IHBsYWNlLmRpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogcGxhY2UuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZTogcGxhY2UucHJpbWFyeVR5cGUgfHwgJ3BsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvczogcGxhY2UucGhvdG9zPy5tYXAoKHBob3RvOiBhbnkpID0+ICh7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHBob3RvLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZEFkZHJlc3M6IHBsYWNlLmZvcm1hdHRlZEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcGxhY2UubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUNvZGU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUubGFuZ3VhZ2VDb2RlIHx8ICdlbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIHBsYWNlczonLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JEYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIG5lYXJieSBzZWFyY2g6JywgZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbmVhcmJ5IHNlYXJjaCBmYWlscywgdHJ5IHRleHQgc2VhcmNoIGFzIGZhbGxiYWNrXG4gICAgICAgIGNvbnNvbGUubG9nKCdGYWxsaW5nIGJhY2sgdG8gdGV4dCBzZWFyY2guLi4nKTtcbiAgICAgICAgY29uc3Qgc2VhcmNoUXVlcnkgPSBmcm9tUGxhY2VUeXBlcyA/IHBsYWNlVHlwZXMhWzBdIDogcHJlZmVyZW5jZXMhWzBdO1xuICAgICAgICByZXR1cm4gYXdhaXQgc2VhcmNoTXVsdGlwbGVQbGFjZXNCeVRleHQoc2VhcmNoUXVlcnksIHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSB9LCBtYXhSZXN1bHRzKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHBsYWNlczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59OyJdLCJuYW1lcyI6WyJUcmF2ZWxQcmVmZXJlbmNlIiwicHJlZmVyZW5jZVRvUGxhY2VUeXBlcyIsIkN1bHR1cmUiLCJOYXR1cmUiLCJGb29kIiwiUmVsYXhhdGlvbiIsIkFkdmVudHVyZSIsIlNob3BwaW5nIiwiZ2V0UGxhY2VUeXBlc0Zyb21QcmVmZXJlbmNlcyIsInByZWZlcmVuY2VzIiwidXNlZFR5cGVzIiwiU2V0IiwicmVzdWx0VHlwZXMiLCJmb3JFYWNoIiwicHJlZiIsImF2YWlsYWJsZVR5cGVzIiwiZmlsdGVyIiwidHlwZSIsImhhcyIsIm51bVR5cGVzIiwiTWF0aCIsIm1pbiIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwic2VsZWN0ZWRUeXBlcyIsInNvcnQiLCJzbGljZSIsInB1c2giLCJhZGQiLCJlcnJvciIsImNvbnNvbGUiLCJmb3JtYXRQcmltYXJ5VHlwZSIsInNwbGl0IiwibWFwIiwid29yZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiam9pbiIsImdldERpc3BsYXlOYW1lIiwicGxhY2UiLCJkaXNwbGF5TmFtZSIsInRleHQiLCJuYW1lIiwiZmlsdGVyVW5pcXVlUGxhY2VzIiwicGxhY2VzIiwiQXJyYXkiLCJpc0FycmF5Iiwic2F2ZWRQbGFjZXMiLCJzYXZlZFBsYWNlc01hbmFnZXIiLCJnZXRQbGFjZXMiLCJzYXZlZFBsYWNlSWRzIiwiaWQiLCJzYXZlZFBsYWNlTmFtZXMiLCJ0b0xvd2VyQ2FzZSIsInBsYWNlTmFtZSIsIlNUT1JBR0VfS0VZIiwiaW5pdGlhbGl6ZVBsYWNlcyIsImxvZyIsIk1hcCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWRQbGFjZXMiLCJKU09OIiwicGFyc2UiLCJzZXQiLCJmcm9tIiwidmFsdWVzIiwiYWRkUGxhY2UiLCJoYXNQbGFjZSIsIl9wZXJzaXN0IiwiX25vdGlmeUNoYW5nZSIsInJlbW92ZVBsYWNlIiwiZGVsZXRlIiwicGxhY2VzQXJyYXkiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwibWV0cmljcyIsInNhdmVkUGxhY2VzQ291bnQiLCJwbGFjZXNDb3VudCIsIndpbmRvdyIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImNvdW50IiwiZ2V0U2F2ZWRQbGFjZXMiLCJzZWFyY2hXaXRoU3RyYXRlZ3kiLCJzZWFyY2hUZXh0IiwibG9jYXRpb24iLCJjaXR5TmFtZSIsImhlYWRlcnMiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSIsInR5cGVNYXRjaCIsIm1hdGNoIiwicGxhY2VUeXBlIiwiYnVpbGRRdWVyaWVzIiwiYmFzZVF1ZXJpZXMiLCJxdWVyaWVzIiwicXVlcnkiLCJ0cnlTZWFyY2giLCJkYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJ0ZXh0UXVlcnkiLCJsb2NhdGlvbkJpYXMiLCJjaXJjbGUiLCJjZW50ZXIiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJhZGl1cyIsIm9rIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJzZWFyY2hQbGFjZUJ5VGV4dCIsImRlc3RpbmF0aW9uIiwiZXhjbHVkZUlkcyIsImN1cnJlbnRTYXZlZFBsYWNlcyIsInN0cmF0ZWdpZXMiLCJ0cmllZFBsYWNlcyIsImtleXMiLCJzdHJhdGVneSIsInRyYW5zZm9ybWVkUGxhY2UiLCJ0cmFuc2Zvcm1QbGFjZVJlc3BvbnNlIiwibGFuZ3VhZ2VDb2RlIiwicHJpbWFyeVR5cGUiLCJwaG90b3MiLCJwaG90byIsIndpZHRoUHgiLCJoZWlnaHRQeCIsImF1dGhvckF0dHJpYnV0aW9ucyIsImZvcm1hdHRlZEFkZHJlc3MiLCJwcmltYXJ5VHlwZURpc3BsYXlOYW1lIiwidW5kZWZpbmVkIiwic2VhcmNoTXVsdGlwbGVQbGFjZXNCeVRleHQiLCJtYXhSZXN1bHRzIiwicmVxdWVzdEJvZHkiLCJtYXhSZXN1bHRDb3VudCIsImVycm9yRGF0YSIsImZldGNoUGxhY2VzIiwicGxhY2VUeXBlcyIsImZyb21QcmVmZXJlbmNlcyIsImZyb21QbGFjZVR5cGVzIiwiaW5jbHVkZWRUeXBlcyIsImxvY2F0aW9uUmVzdHJpY3Rpb24iLCJzZWFyY2hRdWVyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n"));

/***/ })

});