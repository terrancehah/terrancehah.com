"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/travel-info-utils */ \"./utils/travel-info-utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scriptLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const geometryLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Track active routes by fromId-toId\n    const activeRoutesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!apiKey) return;\n        const loadGoogleMapsScript = ()=>{\n            var _window_google;\n            if ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : _window_google.maps) {\n                setupMapInstance();\n            } else if (!scriptLoadedRef.current && !document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]')) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker,geometry&v=beta&callback=setupMapInstance\");\n                script.async = true;\n                script.defer = true;\n                document.head.appendChild(script);\n                scriptLoadedRef.current = true;\n            }\n        };\n        // Initial map setup and geometry library check\n        async function setupMapInstance() {\n            if (!mapRef.current || mapInstanceRef.current) return;\n            try {\n                // Use the city prop directly, fallback to session storage if needed\n                let targetCity = city;\n                if (!targetCity) {\n                    const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n                    if (sessionData) {\n                        const parsed = JSON.parse(sessionData);\n                        targetCity = parsed.city;\n                    }\n                }\n                if (!targetCity) {\n                    console.error(\"No city specified\");\n                    setIsLoading(false);\n                    return;\n                }\n                const location = await getLocation(targetCity);\n                const map = new window.google.maps.Map(mapRef.current, {\n                    zoom: 12,\n                    center: location,\n                    mapId: \"2d604af04a7c7fa8\"\n                });\n                mapInstanceRef.current = map;\n                setMap(map);\n                markersRef.current = new Map();\n                // Initialize the InfoWindow\n                infoWindowRef.current = new window.google.maps.InfoWindow({\n                    maxWidth: 300,\n                    pixelOffset: new window.google.maps.Size(0, -30)\n                });\n                setIsLoading(false);\n                // Check if geometry library is loaded\n                if (isGeometryReady()) {\n                    geometryLoadedRef.current = true;\n                } else {\n                    // Poll for geometry library\n                    const checkGeometry = setInterval(()=>{\n                        if (isGeometryReady()) {\n                            geometryLoadedRef.current = true;\n                            clearInterval(checkGeometry);\n                        }\n                    }, 100);\n                    // Clear interval after 10 seconds to prevent infinite polling\n                    setTimeout(()=>clearInterval(checkGeometry), 10000);\n                }\n            } catch (error) {\n                console.error(\"Error setting up map:\", error);\n                setIsLoading(false);\n            }\n        }\n        window.setupMapInstance = setupMapInstance;\n        loadGoogleMapsScript();\n        return ()=>{\n            delete window.setupMapInstance;\n        };\n    }, [\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const setupMapFeatures = async ()=>{\n            if (!mapInstanceRef.current) return;\n            try {\n                const location = await getLocation(city);\n                // Update existing map instead of creating new one\n                mapInstanceRef.current.setCenter(location);\n                mapInstanceRef.current.setZoom(12);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error updating map features:\", error);\n                setIsLoading(false);\n            }\n        };\n        setupMapFeatures();\n    }, [\n        city\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const initializeMap = async ()=>{\n            // Wait for map to be idle before restoring markers\n            await new Promise((resolve)=>{\n                google.maps.event.addListenerOnce(map, \"idle\", ()=>{\n                    resolve();\n                });\n            });\n            const savedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            console.log(\"Restoring markers for saved places:\", savedPlaces.length);\n            savedPlaces.forEach((place)=>{\n                if (place.location) {\n                    var _window_addPlaceToMap, _window;\n                    (_window_addPlaceToMap = (_window = window).addPlaceToMap) === null || _window_addPlaceToMap === void 0 ? void 0 : _window_addPlaceToMap.call(_window, {\n                        latitude: place.location.latitude,\n                        longitude: place.location.longitude,\n                        title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n                        place: place\n                    });\n                }\n            });\n        };\n        initializeMap();\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    marker.map = null;\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    google.maps.event.clearInstanceListeners(marker);\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                var _data_place;\n                const markerId = ((_data_place = data.place) === null || _data_place === void 0 ? void 0 : _data_place.id) || data.title || String(Date.now());\n                const pinElement = new window.google.maps.marker.PinElement({\n                    background: \"#FF4444\",\n                    borderColor: \"#CC0000\",\n                    glyphColor: \"#FFFFFF\"\n                });\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(data.place);\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places));\n                }\n                // Ensure the marker is properly added to the map\n                marker.map = mapInstanceRef.current;\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        var // Close any existing InfoWindow\n                        _infoWindowRef_current;\n                        (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current && mapInstanceRef.current) {\n                            const position = marker.position;\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.setPosition(position);\n                            infoWindowRef.current.open(mapInstanceRef.current);\n                        }\n                    }\n                });\n                markersRef.current.set(markerId, marker);\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        mapInstanceRef.current\n    ]); // Only depend on the map instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const handlePlacesChanged = async (event)=>{\n            const e = event;\n            console.log(\"[MapComponent] Places changed:\", e.detail);\n            // Clear existing markers\n            markersRef.current.forEach((marker)=>{\n                marker.map = null;\n            });\n            markersRef.current.clear();\n            // Add new markers\n            const places = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            places.forEach((place)=>{\n                if (place.location) {\n                    const marker = createMarker(place);\n                    if (marker) {\n                        marker.map = map;\n                        markersRef.current.set(place.id, marker);\n                    }\n                }\n            });\n        };\n        window.addEventListener(\"places-changed\", handlePlacesChanged);\n        return ()=>{\n            window.removeEventListener(\"places-changed\", handlePlacesChanged);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const handleTravelInfoDisplay = async (event)=>{\n            const e = event;\n            const { fromId, toId } = e.detail;\n            const routeKey = \"\".concat(fromId, \"-\").concat(toId);\n            // Clear existing route if any\n            const existingRoute = activeRoutesRef.current.get(routeKey);\n            if (existingRoute) {\n                existingRoute.setMap(null);\n                activeRoutesRef.current.delete(routeKey);\n            }\n            const fromPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(fromId);\n            const toPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(toId);\n            if ((fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex) !== undefined && toPlace) {\n                const color = getRouteColor(fromPlace.dayIndex);\n                const polyline = await drawRoute([\n                    fromPlace,\n                    toPlace\n                ], routeKey, color);\n                if (polyline) {\n                    activeRoutesRef.current.set(routeKey, polyline);\n                }\n            }\n        };\n        const handleTravelInfoHide = (event)=>{\n            const e = event;\n            const { fromId, toId } = e.detail;\n            const routeKey = \"\".concat(fromId, \"-\").concat(toId);\n            // Remove route from map and tracking\n            const route = activeRoutesRef.current.get(routeKey);\n            if (route) {\n                route.setMap(null);\n                activeRoutesRef.current.delete(routeKey);\n            }\n        };\n        window.addEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n        window.addEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        return ()=>{\n            // Clean up all routes when component unmounts\n            activeRoutesRef.current.forEach((route)=>route.setMap(null));\n            activeRoutesRef.current.clear();\n            window.removeEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n            window.removeEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        };\n    }, [\n        mapInstanceRef.current\n    ]);\n    const drawRoute = async (places, routeKey, color)=>{\n        var _places_, _places_1;\n        console.log(\"[MapComponent] Drawing route between:\", {\n            from: (_places_ = places[0]) === null || _places_ === void 0 ? void 0 : _places_.displayName,\n            to: (_places_1 = places[1]) === null || _places_1 === void 0 ? void 0 : _places_1.displayName\n        });\n        if (!places || places.length !== 2 || !mapInstanceRef.current || !isGeometryReady()) {\n            console.log(\"[MapComponent] Not ready to draw route:\", {\n                places: places === null || places === void 0 ? void 0 : places.length,\n                mapReady: !!mapInstanceRef.current,\n                geometryReady: isGeometryReady()\n            });\n            return;\n        }\n        const [place1, place2] = places;\n        if (!place1.location || !place2.location) {\n            console.warn(\"[MapComponent] Missing location for place:\", {\n                place1Name: place1.name,\n                place2Name: place2.name\n            });\n            return;\n        }\n        try {\n            const info = await _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.getTravelInfo(place1, place2);\n            if (!info || !info.legPolyline) {\n                console.warn(\"[MapComponent] No route info available between places\");\n                return;\n            }\n            const path = google.maps.geometry.encoding.decodePath(info.legPolyline);\n            const polyline = new google.maps.Polyline({\n                path,\n                strokeColor: color,\n                strokeOpacity: 0.8,\n                strokeWeight: 5,\n                map: mapInstanceRef.current\n            });\n            return polyline;\n        } catch (error) {\n            console.error(\"[MapComponent] Error drawing route:\", error);\n        }\n    };\n    const getPhotoUrl = (photo, index)=>{\n        var _photo_getURI;\n        return ((_photo_getURI = photo.getURI) === null || _photo_getURI === void 0 ? void 0 : _photo_getURI.call(photo)) || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                    </div>\\n                    \").concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    const isGeometryReady = ()=>{\n        var _window_google_maps_geometry_encoding, _window_google_maps_geometry, _window_google_maps, _window_google;\n        return !!(((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_geometry = _window_google_maps.geometry) === null || _window_google_maps_geometry === void 0 ? void 0 : (_window_google_maps_geometry_encoding = _window_google_maps_geometry.encoding) === null || _window_google_maps_geometry_encoding === void 0 ? void 0 : _window_google_maps_geometry_encoding.decodePath) && typeof window.google.maps.geometry.encoding.decodePath === \"function\");\n    };\n    const getLocation = async (city)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject)=>{\n            geocoder.geocode({\n                address: city\n            }, (results, status)=>{\n                var _results__geometry, _results_;\n                if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                    console.error(\"Geocoding failed:\", status);\n                    reject(\"Could not find location for \" + city);\n                } else {\n                    resolve(results[0].geometry.location);\n                }\n            });\n        });\n    };\n    const getRouteColor = (dayIndex)=>{\n        const colors = [\n            \"#2196F3\",\n            \"#9C27B0\",\n            \"#795548\",\n            \"#FF9800\",\n            \"#009688\",\n            \"#E91E63\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#00BCD4\",\n            \"#4CAF50\" // Green\n        ];\n        return colors[dayIndex % colors.length];\n    };\n    const createMarker = (place)=>{\n        if (!place.location) {\n            console.warn(\"[MapComponent] Cannot create marker: place missing location\", place);\n            return null;\n        }\n        const pinElement = new window.google.maps.marker.PinElement({\n            background: \"#FF4444\",\n            borderColor: \"#CC0000\",\n            glyphColor: \"#FFFFFF\"\n        });\n        const marker = new google.maps.marker.AdvancedMarkerElement({\n            position: {\n                lat: place.location.latitude,\n                lng: place.location.longitude\n            },\n            title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n            content: pinElement.element,\n            gmpDraggable: false\n        });\n        marker.addListener(\"gmp-click\", ()=>{\n            var // Close any existing InfoWindow\n            _infoWindowRef_current;\n            (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n            window.currentInfoWindowMarker = {\n                markerId: place.id,\n                marker: marker\n            };\n            const content = createPlaceInfoWindowContent(place, place.id);\n            if (content && infoWindowRef.current && mapInstanceRef.current) {\n                const position = marker.position;\n                infoWindowRef.current.setContent(content);\n                infoWindowRef.current.setPosition(position);\n                infoWindowRef.current.open(mapInstanceRef.current);\n            }\n        });\n        return marker;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 663,\n                columnNumber: 13\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 bg-red-500 text-white p-2 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 665,\n                columnNumber: 17\n            }, undefined),\n            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"\n                }, void 0, false, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 671,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 670,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 662,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"ZknUq1jn/YMRuX1bt1H5cPENRT4=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU8sY0FBckJULDZDQUFBQSx1QkFBdUJpRSxLQUFLO1lBRTVCNUQsT0FBT21HLHVCQUF1QixHQUFHO2dCQUM3QnZCLFVBQVUzQixNQUFNNEIsRUFBRTtnQkFDbEJuQixRQUFRQTtZQUNaO1lBRUEsTUFBTW9DLFVBQVVNLDZCQUE2Qm5ELE9BQU9BLE1BQU00QixFQUFFO1lBQzVELElBQUlpQixXQUFXbkcsY0FBY1MsT0FBTyxJQUFJeEIsZUFBZXdCLE9BQU8sRUFBRTtnQkFDNUQsTUFBTXVGLFdBQVdqQyxPQUFPaUMsUUFBUTtnQkFDaENoRyxjQUFjUyxPQUFPLENBQUNpRyxVQUFVLENBQUNQO2dCQUNqQ25HLGNBQWNTLE9BQU8sQ0FBQ2tHLFdBQVcsQ0FBQ1g7Z0JBQ2xDaEcsY0FBY1MsT0FBTyxDQUFDbUcsSUFBSSxDQUFDM0gsZUFBZXdCLE9BQU87WUFDckQ7UUFDSjtRQUVBLE9BQU9zRDtJQUNYO0lBRUEscUJBQ0ksOERBQUNzSDtRQUFJQyxXQUFVOzswQkFDWCw4REFBQ0Q7Z0JBQUlFLEtBQUt2TTtnQkFBUXNNLFdBQVU7Ozs7OztZQUMzQmxNLHVCQUNHLDhEQUFDaU07Z0JBQUlDLFdBQVU7MEJBQ1ZsTTs7Ozs7O1lBR1JFLDJCQUNHLDhEQUFDK0w7Z0JBQUlDLFdBQVU7MEJBQ1gsNEVBQUNEO29CQUFJQyxXQUFVOzs7Ozs7Ozs7Ozs7Ozs7OztBQUtuQztHQS9sQk16TTtLQUFBQTtBQWltQk4sK0RBQWVBLFlBQVlBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9tYXAtY29tcG9uZW50LnRzeD8zNDBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhY2UsIHNhdmVkUGxhY2VzTWFuYWdlciwgc2VhcmNoUGxhY2VCeVRleHQgfSBmcm9tICdAL3V0aWxzL3BsYWNlcy11dGlscyc7XG5pbXBvcnQgeyBTRVNTSU9OX0NPTkZJRyB9IGZyb20gJy4uL3V0aWxzL3Nlc3Npb24tbWFuYWdlcic7XG5pbXBvcnQgeyB0cmF2ZWxJbmZvTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL3RyYXZlbC1pbmZvLXV0aWxzJztcblxuaW50ZXJmYWNlIE1hcENvbXBvbmVudFByb3BzIHtcbiAgICBjaXR5OiBzdHJpbmc7XG4gICAgYXBpS2V5OiBzdHJpbmc7XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgc2V0dXBNYXBJbnN0YW5jZTogKCkgPT4gdm9pZDtcbiAgICAgICAgY3VycmVudFNsaWRlOiBudW1iZXI7XG4gICAgICAgIGN1cnJlbnRJbmZvV2luZG93PzogZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdztcbiAgICAgICAgdXBkYXRlQ2Fyb3VzZWw6ICgpID0+IHZvaWQ7XG4gICAgICAgIG5leHRTbGlkZTogKCkgPT4gdm9pZDtcbiAgICAgICAgcHJldlNsaWRlOiAoKSA9PiB2b2lkO1xuICAgICAgICBnb1RvU2xpZGU6IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuICAgICAgICBnb29nbGU6IHR5cGVvZiBnb29nbGU7XG4gICAgICAgIHJlbW92ZVBsYWNlRnJvbU1hcD86ICh0aXRsZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgICAgICBjdXJyZW50SW5mb1dpbmRvd01hcmtlcj86IHtcbiAgICAgICAgICAgIG1hcmtlcklkOiBzdHJpbmc7XG4gICAgICAgICAgICBtYXJrZXI6IGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIGFkZFBsYWNlVG9NYXA/OiAocGxhY2U6IHsgXG4gICAgICAgICAgICBsYXRpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIGxvbmdpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICAgICAgcGxhY2U/OiBQbGFjZTtcbiAgICAgICAgfSkgPT4gdm9pZDtcbiAgICAgICAgY2xlYXJQbGFjZU1hcmtlcnM/OiAoKSA9PiB2b2lkO1xuICAgICAgICBzYXZlZFBsYWNlczogUGxhY2VbXTtcbiAgICAgICAgZ2V0U2F2ZWRQbGFjZXM/OiAoKSA9PiBQbGFjZVtdO1xuICAgIH1cbn1cblxuLy8gTW9kaWZ5IG1hcC1jb21wb25lbnQudHN4IHRvIGV4cG9zZSBhIHByb3BlciBnbG9iYWwgaW50ZXJmYWNlXG4vLyBBdCB0aGUgdG9wIG9mIGZpbGVcbmludGVyZmFjZSBTYXZlZFBsYWNlc01hbmFnZXIge1xuICAgIGFkZFBsYWNlOiAocGxhY2U6IFBsYWNlKSA9PiB2b2lkO1xuICAgIHJlbW92ZVBsYWNlOiAocGxhY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGdldFBsYWNlczogKCkgPT4gUGxhY2VbXTtcbiAgICBoYXNQbGFjZTogKHBsYWNlSWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcbn1cblxuLy8gRXhwb3NlIHR5cGUtc2FmZSBnbG9iYWwgbWV0aG9kc1xuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBzYXZlZFBsYWNlc01hbmFnZXI6IFNhdmVkUGxhY2VzTWFuYWdlcjtcbiAgICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBuYW1lc3BhY2UgZ29vZ2xlLm1hcHMge1xuICAgICAgICBpbnRlcmZhY2UgTWFya2VyTGlicmFyeSB7XG4gICAgICAgICAgICBBZHZhbmNlZE1hcmtlckVsZW1lbnQ6IHR5cGVvZiBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50O1xuICAgICAgICAgICAgUGluRWxlbWVudDogdHlwZW9mIGdvb2dsZS5tYXBzLm1hcmtlci5QaW5FbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzcGFjZSBnZW9tZXRyeSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UgZW5jb2Rpbmcge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlY29kZVBhdGgoZW5jb2RlZFBhdGg6IHN0cmluZyk6IGdvb2dsZS5tYXBzLkxhdExuZ1tdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmNvbnN0IE1hcENvbXBvbmVudDogUmVhY3QuRkM8TWFwQ29tcG9uZW50UHJvcHM+ID0gKHsgY2l0eSwgYXBpS2V5IH0pID0+IHtcbiAgICBjb25zdCBtYXBSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICAgIGNvbnN0IG1hcEluc3RhbmNlUmVmID0gdXNlUmVmPGdvb2dsZS5tYXBzLk1hcCB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFttYXAsIHNldE1hcF0gPSB1c2VTdGF0ZTxnb29nbGUubWFwcy5NYXAgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCBzY3JpcHRMb2FkZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGdlb21ldHJ5TG9hZGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBbc2VsZWN0ZWRQbGFjZSwgc2V0U2VsZWN0ZWRQbGFjZV0gPSB1c2VTdGF0ZTxQbGFjZSB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtzYXZlZFBsYWNlcywgc2V0U2F2ZWRQbGFjZXNdID0gdXNlU3RhdGU8TWFwPHN0cmluZywgUGxhY2U+PihuZXcgTWFwKCkpO1xuICAgIGNvbnN0IG1hcmtlcnNSZWYgPSB1c2VSZWY8TWFwPHN0cmluZywgZ29vZ2xlLm1hcHMubWFya2VyLkFkdmFuY2VkTWFya2VyRWxlbWVudD4+KG5ldyBNYXAoKSk7XG4gICAgY29uc3QgaW5mb1dpbmRvd1JlZiA9IHVzZVJlZjxnb29nbGUubWFwcy5JbmZvV2luZG93IHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW21hcmtlckNvdW50LCBzZXRNYXJrZXJDb3VudF0gPSB1c2VTdGF0ZSgwKTtcbiAgICAvLyBUcmFjayBhY3RpdmUgcm91dGVzIGJ5IGZyb21JZC10b0lkXG4gICAgY29uc3QgYWN0aXZlUm91dGVzUmVmID0gdXNlUmVmPE1hcDxzdHJpbmcsIGdvb2dsZS5tYXBzLlBvbHlsaW5lPj4obmV3IE1hcCgpKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghYXBpS2V5KSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbG9hZEdvb2dsZU1hcHNTY3JpcHQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAod2luZG93Lmdvb2dsZT8ubWFwcykge1xuICAgICAgICAgICAgICAgIHNldHVwTWFwSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNjcmlwdExvYWRlZFJlZi5jdXJyZW50ICYmICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHRbc3JjKj1cIm1hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanNcIl0nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBgaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT0ke2FwaUtleX0mbGlicmFyaWVzPXBsYWNlcyxtYXJrZXIsZ2VvbWV0cnkmdj1iZXRhJmNhbGxiYWNrPXNldHVwTWFwSW5zdGFuY2VgO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0TG9hZGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEluaXRpYWwgbWFwIHNldHVwIGFuZCBnZW9tZXRyeSBsaWJyYXJ5IGNoZWNrXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIHNldHVwTWFwSW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAoIW1hcFJlZi5jdXJyZW50IHx8IG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGNpdHkgcHJvcCBkaXJlY3RseSwgZmFsbGJhY2sgdG8gc2Vzc2lvbiBzdG9yYWdlIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRDaXR5ID0gY2l0eTtcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldENpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkRhdGEgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHNlc3Npb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENpdHkgPSBwYXJzZWQuY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0Q2l0eSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBjaXR5IHNwZWNpZmllZCcpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBhd2FpdCBnZXRMb2NhdGlvbih0YXJnZXRDaXR5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgd2luZG93Lmdvb2dsZS5tYXBzLk1hcChtYXBSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgICAgICB6b29tOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBsb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbWFwSWQ6ICcyZDYwNGFmMDRhN2M3ZmE4J1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFwSW5zdGFuY2VSZWYuY3VycmVudCA9IG1hcDtcbiAgICAgICAgICAgICAgICBzZXRNYXAobWFwKTtcbiAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBJbmZvV2luZG93XG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50ID0gbmV3IHdpbmRvdy5nb29nbGUubWFwcy5JbmZvV2luZG93KHtcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxPZmZzZXQ6IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMuU2l6ZSgwLCAtMzApXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZ2VvbWV0cnkgbGlicmFyeSBpcyBsb2FkZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNHZW9tZXRyeVJlYWR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnlMb2FkZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9sbCBmb3IgZ2VvbWV0cnkgbGlicmFyeVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGVja0dlb21ldHJ5ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzR2VvbWV0cnlSZWFkeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnlMb2FkZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0dlb21ldHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgaW50ZXJ2YWwgYWZ0ZXIgMTAgc2Vjb25kcyB0byBwcmV2ZW50IGluZmluaXRlIHBvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjbGVhckludGVydmFsKGNoZWNrR2VvbWV0cnkpLCAxMDAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nIHVwIG1hcDonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5zZXR1cE1hcEluc3RhbmNlID0gc2V0dXBNYXBJbnN0YW5jZTtcbiAgICAgICAgbG9hZEdvb2dsZU1hcHNTY3JpcHQoKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5zZXR1cE1hcEluc3RhbmNlO1xuICAgICAgICB9O1xuICAgIH0sIFthcGlLZXldKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghbWFwSW5zdGFuY2VSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHNldHVwTWFwRmVhdHVyZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGF3YWl0IGdldExvY2F0aW9uKGNpdHkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBtYXAgaW5zdGVhZCBvZiBjcmVhdGluZyBuZXcgb25lXG4gICAgICAgICAgICAgICAgbWFwSW5zdGFuY2VSZWYuY3VycmVudC5zZXRDZW50ZXIobG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIG1hcEluc3RhbmNlUmVmLmN1cnJlbnQuc2V0Wm9vbSgxMik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgbWFwIGZlYXR1cmVzOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNldHVwTWFwRmVhdHVyZXMoKTtcbiAgICB9LCBbY2l0eV0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFtYXApIHJldHVybjtcblxuICAgICAgICBjb25zdCBpbml0aWFsaXplTWFwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gV2FpdCBmb3IgbWFwIHRvIGJlIGlkbGUgYmVmb3JlIHJlc3RvcmluZyBtYXJrZXJzXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyT25jZShtYXAsICdpZGxlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc2F2ZWRQbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVzdG9yaW5nIG1hcmtlcnMgZm9yIHNhdmVkIHBsYWNlczonLCBzYXZlZFBsYWNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzYXZlZFBsYWNlcy5mb3JFYWNoKHBsYWNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2UubG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZFBsYWNlVG9NYXA/Lih7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogcGxhY2UubG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHBsYWNlLmxvY2F0aW9uLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnID8gcGxhY2UuZGlzcGxheU5hbWUgOiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2U6IHBsYWNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemVNYXAoKTtcbiAgICB9LCBbbWFwXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICB3aW5kb3cucmVtb3ZlUGxhY2VGcm9tTWFwID0gKHBsYWNlSWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlYnVnIC0gU3RhcnRpbmcgcmVtb3ZhbCBwcm9jZXNzIGZvciBwbGFjZUlkOicsIHBsYWNlSWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG1hcmtlcnNSZWYuY3VycmVudC5nZXQocGxhY2VJZCk7XG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgLSBGb3VuZCBtYXJrZXI6JywgbWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9XaW5kb3dSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKG1hcmtlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1JlZi5jdXJyZW50LmRlbGV0ZShwbGFjZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZWRQbGFjZXNNYW5hZ2VyLnJlbW92ZVBsYWNlKHBsYWNlSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWJ1ZyAtIEFmdGVyIHJlbW92YWwgbWFya2VyczonLCBbLi4ubWFya2Vyc1JlZi5jdXJyZW50LmVudHJpZXMoKV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgLSBTdWNjZXNzZnVsbHkgcmVtb3ZlZCBtYXJrZXIgYW5kIHBsYWNlOicsIHBsYWNlSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVidWcgLSBDb3VsZCBub3QgZmluZCBtYXJrZXIgZm9yIHBsYWNlSWQ6JywgcGxhY2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdEZWJ1ZyAtIEVycm9yIGR1cmluZyBtYXJrZXIgcmVtb3ZhbDonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZWRQbGFjZXNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZXM6IEFycmF5LmZyb20oc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy52YWx1ZXMoKSksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZFBsYWNlVG9NYXAgPSBhc3luYyAoZGF0YTogeyBcbiAgICAgICAgICAgIGxhdGl0dWRlOiBudW1iZXI7IFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7IFxuICAgICAgICAgICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgICAgICAgICBwbGFjZT86IFBsYWNlO1xuICAgICAgICB9KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlcklkID0gZGF0YS5wbGFjZT8uaWQgfHwgZGF0YS50aXRsZSB8fCBTdHJpbmcoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGluRWxlbWVudCA9IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMubWFya2VyLlBpbkVsZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiNGRjQ0NDRcIiwgIC8vIEJyaWdodCByZWRcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiI0NDMDAwMFwiLCAvLyBEYXJrZXIgcmVkIGJvcmRlclxuICAgICAgICAgICAgICAgICAgICBnbHlwaENvbG9yOiBcIiNGRkZGRkZcIiwgIC8vIFdoaXRlIGdseXBoIGZvciBiZXR0ZXIgY29udHJhc3RcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBtYXJrZXIgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlcnNSZWYuY3VycmVudC5oYXMobWFya2VySWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya2VyID0gbWFya2Vyc1JlZi5jdXJyZW50LmdldChtYXJrZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ01hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdNYXJrZXIubWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ01hcmtlci5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdNYXJrZXIuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNSZWYuY3VycmVudC5kZWxldGUobWFya2VySWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBkYXRhLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBkYXRhLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcGluRWxlbWVudC5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBnbXBEcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEucGxhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZWRQbGFjZXNNYW5hZ2VyLmFkZFBsYWNlKGRhdGEucGxhY2UpO1xuICAgICAgICAgICAgICAgICAgICBzZXRNYXJrZXJDb3VudChwcmV2ID0+IHByZXYgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2F2ZWRQbGFjZXMobmV3IE1hcChzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBtYXJrZXIgaXMgcHJvcGVybHkgYWRkZWQgdG8gdGhlIG1hcFxuICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBtYXBJbnN0YW5jZVJlZi5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdnbXAtY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSBhbnkgZXhpc3RpbmcgSW5mb1dpbmRvd1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50Py5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3VycmVudEluZm9XaW5kb3dNYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VySWQ6IG1hcmtlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlUGxhY2VJbmZvV2luZG93Q29udGVudChkYXRhLnBsYWNlLCBtYXJrZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCAmJiBpbmZvV2luZG93UmVmLmN1cnJlbnQgJiYgbWFwSW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbWFya2VyLnBvc2l0aW9uIGFzIGdvb2dsZS5tYXBzLkxhdExuZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5vcGVuKG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuc2V0KG1hcmtlcklkLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZWRQbGFjZXNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlczogQXJyYXkuZnJvbShzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBwbGFjZSBtYXJrZXI6JywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3cuZ2V0U2F2ZWRQbGFjZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlcygpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICB9LCBbbWFwSW5zdGFuY2VSZWYuY3VycmVudF0pOyAvLyBPbmx5IGRlcGVuZCBvbiB0aGUgbWFwIGluc3RhbmNlXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShzZXNzaW9uRGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFBsYWNlcyA9IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXJzZWQsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBY3RpdmU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzOiB1cGRhdGVkUGxhY2VzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBwbGFjZXMgdG8gc2Vzc2lvbjonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbc2F2ZWRQbGFjZXNdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgbWFwKSB7XG4gICAgICAgICAgICAgICAgd2luZG93Lmdvb2dsZT8ubWFwcz8uZXZlbnQ/LnRyaWdnZXIobWFwLCAncmVzaXplJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICB9O1xuICAgIH0sIFttYXBdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG4gICAgICAgIGlmIChzZXNzaW9uRGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHNlc3Npb25EYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnNhdmVkUGxhY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC5zYXZlZFBsYWNlcy5mb3JFYWNoKChwbGFjZTogUGxhY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzTWFuYWdlci5hZGRQbGFjZShwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NhdmVkUGxhY2VzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlczogQXJyYXkuZnJvbShzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy5zaXplXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgc2F2ZWQgcGxhY2VzIGZyb20gc2Vzc2lvbjonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIW1hcCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVBsYWNlc0NoYW5nZWQgPSBhc3luYyAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlID0gZXZlbnQgYXMgQ3VzdG9tRXZlbnQ8eyB0eXBlPzogc3RyaW5nOyBzb3VyY2VEYXlJZD86IHN0cmluZzsgfT47XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW01hcENvbXBvbmVudF0gUGxhY2VzIGNoYW5nZWQ6JywgZS5kZXRhaWwpO1xuXG4gICAgICAgICAgICAvLyBDbGVhciBleGlzdGluZyBtYXJrZXJzXG4gICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuY2xlYXIoKTtcblxuICAgICAgICAgICAgLy8gQWRkIG5ldyBtYXJrZXJzXG4gICAgICAgICAgICBjb25zdCBwbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG4gICAgICAgICAgICBwbGFjZXMuZm9yRWFjaChwbGFjZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IGNyZWF0ZU1hcmtlcihwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBtYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuc2V0KHBsYWNlLmlkLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BsYWNlcy1jaGFuZ2VkJywgaGFuZGxlUGxhY2VzQ2hhbmdlZCk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGFjZXMtY2hhbmdlZCcsIGhhbmRsZVBsYWNlc0NoYW5nZWQpO1xuICAgICAgICB9O1xuICAgIH0sIFttYXBdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghbWFwSW5zdGFuY2VSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVRyYXZlbEluZm9EaXNwbGF5ID0gYXN5bmMgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IGV2ZW50IGFzIEN1c3RvbUV2ZW50PHtmcm9tSWQ6IHN0cmluZywgdG9JZDogc3RyaW5nfT47XG4gICAgICAgICAgICBjb25zdCB7IGZyb21JZCwgdG9JZCB9ID0gZS5kZXRhaWw7XG4gICAgICAgICAgICBjb25zdCByb3V0ZUtleSA9IGAke2Zyb21JZH0tJHt0b0lkfWA7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIGV4aXN0aW5nIHJvdXRlIGlmIGFueVxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdSb3V0ZSA9IGFjdGl2ZVJvdXRlc1JlZi5jdXJyZW50LmdldChyb3V0ZUtleSk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3V0ZSkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nUm91dGUuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlc1JlZi5jdXJyZW50LmRlbGV0ZShyb3V0ZUtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZyb21QbGFjZSA9IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZUJ5SWQoZnJvbUlkKTtcbiAgICAgICAgICAgIGNvbnN0IHRvUGxhY2UgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VCeUlkKHRvSWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZnJvbVBsYWNlPy5kYXlJbmRleCAhPT0gdW5kZWZpbmVkICYmIHRvUGxhY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGdldFJvdXRlQ29sb3IoZnJvbVBsYWNlLmRheUluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IGF3YWl0IGRyYXdSb3V0ZShbZnJvbVBsYWNlLCB0b1BsYWNlXSwgcm91dGVLZXksIGNvbG9yKTtcbiAgICAgICAgICAgICAgICBpZiAocG9seWxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUm91dGVzUmVmLmN1cnJlbnQuc2V0KHJvdXRlS2V5LCBwb2x5bGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVRyYXZlbEluZm9IaWRlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IGV2ZW50IGFzIEN1c3RvbUV2ZW50PHtmcm9tSWQ6IHN0cmluZywgdG9JZDogc3RyaW5nfT47XG4gICAgICAgICAgICBjb25zdCB7IGZyb21JZCwgdG9JZCB9ID0gZS5kZXRhaWw7XG4gICAgICAgICAgICBjb25zdCByb3V0ZUtleSA9IGAke2Zyb21JZH0tJHt0b0lkfWA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlbW92ZSByb3V0ZSBmcm9tIG1hcCBhbmQgdHJhY2tpbmdcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gYWN0aXZlUm91dGVzUmVmLmN1cnJlbnQuZ2V0KHJvdXRlS2V5KTtcbiAgICAgICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgICAgICAgIHJvdXRlLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZXNSZWYuY3VycmVudC5kZWxldGUocm91dGVLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0cmF2ZWxpbmZvLWRpc3BsYXllZCcsIGhhbmRsZVRyYXZlbEluZm9EaXNwbGF5KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYXZlbGluZm8taGlkZGVuJywgaGFuZGxlVHJhdmVsSW5mb0hpZGUpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBhbGwgcm91dGVzIHdoZW4gY29tcG9uZW50IHVubW91bnRzXG4gICAgICAgICAgICBhY3RpdmVSb3V0ZXNSZWYuY3VycmVudC5mb3JFYWNoKHJvdXRlID0+IHJvdXRlLnNldE1hcChudWxsKSk7XG4gICAgICAgICAgICBhY3RpdmVSb3V0ZXNSZWYuY3VycmVudC5jbGVhcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhdmVsaW5mby1kaXNwbGF5ZWQnLCBoYW5kbGVUcmF2ZWxJbmZvRGlzcGxheSk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhdmVsaW5mby1oaWRkZW4nLCBoYW5kbGVUcmF2ZWxJbmZvSGlkZSk7XG4gICAgICAgIH07XG4gICAgfSwgW21hcEluc3RhbmNlUmVmLmN1cnJlbnRdKTtcblxuICAgIGNvbnN0IGRyYXdSb3V0ZSA9IGFzeW5jIChwbGFjZXM6IFBsYWNlW10sIHJvdXRlS2V5OiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFtNYXBDb21wb25lbnRdIERyYXdpbmcgcm91dGUgYmV0d2VlbjpgLCB7XG4gICAgICAgICAgICBmcm9tOiBwbGFjZXNbMF0/LmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgdG86IHBsYWNlc1sxXT8uZGlzcGxheU5hbWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFwbGFjZXMgfHwgcGxhY2VzLmxlbmd0aCAhPT0gMiB8fCAhbWFwSW5zdGFuY2VSZWYuY3VycmVudCB8fCAhaXNHZW9tZXRyeVJlYWR5KCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbTWFwQ29tcG9uZW50XSBOb3QgcmVhZHkgdG8gZHJhdyByb3V0ZTonLCB7XG4gICAgICAgICAgICAgICAgcGxhY2VzOiBwbGFjZXM/Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXBSZWFkeTogISFtYXBJbnN0YW5jZVJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5UmVhZHk6IGlzR2VvbWV0cnlSZWFkeSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtwbGFjZTEsIHBsYWNlMl0gPSBwbGFjZXM7XG4gICAgICAgIGlmICghcGxhY2UxLmxvY2F0aW9uIHx8ICFwbGFjZTIubG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW01hcENvbXBvbmVudF0gTWlzc2luZyBsb2NhdGlvbiBmb3IgcGxhY2U6JywgeyBcbiAgICAgICAgICAgICAgICBwbGFjZTFOYW1lOiBwbGFjZTEubmFtZSxcbiAgICAgICAgICAgICAgICBwbGFjZTJOYW1lOiBwbGFjZTIubmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRyYXZlbEluZm9NYW5hZ2VyLmdldFRyYXZlbEluZm8ocGxhY2UxLCBwbGFjZTIpO1xuICAgICAgICAgICAgaWYgKCFpbmZvIHx8ICFpbmZvLmxlZ1BvbHlsaW5lKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbTWFwQ29tcG9uZW50XSBObyByb3V0ZSBpbmZvIGF2YWlsYWJsZSBiZXR3ZWVuIHBsYWNlcycpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGdvb2dsZS5tYXBzLmdlb21ldHJ5LmVuY29kaW5nLmRlY29kZVBhdGgoaW5mby5sZWdQb2x5bGluZSk7XG4gICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IG5ldyBnb29nbGUubWFwcy5Qb2x5bGluZSh7XG4gICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eTowLjgsXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2VpZ2h0OiA1LFxuICAgICAgICAgICAgICAgIG1hcDogbWFwSW5zdGFuY2VSZWYuY3VycmVudFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBwb2x5bGluZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tNYXBDb21wb25lbnRdIEVycm9yIGRyYXdpbmcgcm91dGU6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGdldFBob3RvVXJsID0gKHBob3RvOiBnb29nbGUubWFwcy5wbGFjZXMuUGhvdG8sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIHBob3RvLmdldFVSST8uKCkgfHwgJyc7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVNsaWRlQ2hhbmdlID0gKF86IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAod2luZG93LmN1cnJlbnRTbGlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aW5kb3cuY3VycmVudFNsaWRlID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgY3JlYXRlUGxhY2VJbmZvV2luZG93Q29udGVudCA9IChwbGFjZTogUGxhY2UsIG1hcmtlcklkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RlYnVnIC0gQ3JlYXRpbmcgaW5mbyB3aW5kb3cgY29udGVudCBmb3IgbWFya2VySWQ6JywgbWFya2VySWQpO1xuICAgICAgICBjb25zdCBwaG90b1VybCA9IHBsYWNlLnBob3RvcyAmJiBwbGFjZS5waG90b3NbMF0gXG4gICAgICAgICAgICA/IGBodHRwczovL3BsYWNlcy5nb29nbGVhcGlzLmNvbS92MS8ke3BsYWNlLnBob3Rvc1swXS5uYW1lfS9tZWRpYT9tYXhIZWlnaHRQeD0yMDAmbWF4V2lkdGhQeD0zMDAma2V5PSR7YXBpS2V5fWBcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgY29uc3QgcGxhY2VUaXRsZSA9IHR5cGVvZiBwbGFjZS5kaXNwbGF5TmFtZSA9PT0gJ3N0cmluZycgPyBwbGFjZS5kaXNwbGF5TmFtZSA6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQ7XG5cbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiZy13aGl0ZSByb3VuZGVkLWxnIHNoYWRvdy1zbVwiIHN0eWxlPVwibWF4LXdpZHRoOiAzMDBweDtcIj5cbiAgICAgICAgICAgICAgICAke3Bob3RvVXJsID8gYFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiaGVpZ2h0OiAxNTBweDsgd2lkdGg6IDEwMCU7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7cGhvdG9Vcmx9XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiJHtwbGFjZVRpdGxlfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBvYmplY3QtZml0OiBjb3ZlcjsgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC41cmVtOyBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC41cmVtO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBgIDogJyd9XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicC0zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1zdGFydFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtZ3JheS05MDAgbWItMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7cGxhY2VUaXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAke3BsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGA8ZGl2IGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwIG1iLTFcIj4ke3BsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUudGV4dH08L2Rpdj5gXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAke3BsYWNlLmZvcm1hdHRlZEFkZHJlc3MgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGA8cCBjbGFzcz1cInRleHQtc20gdGV4dC1ncmF5LTUwMFwiPiR7cGxhY2UuZm9ybWF0dGVkQWRkcmVzc308L3A+YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ31cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH07XG5cbiAgICBjb25zdCBpc0dlb21ldHJ5UmVhZHkgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAhIShcbiAgICAgICAgICAgIHdpbmRvdy5nb29nbGU/Lm1hcHM/Lmdlb21ldHJ5Py5lbmNvZGluZz8uZGVjb2RlUGF0aCAmJlxuICAgICAgICAgICAgdHlwZW9mIHdpbmRvdy5nb29nbGUubWFwcy5nZW9tZXRyeS5lbmNvZGluZy5kZWNvZGVQYXRoID09PSAnZnVuY3Rpb24nXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldExvY2F0aW9uID0gYXN5bmMgKGNpdHk6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBnZW9jb2RlciA9IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Z29vZ2xlLm1hcHMuTGF0TG5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKFxuICAgICAgICAgICAgICAgIHsgYWRkcmVzczogY2l0eSB9LFxuICAgICAgICAgICAgICAgIChyZXN1bHRzLCBzdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gJ09LJyB8fCAhcmVzdWx0cz8uWzBdPy5nZW9tZXRyeT8ubG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dlb2NvZGluZyBmYWlsZWQ6Jywgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnQ291bGQgbm90IGZpbmQgbG9jYXRpb24gZm9yICcgKyBjaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Um91dGVDb2xvciA9IChkYXlJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAgICAgICAgICcjMjE5NkYzJywgLy8gQmx1ZVxuICAgICAgICAgICAgJyM5QzI3QjAnLCAvLyBQdXJwbGVcbiAgICAgICAgICAgICcjNzk1NTQ4JywgLy8gQnJvd25cbiAgICAgICAgICAgICcjRkY5ODAwJywgLy8gT3JhbmdlXG4gICAgICAgICAgICAnIzAwOTY4OCcsIC8vIFRlYWxcbiAgICAgICAgICAgICcjRTkxRTYzJywgLy8gUGlua1xuICAgICAgICAgICAgJyM2NzNBQjcnLCAvLyBEZWVwIFB1cnBsZVxuICAgICAgICAgICAgJyMzRjUxQjUnLCAvLyBJbmRpZ29cbiAgICAgICAgICAgICcjMDBCQ0Q0JywgLy8gQ3lhblxuICAgICAgICAgICAgJyM0Q0FGNTAnICAvLyBHcmVlblxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gY29sb3JzW2RheUluZGV4ICUgY29sb3JzLmxlbmd0aF07XG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWF0ZU1hcmtlciA9IChwbGFjZTogUGxhY2UpID0+IHtcbiAgICAgICAgaWYgKCFwbGFjZS5sb2NhdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbTWFwQ29tcG9uZW50XSBDYW5ub3QgY3JlYXRlIG1hcmtlcjogcGxhY2UgbWlzc2luZyBsb2NhdGlvbicsIHBsYWNlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGluRWxlbWVudCA9IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMubWFya2VyLlBpbkVsZW1lbnQoe1xuICAgICAgICAgICAgYmFja2dyb3VuZDogXCIjRkY0NDQ0XCIsICAvLyBCcmlnaHQgcmVkXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogXCIjQ0MwMDAwXCIsIC8vIERhcmtlciByZWQgYm9yZGVyXG4gICAgICAgICAgICBnbHlwaENvbG9yOiBcIiNGRkZGRkZcIiwgIC8vIFdoaXRlIGdseXBoIGZvciBiZXR0ZXIgY29udHJhc3RcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQoe1xuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICBsYXQ6IHBsYWNlLmxvY2F0aW9uLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgIGxuZzogcGxhY2UubG9jYXRpb24ubG9uZ2l0dWRlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGl0bGU6IHR5cGVvZiBwbGFjZS5kaXNwbGF5TmFtZSA9PT0gJ3N0cmluZycgPyBwbGFjZS5kaXNwbGF5TmFtZSA6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQsXG4gICAgICAgICAgICBjb250ZW50OiBwaW5FbGVtZW50LmVsZW1lbnQsXG4gICAgICAgICAgICBnbXBEcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICB9KTtcblxuICAgICAgICBtYXJrZXIuYWRkTGlzdGVuZXIoJ2dtcC1jbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIC8vIENsb3NlIGFueSBleGlzdGluZyBJbmZvV2luZG93XG4gICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQ/LmNsb3NlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5jdXJyZW50SW5mb1dpbmRvd01hcmtlciA9IHtcbiAgICAgICAgICAgICAgICBtYXJrZXJJZDogcGxhY2UuaWQsXG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjcmVhdGVQbGFjZUluZm9XaW5kb3dDb250ZW50KHBsYWNlLCBwbGFjZS5pZCk7XG4gICAgICAgICAgICBpZiAoY29udGVudCAmJiBpbmZvV2luZG93UmVmLmN1cnJlbnQgJiYgbWFwSW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbWFya2VyLnBvc2l0aW9uIGFzIGdvb2dsZS5tYXBzLkxhdExuZztcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5vcGVuKG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgcmVsYXRpdmVcIj5cbiAgICAgICAgICAgIDxkaXYgcmVmPXttYXBSZWZ9IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGxcIiAvPlxuICAgICAgICAgICAge2Vycm9yICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC0wIGxlZnQtMCByaWdodC0wIGJnLXJlZC01MDAgdGV4dC13aGl0ZSBwLTIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge2Vycm9yfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtpc0xvYWRpbmcgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBiZy1ncmF5LTEwMCBiZy1vcGFjaXR5LTc1XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZS1zcGluIHJvdW5kZWQtZnVsbCBoLTggdy04IGJvcmRlci1iLTIgYm9yZGVyLWdyYXktOTAwXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWFwQ29tcG9uZW50OyJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwic2F2ZWRQbGFjZXNNYW5hZ2VyIiwiU0VTU0lPTl9DT05GSUciLCJ0cmF2ZWxJbmZvTWFuYWdlciIsIk1hcENvbXBvbmVudCIsImNpdHkiLCJhcGlLZXkiLCJtYXBSZWYiLCJtYXBJbnN0YW5jZVJlZiIsIm1hcCIsInNldE1hcCIsImVycm9yIiwic2V0RXJyb3IiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJzY3JpcHRMb2FkZWRSZWYiLCJnZW9tZXRyeUxvYWRlZFJlZiIsInNlbGVjdGVkUGxhY2UiLCJzZXRTZWxlY3RlZFBsYWNlIiwic2F2ZWRQbGFjZXMiLCJzZXRTYXZlZFBsYWNlcyIsIk1hcCIsIm1hcmtlcnNSZWYiLCJpbmZvV2luZG93UmVmIiwibWFya2VyQ291bnQiLCJzZXRNYXJrZXJDb3VudCIsImFjdGl2ZVJvdXRlc1JlZiIsImxvYWRHb29nbGVNYXBzU2NyaXB0Iiwid2luZG93IiwiZ29vZ2xlIiwibWFwcyIsInNldHVwTWFwSW5zdGFuY2UiLCJjdXJyZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImFzeW5jIiwiZGVmZXIiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJ0YXJnZXRDaXR5Iiwic2Vzc2lvbkRhdGEiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJTVE9SQUdFX0tFWSIsInBhcnNlZCIsIkpTT04iLCJwYXJzZSIsImNvbnNvbGUiLCJsb2NhdGlvbiIsImdldExvY2F0aW9uIiwiem9vbSIsImNlbnRlciIsIm1hcElkIiwiSW5mb1dpbmRvdyIsIm1heFdpZHRoIiwicGl4ZWxPZmZzZXQiLCJTaXplIiwiaXNHZW9tZXRyeVJlYWR5IiwiY2hlY2tHZW9tZXRyeSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJzZXR1cE1hcEZlYXR1cmVzIiwic2V0Q2VudGVyIiwic2V0Wm9vbSIsImluaXRpYWxpemVNYXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsImV2ZW50IiwiYWRkTGlzdGVuZXJPbmNlIiwiZ2V0UGxhY2VzIiwibG9nIiwibGVuZ3RoIiwiZm9yRWFjaCIsInBsYWNlIiwiYWRkUGxhY2VUb01hcCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwidGl0bGUiLCJkaXNwbGF5TmFtZSIsInRleHQiLCJyZW1vdmVQbGFjZUZyb21NYXAiLCJwbGFjZUlkIiwibWFya2VyIiwiZ2V0IiwiY2xvc2UiLCJjbGVhckluc3RhbmNlTGlzdGVuZXJzIiwiZGVsZXRlIiwicmVtb3ZlUGxhY2UiLCJlbnRyaWVzIiwid2FybiIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsInBsYWNlcyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImNvdW50Iiwic2l6ZSIsImRhdGEiLCJtYXJrZXJJZCIsImlkIiwiU3RyaW5nIiwiRGF0ZSIsIm5vdyIsInBpbkVsZW1lbnQiLCJQaW5FbGVtZW50IiwiYmFja2dyb3VuZCIsImJvcmRlckNvbG9yIiwiZ2x5cGhDb2xvciIsImhhcyIsImV4aXN0aW5nTWFya2VyIiwiZWxlbWVudCIsInJlbW92ZSIsIkFkdmFuY2VkTWFya2VyRWxlbWVudCIsInBvc2l0aW9uIiwibGF0IiwibG5nIiwiY29udGVudCIsImdtcERyYWdnYWJsZSIsImFkZFBsYWNlIiwicHJldiIsImFkZExpc3RlbmVyIiwiY3VycmVudEluZm9XaW5kb3dNYXJrZXIiLCJjcmVhdGVQbGFjZUluZm9XaW5kb3dDb250ZW50Iiwic2V0Q29udGVudCIsInNldFBvc2l0aW9uIiwib3BlbiIsInNldCIsImVyciIsImdldFNhdmVkUGxhY2VzIiwidXBkYXRlZFBsYWNlcyIsInNlc3Npb25EYXRhV2l0aFVwZGF0ZWRQbGFjZXMiLCJsYXN0QWN0aXZlIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ0cmlnZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVQbGFjZXNDaGFuZ2VkIiwiZSIsImNsZWFyIiwiY3JlYXRlTWFya2VyIiwiaGFuZGxlVHJhdmVsSW5mb0Rpc3BsYXkiLCJmcm9tSWQiLCJ0b0lkIiwicm91dGVLZXkiLCJleGlzdGluZ1JvdXRlIiwiZnJvbVBsYWNlIiwiZ2V0UGxhY2VCeUlkIiwidG9QbGFjZSIsImRheUluZGV4IiwidW5kZWZpbmVkIiwiY29sb3IiLCJnZXRSb3V0ZUNvbG9yIiwicG9seWxpbmUiLCJkcmF3Um91dGUiLCJoYW5kbGVUcmF2ZWxJbmZvSGlkZSIsInJvdXRlIiwidG8iLCJtYXBSZWFkeSIsImdlb21ldHJ5UmVhZHkiLCJwbGFjZTEiLCJwbGFjZTIiLCJwbGFjZTFOYW1lIiwibmFtZSIsInBsYWNlMk5hbWUiLCJpbmZvIiwiZ2V0VHJhdmVsSW5mbyIsImxlZ1BvbHlsaW5lIiwicGF0aCIsImdlb21ldHJ5IiwiZW5jb2RpbmciLCJkZWNvZGVQYXRoIiwiUG9seWxpbmUiLCJzdHJva2VDb2xvciIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXZWlnaHQiLCJnZXRQaG90b1VybCIsInBob3RvIiwiaW5kZXgiLCJnZXRVUkkiLCJoYW5kbGVTbGlkZUNoYW5nZSIsIl8iLCJjdXJyZW50U2xpZGUiLCJwaG90b1VybCIsInBob3RvcyIsInBsYWNlVGl0bGUiLCJwcmltYXJ5VHlwZURpc3BsYXlOYW1lIiwiZm9ybWF0dGVkQWRkcmVzcyIsImdlb2NvZGVyIiwiR2VvY29kZXIiLCJyZWplY3QiLCJnZW9jb2RlIiwiYWRkcmVzcyIsInJlc3VsdHMiLCJzdGF0dXMiLCJjb2xvcnMiLCJkaXYiLCJjbGFzc05hbWUiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n"));

/***/ })

});