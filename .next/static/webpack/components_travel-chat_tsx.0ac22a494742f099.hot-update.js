"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_travel-chat_tsx",{

/***/ "./hooks/useTravelTools.ts":
/*!*********************************!*\
  !*** ./hooks/useTravelTools.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTravelTools: function() { return /* binding */ useTravelTools; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n\n\nfunction useTravelTools(param) {\n    let { currentDetails, setCurrentDetails, currentStage, onStageUpdate, userMetrics, append, savedPlaces } = param;\n    const [toolVisibility, setToolVisibility] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    // Helper function to update session storage\n    const updateSessionDetails = (updates)=>{\n        const session = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!session) return;\n        (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_1__.safeStorageOp)(()=>{\n            _utils_session_manager__WEBPACK_IMPORTED_MODULE_1__.storage === null || _utils_session_manager__WEBPACK_IMPORTED_MODULE_1__.storage === void 0 ? void 0 : _utils_session_manager__WEBPACK_IMPORTED_MODULE_1__.storage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify({\n                ...session,\n                ...updates,\n                lastActive: Date.now()\n            }));\n        }, undefined);\n    };\n    const handleToolUpdate = async (message)=>{\n        var _message_toolInvocations;\n        if (!((_message_toolInvocations = message.toolInvocations) === null || _message_toolInvocations === void 0 ? void 0 : _message_toolInvocations[0])) return;\n        const toolInvocation = message.toolInvocations[0];\n        const { toolCallId, result, toolName } = toolInvocation;\n        if (!result) return;\n        console.log(\"[useTravelTools] Processing tool:\", {\n            toolName,\n            toolCallId,\n            resultType: result.type,\n            props: result.props\n        });\n        // Handle different tool types\n        switch(result.type){\n            case \"budgetSelector\":\n                var _result_props;\n                // Only show selector, don't update anything yet\n                if (!((_result_props = result.props) === null || _result_props === void 0 ? void 0 : _result_props.currentBudget)) {\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: true\n                            }));\n                    }\n                    return;\n                }\n                // Update only when user has made a selection\n                if (result.props.currentBudget) {\n                    const updates = {\n                        budget: result.props.currentBudget\n                    };\n                    setCurrentDetails((prev)=>({\n                            ...prev,\n                            ...updates\n                        }));\n                    updateSessionDetails(updates);\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: false\n                            }));\n                    }\n                    await append({\n                        role: \"user\",\n                        content: \"I've set my budget to \".concat(result.props.currentBudget)\n                    });\n                }\n                break;\n            case \"preferenceSelector\":\n                var _result_props1;\n                // Only show selector, don't update anything yet\n                if (!((_result_props1 = result.props) === null || _result_props1 === void 0 ? void 0 : _result_props1.currentPreferences)) {\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: true\n                            }));\n                    }\n                    return;\n                }\n                // Update only when user has made a selection\n                if (result.props.currentPreferences) {\n                    const updates = {\n                        preferences: result.props.currentPreferences\n                    };\n                    setCurrentDetails((prev)=>({\n                            ...prev,\n                            ...updates\n                        }));\n                    updateSessionDetails(updates);\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: false\n                            }));\n                    }\n                    await append({\n                        role: \"user\",\n                        content: \"I've updated my preferences to: \".concat(result.props.currentPreferences.join(\", \"), \".\")\n                    });\n                }\n                break;\n            case \"datePicker\":\n                var _result_props2, _result_props3;\n                // Only show selector, don't update anything yet\n                if (!((_result_props2 = result.props) === null || _result_props2 === void 0 ? void 0 : _result_props2.startDate) || !((_result_props3 = result.props) === null || _result_props3 === void 0 ? void 0 : _result_props3.endDate)) {\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: true\n                            }));\n                    }\n                    return;\n                }\n                // Update only when user has made a selection\n                if (result.props.startDate && result.props.endDate) {\n                    const updates = {\n                        startDate: result.props.startDate,\n                        endDate: result.props.endDate\n                    };\n                    setCurrentDetails((prev)=>({\n                            ...prev,\n                            ...updates\n                        }));\n                    updateSessionDetails(updates);\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: false\n                            }));\n                    }\n                    await append({\n                        role: \"user\",\n                        content: \"I've changed my travel dates to \".concat(result.props.startDate, \" - \").concat(result.props.endDate, \".\")\n                    });\n                }\n                break;\n            case \"languageSelector\":\n                var _result_props4;\n                // Only show selector, don't update anything yet\n                if (!((_result_props4 = result.props) === null || _result_props4 === void 0 ? void 0 : _result_props4.currentLanguage)) {\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: true\n                            }));\n                    }\n                    return;\n                }\n                // Update only when user has made a selection\n                if (result.props.currentLanguage) {\n                    const updates = {\n                        language: result.props.currentLanguage\n                    };\n                    setCurrentDetails((prev)=>({\n                            ...prev,\n                            ...updates\n                        }));\n                    updateSessionDetails(updates);\n                    if (toolCallId) {\n                        setToolVisibility((prev)=>({\n                                ...prev,\n                                [toolCallId]: false\n                            }));\n                    }\n                    await append({\n                        role: \"user\",\n                        content: \"I've set my language preference to \".concat(result.props.currentLanguage, \".\")\n                    });\n                }\n                break;\n            case \"stageProgress\":\n                var _result_props5;\n                if ((_result_props5 = result.props) === null || _result_props5 === void 0 ? void 0 : _result_props5.nextStage) {\n                    onStageUpdate(result.props.nextStage);\n                }\n                break;\n            case \"savedPlacesList\":\n            case \"quickResponse\":\n                // Keep these tools visible\n                if (toolCallId) {\n                    setToolVisibility((prev)=>({\n                            ...prev,\n                            [toolCallId]: true\n                        }));\n                }\n                break;\n        }\n    };\n    return {\n        toolVisibility,\n        setToolVisibility,\n        handleToolUpdate\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useTravelTools.ts\n"));

/***/ })

});