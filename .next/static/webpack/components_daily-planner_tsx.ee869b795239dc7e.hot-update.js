"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_daily-planner_tsx",{

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: function() { return /* binding */ fetchPlaces; },\n/* harmony export */   filterUniquePlaces: function() { return /* binding */ filterUniquePlaces; },\n/* harmony export */   formatPrimaryType: function() { return /* binding */ formatPrimaryType; },\n/* harmony export */   getDisplayName: function() { return /* binding */ getDisplayName; },\n/* harmony export */   getPlaceTypesFromPreferences: function() { return /* binding */ getPlaceTypesFromPreferences; },\n/* harmony export */   metricsManager: function() { return /* binding */ metricsManager; },\n/* harmony export */   preferenceToPlaceTypes: function() { return /* binding */ preferenceToPlaceTypes; },\n/* harmony export */   savedPlacesManager: function() { return /* binding */ savedPlacesManager; },\n/* harmony export */   searchMultiplePlacesByText: function() { return /* binding */ searchMultiplePlacesByText; },\n/* harmony export */   searchPlaceByText: function() { return /* binding */ searchPlaceByText; }\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            var _preferenceToPlaceTypes_pref;\n            const availableTypes = ((_preferenceToPlaceTypes_pref = preferenceToPlaceTypes[pref]) === null || _preferenceToPlaceTypes_pref === void 0 ? void 0 : _preferenceToPlaceTypes_pref.filter((type)=>!usedTypes.has(type))) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    var _place_displayName;\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from sessionStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"object\" !== \"undefined\") {\n            const savedPlaces = sessionStorage.getItem(STORAGE_KEY);\n            if (savedPlaces) {\n                try {\n                    console.log(\"[savedPlacesManager] Raw saved places:\", savedPlaces);\n                    const parsedPlaces = JSON.parse(savedPlaces);\n                    console.log(\"[savedPlacesManager] Parsed places:\", parsedPlaces);\n                    if (Array.isArray(parsedPlaces)) {\n                        // Clear existing places before loading\n                        places.clear();\n                        parsedPlaces.forEach((place)=>{\n                            var _place_photos, _place_photos1;\n                            console.log(\"[savedPlacesManager] Processing place:\", {\n                                id: place.id,\n                                hasPhotos: Boolean(place.photos),\n                                photoCount: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.length,\n                                firstPhoto: (_place_photos1 = place.photos) === null || _place_photos1 === void 0 ? void 0 : _place_photos1[0]\n                            });\n                            if (place === null || place === void 0 ? void 0 : place.id) {\n                                places.set(place.id, place);\n                            }\n                        });\n                    }\n                } catch (error) {\n                    console.error(\"[savedPlacesManager] Error loading places:\", error);\n                }\n            }\n            initialized = true;\n        }\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place === null || place === void 0 ? void 0 : place.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        updatePlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place === null || place === void 0 ? void 0 : place.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        _persist () {\n            if (true) {\n                const placesArray = Array.from(places.values());\n                sessionStorage.setItem(STORAGE_KEY, JSON.stringify(placesArray));\n                // Update metrics\n                const session = metricsManager.get();\n                session.savedPlacesCount = places.size;\n                metricsManager.update(session);\n            }\n        },\n        _notifyChange () {\n            if (true) {\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(places.values()),\n                        count: places.size\n                    }\n                }));\n            }\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (true) {\n    savedPlacesManager.places = new Map();\n}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? \"different \".concat(searchText, \" in \").concat(cityName) : \"\".concat(searchText, \" \").concat(cityName);\n    console.log(\"[searchWithStrategy] Using \".concat(useAlternateSearch ? \"alternate\" : \"original\", \" search:\"), query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        var _data_places, _data_places__displayName;\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!((_data_places = data.places) === null || _data_places === void 0 ? void 0 : _data_places[0])) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: ((_data_places__displayName = data.places[0].displayName) === null || _data_places__displayName === void 0 ? void 0 : _data_places__displayName.text) || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        var _result_places;\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!(result === null || result === void 0 ? void 0 : (_result_places = result.places) === null || _result_places === void 0 ? void 0 : _result_places[0])) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (false) {}\n    const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n    if (!session) {\n        return initializeMetrics();\n    }\n    // Always ensure savedPlacesCount matches actual saved places\n    session.savedPlacesCount = savedPlacesManager.places.size;\n    return session;\n}\n// Update metrics in storage\nfunction updateMetrics(session) {\n    if (false) {}\n    try {\n        const storedSession = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!storedSession) return;\n        // Update only metrics-related fields\n        storedSession.totalPrompts = session.totalPrompts;\n        storedSession.stagePrompts = session.stagePrompts;\n        storedSession.savedPlacesCount = session.savedPlacesCount;\n        sessionStorage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(storedSession));\n    } catch (error) {\n        console.error(\"[Places] Error updating metrics:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    var _place_photos, _place_displayName;\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: (_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async function(searchText, location) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>{\n            var _place_displayName, _place_photos;\n            return {\n                id: place.id,\n                displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    }))) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            };\n        });\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async function(latitude, longitude, preferences) {\n    let maxResults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5, placeTypes = arguments.length > 4 ? arguments[4] : void 0;\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!(preferences === null || preferences === void 0 ? void 0 : preferences.length),\n            fromPlaceTypes: !!(placeTypes === null || placeTypes === void 0 ? void 0 : placeTypes.length)\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>{\n                        var _place_displayName, _place_photos;\n                        return {\n                            id: place.id,\n                            displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                }))) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        };\n                    });\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n"));

/***/ })

});