"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_travel-chat_tsx",{

/***/ "./hooks/useTravelChat.ts":
/*!********************************!*\
  !*** ./hooks/useTravelChat.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTravelChat: function() { return /* binding */ useTravelChat; }\n/* harmony export */ });\n/* harmony import */ var ai_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ai/react */ \"./node_modules/ai/react/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/stage-manager */ \"./managers/stage-manager.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nfunction useTravelChat(param) {\n    let { currentDetails, savedPlaces: initialSavedPlaces, currentStage, metrics, onStageUpdate } = param;\n    var _currentSavedPlaces_filter;\n    const quickResponseInProgress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [mainChatMessages, setMainChatMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [showSessionWarning, setShowSessionWarning] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showPremiumModal, setShowPremiumModal] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [premiumModalState, setPremiumModalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    // Check if within stage limit\n    const isWithinStageLimit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.checkInputLimits)(currentStage).withinStageLimit;\n    }, [\n        currentStage\n    ]);\n    // Premium stage check\n    const checkPremiumStage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (currentStage === 3 && !metrics.isPaid && !isWithinStageLimit) {\n            setShowPremiumModal(true);\n            return false;\n        }\n        return true;\n    }, [\n        currentStage,\n        metrics.isPaid,\n        isWithinStageLimit\n    ]);\n    // Handle missing session\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.getStoredSession)()) {\n            router.push(\"/travel-form\");\n        }\n    }, [\n        router\n    ]);\n    // Session check effect\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const checkSession = ()=>{\n            const { isValid, shouldWarn } = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.checkSessionWithWarning)();\n            if (!isValid) {\n                (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.handleSessionExpiry)();\n                return;\n            }\n            if (shouldWarn) {\n                setShowSessionWarning(true);\n            }\n            return isValid;\n        };\n        const interval = setInterval(checkSession, 60000);\n        return ()=>clearInterval(interval);\n    }, []);\n    // Simply use savedPlacesManager directly\n    const currentSavedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_1__.savedPlacesManager.getPlaces();\n    // console.log('[useTravelChat] Current saved places:', currentSavedPlaces.map(p => ({\n    //   id: p.id,\n    //   photos: p.photos\n    // })));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const handlePlacesChanged = ()=>{\n            // Force re-render when places change\n            setMainChatMessages((prev)=>[\n                    ...prev\n                ]);\n        };\n        window.addEventListener(\"savedPlacesChanged\", handlePlacesChanged);\n        return ()=>window.removeEventListener(\"savedPlacesChanged\", handlePlacesChanged);\n    }, []);\n    const mainChat = (0,ai_react__WEBPACK_IMPORTED_MODULE_5__.useChat)({\n        api: \"/api/chat\",\n        id: _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY,\n        body: {\n            currentDetails,\n            destination: currentDetails.destination,\n            savedPlaces: (currentSavedPlaces === null || currentSavedPlaces === void 0 ? void 0 : (_currentSavedPlaces_filter = currentSavedPlaces.filter((place)=>place && place.id && place.displayName)) === null || _currentSavedPlaces_filter === void 0 ? void 0 : _currentSavedPlaces_filter.map((place)=>({\n                    id: place.id,\n                    displayName: place.displayName,\n                    formattedAddress: place.formattedAddress,\n                    location: place.location,\n                    primaryType: place.primaryType,\n                    primaryTypeDisplayName: place.primaryTypeDisplayName,\n                    photos: place.photos || []\n                }))) || [],\n            currentStage,\n            metrics: {\n                ...metrics,\n                destination: currentDetails.destination // Ensure destination is in metrics\n            }\n        },\n        onError: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((error)=>{\n            console.error(\"[MainChat] Error:\", error);\n            console.error(\"[MainChat] Current state:\", {\n                currentDetails,\n                savedPlaces: currentSavedPlaces === null || currentSavedPlaces === void 0 ? void 0 : currentSavedPlaces.map((p)=>{\n                    var _p_photos;\n                    return {\n                        id: p === null || p === void 0 ? void 0 : p.id,\n                        displayName: p === null || p === void 0 ? void 0 : p.displayName,\n                        photos: p === null || p === void 0 ? void 0 : (_p_photos = p.photos) === null || _p_photos === void 0 ? void 0 : _p_photos.length\n                    };\n                }),\n                currentStage,\n                metrics\n            });\n            quickResponseInProgress.current = false;\n        }, [\n            currentDetails,\n            currentSavedPlaces,\n            currentStage,\n            metrics\n        ]),\n        onFinish: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (message)=>{\n            var _message_content;\n            // Only trigger quick response for complete assistant messages\n            if (message.role !== \"assistant\" || !((_message_content = message.content) === null || _message_content === void 0 ? void 0 : _message_content.trim())) return;\n            // Prevent multiple quick response triggers\n            if (quickResponseInProgress.current) return;\n            // If it's a limit message, don't trigger quick response\n            if (message.content.includes(\"You've reached the maximum number of places\")) {\n                quickResponseInProgress.current = false;\n                return;\n            }\n            quickResponseInProgress.current = true;\n            try {\n                // Reset previous messages to ensure clean state\n                await quickResponseChat.reload();\n                // Add the new message\n                await quickResponseChat.append(message);\n            } catch (error) {\n                // console.error('[QuickResponse] Error triggering quick response:', error);\n                quickResponseInProgress.current = false;\n            }\n        }, [])\n    });\n    const quickResponseChat = (0,ai_react__WEBPACK_IMPORTED_MODULE_5__.useChat)({\n        api: \"/api/chat/quick-response\",\n        id: _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY,\n        body: {\n            currentDetails,\n            savedPlaces: currentSavedPlaces,\n            currentStage,\n            metrics\n        },\n        onFinish: (message)=>{\n            var _message_toolInvocations;\n            // Keep loading until we have valid responses\n            const hasValidResponses = message === null || message === void 0 ? void 0 : (_message_toolInvocations = message.toolInvocations) === null || _message_toolInvocations === void 0 ? void 0 : _message_toolInvocations.some((t)=>{\n                var _t_result_props_responses, _t_result_props, _t_result;\n                return t.toolName === \"quickResponse\" && t.state === \"result\" && ((_t_result = t.result) === null || _t_result === void 0 ? void 0 : (_t_result_props = _t_result.props) === null || _t_result_props === void 0 ? void 0 : (_t_result_props_responses = _t_result_props.responses) === null || _t_result_props_responses === void 0 ? void 0 : _t_result_props_responses.length) > 0;\n            });\n            if (!hasValidResponses) {\n                // console.log('[QuickResponse] No valid responses in finished message');\n                return;\n            }\n            quickResponseInProgress.current = false;\n        },\n        onError: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((error)=>{\n            // console.error('[QuickResponse] Error:', error);\n            quickResponseInProgress.current = false;\n        }, [])\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const mappedMessages = mainChat.messages.map((msg)=>({\n                ...msg,\n                role: msg.role === \"data\" ? \"system\" : msg.role\n            }));\n        setMainChatMessages(mappedMessages);\n    }, [\n        mainChat.messages\n    ]);\n    const quickResponses = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const messages = quickResponseChat.messages;\n        if (messages.length < 2) {\n            // console.log('[QuickResponse] Waiting for API response...');\n            return [];\n        }\n        const apiResponse = messages[messages.length - 1];\n        // console.log('[QuickResponse] Processing API response:', {\n        //     messageId: apiResponse.id,\n        //     hasToolInvocations: !!apiResponse.toolInvocations,\n        //     toolInvocations: apiResponse.toolInvocations?.map(t => ({\n        //         name: t.toolName,\n        //         state: t.state\n        //     }))\n        // });\n        function extractQuickResponses(message) {\n            var _message_toolInvocations;\n            const quickResponseInvocation = (_message_toolInvocations = message.toolInvocations) === null || _message_toolInvocations === void 0 ? void 0 : _message_toolInvocations.find((t)=>t.toolName === \"quickResponse\" && t.state === \"result\");\n            if (!quickResponseInvocation || !(\"result\" in quickResponseInvocation)) {\n                // console.log('[QuickResponse] No valid responses found in API response');\n                return [];\n            }\n            const responses = quickResponseInvocation.result.props.responses;\n            if (responses.length > 0) {\n                // console.log('[QuickResponse] Got valid responses:', responses);\n                return responses;\n            }\n            // console.log('[QuickResponse] Empty responses array');\n            return [];\n        }\n        return extractQuickResponses(apiResponse);\n    }, [\n        quickResponseChat.messages\n    ]);\n    // Check stage progression in messages\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const lastMessage = mainChat.messages[mainChat.messages.length - 1];\n        if ((lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.role) === \"assistant\" && lastMessage.toolInvocations) {\n            lastMessage.toolInvocations.forEach((toolInvocation)=>{\n                if (toolInvocation.toolName === \"stageProgress\" && \"result\" in toolInvocation) {\n                    const result = toolInvocation.result;\n                    // Check if trying to advance to stage 4\n                    if (result.props.nextStage === 4 && !metrics.isPaid) {\n                        setShowPremiumModal(true);\n                        return;\n                    }\n                    if ((0,_managers_stage_manager__WEBPACK_IMPORTED_MODULE_2__.validateStageProgression)(currentStage, result.props.nextStage, currentDetails)) {\n                        onStageUpdate === null || onStageUpdate === void 0 ? void 0 : onStageUpdate(result.props.nextStage);\n                    }\n                }\n            });\n        }\n    }, [\n        mainChat.messages,\n        onStageUpdate,\n        currentStage,\n        currentDetails,\n        metrics.isPaid\n    ]);\n    // Stage progression validation and handling\n    const handleStageProgression = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((nextStage)=>{\n        const { canProgress, missingRequirements, upgradeRequired } = (0,_managers_stage_manager__WEBPACK_IMPORTED_MODULE_2__.validateStageProgression)(currentStage, nextStage, currentDetails);\n        if (canProgress) {\n            console.log(\"[Stage Progression] Moving to stage \".concat(nextStage));\n            if (upgradeRequired) {\n                console.log(\"[Stage Progression] Upgrade required for stage progression\");\n            // You can add any upgrade-specific logic here\n            }\n            if (onStageUpdate) {\n                onStageUpdate(nextStage);\n            }\n            return {\n                type: \"stageProgress\",\n                props: {\n                    nextStage,\n                    reason: \"Stage requirements met\",\n                    criteria: missingRequirements\n                }\n            };\n        }\n        return {\n            type: \"stageProgress\",\n            props: {\n                nextStage: currentStage,\n                reason: \"Stage requirements not met\",\n                criteria: missingRequirements\n            }\n        };\n    }, [\n        currentStage,\n        currentDetails,\n        onStageUpdate\n    ]);\n    // Wrap append to include metrics update\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (message, options)=>{\n        // Only increment metrics for user messages and not system messages\n        const shouldIncrement = message.role === \"user\";\n        const updatedMetrics = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.updateStoredMetrics)(currentStage, shouldIncrement);\n        // Append message with latest metrics\n        await mainChat.append(message, {\n            ...options,\n            body: {\n                ...options === null || options === void 0 ? void 0 : options.body,\n                metrics: updatedMetrics\n            }\n        });\n    }, [\n        mainChat,\n        currentStage\n    ]);\n    return {\n        ...mainChat,\n        messages: mainChatMessages,\n        quickResponses,\n        isQuickResponseLoading: quickResponseInProgress.current,\n        handleStageProgression,\n        showSessionWarning,\n        setShowSessionWarning,\n        isWithinStageLimit,\n        showPremiumModal,\n        setShowPremiumModal,\n        premiumModalState,\n        setPremiumModalState,\n        checkPremiumStage,\n        append\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VUcmF2ZWxDaGF0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFtQztBQUN1QztBQUVSO0FBQ2lCO0FBRzhFO0FBQ3pIO0FBa0JqQyxTQUFTZSxjQUFjLEtBTVQ7UUFOUyxFQUM1QkMsY0FBYyxFQUNkQyxhQUFhQyxrQkFBa0IsRUFDL0JDLFlBQVksRUFDWkMsT0FBTyxFQUNQQyxhQUFhLEVBQ00sR0FOUztRQTRFWEM7SUFyRWpCLE1BQU1DLDBCQUEwQnJCLDZDQUFNQSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQ3NCLGtCQUFrQkMsb0JBQW9CLEdBQUdyQiwrQ0FBUUEsQ0FBaUIsRUFBRTtJQUMzRSxNQUFNLENBQUNzQixvQkFBb0JDLHNCQUFzQixHQUFHdkIsK0NBQVFBLENBQUM7SUFDN0QsTUFBTSxDQUFDd0Isa0JBQWtCQyxvQkFBb0IsR0FBR3pCLCtDQUFRQSxDQUFDO0lBQ3pELE1BQU0sQ0FBQzBCLG1CQUFtQkMscUJBQXFCLEdBQUczQiwrQ0FBUUEsQ0FBQztJQUMzRCxNQUFNNEIsU0FBU2xCLHNEQUFTQTtJQUV4Qiw4QkFBOEI7SUFDOUIsTUFBTW1CLHFCQUFxQjVCLDhDQUFPQSxDQUFDO1FBQ2pDLE9BQU9RLHdFQUFnQkEsQ0FBQ00sY0FBY2UsZ0JBQWdCO0lBQ3hELEdBQUc7UUFBQ2Y7S0FBYTtJQUVqQixzQkFBc0I7SUFDdEIsTUFBTWdCLG9CQUFvQmxDLGtEQUFXQSxDQUFDO1FBQ3BDLElBQUlrQixpQkFBaUIsS0FBSyxDQUFDQyxRQUFRZ0IsTUFBTSxJQUFJLENBQUNILG9CQUFvQjtZQUNoRUosb0JBQW9CO1lBQ3BCLE9BQU87UUFDVDtRQUNBLE9BQU87SUFDVCxHQUFHO1FBQUNWO1FBQWNDLFFBQVFnQixNQUFNO1FBQUVIO0tBQW1CO0lBRXJELHlCQUF5QjtJQUN6QjlCLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSSxDQUFDTSx3RUFBZ0JBLElBQUk7WUFDdkJ1QixPQUFPSyxJQUFJLENBQUM7UUFDZDtJQUNGLEdBQUc7UUFBQ0w7S0FBTztJQUVYLHVCQUF1QjtJQUN2QjdCLGdEQUFTQSxDQUFDO1FBQ1IsTUFBTW1DLGVBQWU7WUFDbkIsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRSxHQUFHaEMsK0VBQXVCQTtZQUN2RCxJQUFJLENBQUMrQixTQUFTO2dCQUNaNUIsMkVBQW1CQTtnQkFDbkI7WUFDRjtZQUNBLElBQUk2QixZQUFZO2dCQUNkYixzQkFBc0I7WUFDeEI7WUFDQSxPQUFPWTtRQUNUO1FBRUEsTUFBTUUsV0FBV0MsWUFBWUosY0FBYztRQUMzQyxPQUFPLElBQU1LLGNBQWNGO0lBQzdCLEdBQUcsRUFBRTtJQUVMLHlDQUF5QztJQUN6QyxNQUFNbkIscUJBQXFCaEIsbUVBQWtCQSxDQUFDc0MsU0FBUztJQUN2RCxzRkFBc0Y7SUFDdEYsY0FBYztJQUNkLHFCQUFxQjtJQUNyQixRQUFRO0lBRVJ6QyxnREFBU0EsQ0FBQztRQUNSLE1BQU0wQyxzQkFBc0I7WUFDMUIscUNBQXFDO1lBQ3JDcEIsb0JBQW9CcUIsQ0FBQUEsT0FBUTt1QkFBSUE7aUJBQUs7UUFDdkM7UUFFQUMsT0FBT0MsZ0JBQWdCLENBQUMsc0JBQXNCSDtRQUM5QyxPQUFPLElBQU1FLE9BQU9FLG1CQUFtQixDQUFDLHNCQUFzQko7SUFDaEUsR0FBRyxFQUFFO0lBRUwsTUFBTUssV0FBV2xELGlEQUFPQSxDQUFDO1FBQ3ZCbUQsS0FBSztRQUNMQyxJQUFJMUMsa0VBQWNBLENBQUMyQyxXQUFXO1FBQzlCQyxNQUFNO1lBQ0p0QztZQUNBdUMsYUFBYXZDLGVBQWV1QyxXQUFXO1lBQ3ZDdEMsYUFBYUssQ0FBQUEsK0JBQUFBLDBDQUFBQSw2QkFBQUEsbUJBQ1RrQyxNQUFNLENBQUNDLENBQUFBLFFBQVNBLFNBQVNBLE1BQU1MLEVBQUUsSUFBSUssTUFBTUMsV0FBVyxlQUQ3Q3BDLGlEQUFBQSwyQkFFVHFDLEdBQUcsQ0FBQ0YsQ0FBQUEsUUFBVTtvQkFDZEwsSUFBSUssTUFBTUwsRUFBRTtvQkFDWk0sYUFBYUQsTUFBTUMsV0FBVztvQkFDOUJFLGtCQUFrQkgsTUFBTUcsZ0JBQWdCO29CQUN4Q0MsVUFBVUosTUFBTUksUUFBUTtvQkFDeEJDLGFBQWFMLE1BQU1LLFdBQVc7b0JBQzlCQyx3QkFBd0JOLE1BQU1NLHNCQUFzQjtvQkFDcERDLFFBQVFQLE1BQU1PLE1BQU0sSUFBSSxFQUFFO2dCQUM1QixRQUFPLEVBQUU7WUFDWDdDO1lBQ0FDLFNBQVM7Z0JBQ1AsR0FBR0EsT0FBTztnQkFDVm1DLGFBQWF2QyxlQUFldUMsV0FBVyxDQUFDLG1DQUFtQztZQUM3RTtRQUNGO1FBQ0FVLFNBQVNoRSxrREFBV0EsQ0FBQyxDQUFDaUU7WUFDcEJDLFFBQVFELEtBQUssQ0FBQyxxQkFBcUJBO1lBQ25DQyxRQUFRRCxLQUFLLENBQUMsNkJBQTZCO2dCQUN6Q2xEO2dCQUNBQyxXQUFXLEVBQUVLLCtCQUFBQSx5Q0FBQUEsbUJBQW9CcUMsR0FBRyxDQUFDUyxDQUFBQTt3QkFHM0JBOzJCQUhpQzt3QkFDekNoQixFQUFFLEVBQUVnQixjQUFBQSx3QkFBQUEsRUFBR2hCLEVBQUU7d0JBQ1RNLFdBQVcsRUFBRVUsY0FBQUEsd0JBQUFBLEVBQUdWLFdBQVc7d0JBQzNCTSxNQUFNLEVBQUVJLGNBQUFBLHlCQUFBQSxZQUFBQSxFQUFHSixNQUFNLGNBQVRJLGdDQUFBQSxVQUFXQyxNQUFNO29CQUMzQjs7Z0JBQ0FsRDtnQkFDQUM7WUFDRjtZQUNBRyx3QkFBd0IrQyxPQUFPLEdBQUc7UUFDcEMsR0FBRztZQUFDdEQ7WUFBZ0JNO1lBQW9CSDtZQUFjQztTQUFRO1FBQzlEbUQsVUFBVXRFLGtEQUFXQSxDQUFDLE9BQU91RTtnQkFFVUE7WUFEckMsOERBQThEO1lBQzlELElBQUlBLFFBQVFDLElBQUksS0FBSyxlQUFlLEdBQUNELG1CQUFBQSxRQUFRRSxPQUFPLGNBQWZGLHVDQUFBQSxpQkFBaUJHLElBQUksS0FBSTtZQUU5RCwyQ0FBMkM7WUFDM0MsSUFBSXBELHdCQUF3QitDLE9BQU8sRUFBRTtZQUVyQyx3REFBd0Q7WUFDeEQsSUFBSUUsUUFBUUUsT0FBTyxDQUFDRSxRQUFRLENBQUMsZ0RBQWdEO2dCQUMzRXJELHdCQUF3QitDLE9BQU8sR0FBRztnQkFDbEM7WUFDRjtZQUVBL0Msd0JBQXdCK0MsT0FBTyxHQUFHO1lBRWxDLElBQUk7Z0JBQ0YsZ0RBQWdEO2dCQUNoRCxNQUFNTyxrQkFBa0JDLE1BQU07Z0JBQzlCLHNCQUFzQjtnQkFDdEIsTUFBTUQsa0JBQWtCRSxNQUFNLENBQUNQO1lBQ2pDLEVBQUUsT0FBT04sT0FBTztnQkFDZCw0RUFBNEU7Z0JBQzVFM0Msd0JBQXdCK0MsT0FBTyxHQUFHO1lBQ3BDO1FBQ0YsR0FBRyxFQUFFO0lBQ1A7SUFFQSxNQUFNTyxvQkFBb0I3RSxpREFBT0EsQ0FBQztRQUNoQ21ELEtBQUs7UUFDTEMsSUFBSTFDLGtFQUFjQSxDQUFDMkMsV0FBVztRQUM5QkMsTUFBTTtZQUNKdEM7WUFDQUMsYUFBYUs7WUFDYkg7WUFDQUM7UUFDRjtRQUNBbUQsVUFBVSxDQUFDQztnQkFFaUJBO1lBRDFCLDZDQUE2QztZQUM3QyxNQUFNUSxvQkFBb0JSLG9CQUFBQSwrQkFBQUEsMkJBQUFBLFFBQVNTLGVBQWUsY0FBeEJULCtDQUFBQSx5QkFBMEJVLElBQUksQ0FDdERDLENBQUFBO29CQUVBQSwyQkFBQUEsaUJBQUFBO3VCQUZLQSxFQUFFQyxRQUFRLEtBQUssbUJBQ3BCRCxFQUFFRSxLQUFLLEtBQUssWUFDWkYsRUFBQUEsWUFBQUEsRUFBRUcsTUFBTSxjQUFSSCxpQ0FBQUEsa0JBQUFBLFVBQVVJLEtBQUssY0FBZkosdUNBQUFBLDRCQUFBQSxnQkFBaUJLLFNBQVMsY0FBMUJMLGdEQUFBQSwwQkFBNEJkLE1BQU0sSUFBRzs7WUFFdkMsSUFBSSxDQUFDVyxtQkFBbUI7Z0JBQ3RCLHlFQUF5RTtnQkFDekU7WUFDRjtZQUNBekQsd0JBQXdCK0MsT0FBTyxHQUFHO1FBQ3BDO1FBQ0FMLFNBQVNoRSxrREFBV0EsQ0FBQyxDQUFDaUU7WUFDcEIsa0RBQWtEO1lBQ2xEM0Msd0JBQXdCK0MsT0FBTyxHQUFHO1FBQ3BDLEdBQUcsRUFBRTtJQUNQO0lBRUFuRSxnREFBU0EsQ0FBQztRQUNSLE1BQU1zRixpQkFBaUJ2QyxTQUFTd0MsUUFBUSxDQUFDL0IsR0FBRyxDQUFDZ0MsQ0FBQUEsTUFBUTtnQkFDbkQsR0FBR0EsR0FBRztnQkFDTmxCLE1BQU1rQixJQUFJbEIsSUFBSSxLQUFLLFNBQVMsV0FBV2tCLElBQUlsQixJQUFJO1lBQ2pEO1FBRUFoRCxvQkFBb0JnRTtJQUN0QixHQUFHO1FBQUN2QyxTQUFTd0MsUUFBUTtLQUFDO0lBRXRCLE1BQU1FLGlCQUFpQnZGLDhDQUFPQSxDQUFDO1FBQzdCLE1BQU1xRixXQUFXYixrQkFBa0JhLFFBQVE7UUFFM0MsSUFBSUEsU0FBU3JCLE1BQU0sR0FBRyxHQUFHO1lBQ3JCLDhEQUE4RDtZQUM5RCxPQUFPLEVBQUU7UUFDYjtRQUVBLE1BQU13QixjQUFjSCxRQUFRLENBQUNBLFNBQVNyQixNQUFNLEdBQUcsRUFBRTtRQUVqRCw0REFBNEQ7UUFDNUQsaUNBQWlDO1FBQ2pDLHlEQUF5RDtRQUN6RCxnRUFBZ0U7UUFDaEUsNEJBQTRCO1FBQzVCLHlCQUF5QjtRQUN6QixVQUFVO1FBQ1YsTUFBTTtRQUVOLFNBQVN5QixzQkFBc0J0QixPQUFrQjtnQkFDZkE7WUFBaEMsTUFBTXVCLDJCQUEwQnZCLDJCQUFBQSxRQUFRUyxlQUFlLGNBQXZCVCwrQ0FBQUEseUJBQXlCd0IsSUFBSSxDQUMzRGIsQ0FBQUEsSUFBS0EsRUFBRUMsUUFBUSxLQUFLLG1CQUFtQkQsRUFBRUUsS0FBSyxLQUFLO1lBR3JELElBQUksQ0FBQ1UsMkJBQTJCLENBQUUsYUFBWUEsdUJBQXNCLEdBQUk7Z0JBQ3BFLDJFQUEyRTtnQkFDM0UsT0FBTyxFQUFFO1lBQ2I7WUFFRixNQUFNUCxZQUFZTyx3QkFBd0JULE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxTQUFTO1lBQ2hFLElBQUlBLFVBQVVuQixNQUFNLEdBQUcsR0FBRztnQkFDcEIsa0VBQWtFO2dCQUNsRSxPQUFPbUI7WUFDWDtZQUVBLHdEQUF3RDtZQUN4RCxPQUFPLEVBQUU7UUFDWDtRQUVBLE9BQU9NLHNCQUFzQkQ7SUFDakMsR0FBRztRQUFDaEIsa0JBQWtCYSxRQUFRO0tBQUM7SUFFN0Isc0NBQXNDO0lBQ3RDdkYsZ0RBQVNBLENBQUM7UUFDUixNQUFNOEYsY0FBYy9DLFNBQVN3QyxRQUFRLENBQUN4QyxTQUFTd0MsUUFBUSxDQUFDckIsTUFBTSxHQUFHLEVBQUU7UUFDbkUsSUFBSTRCLENBQUFBLHdCQUFBQSxrQ0FBQUEsWUFBYXhCLElBQUksTUFBSyxlQUFld0IsWUFBWWhCLGVBQWUsRUFBRTtZQUNwRWdCLFlBQVloQixlQUFlLENBQUNpQixPQUFPLENBQUMsQ0FBQ0M7Z0JBQ25DLElBQUlBLGVBQWVmLFFBQVEsS0FBSyxtQkFBbUIsWUFBWWUsZ0JBQWdCO29CQUM3RSxNQUFNYixTQUFTYSxlQUFlYixNQUFNO29CQUVwQyx3Q0FBd0M7b0JBQ3hDLElBQUlBLE9BQU9DLEtBQUssQ0FBQ2EsU0FBUyxLQUFLLEtBQUssQ0FBQ2hGLFFBQVFnQixNQUFNLEVBQUU7d0JBQ25EUCxvQkFBb0I7d0JBQ3BCO29CQUNGO29CQUVBLElBQUl0QixpRkFBd0JBLENBQzFCWSxjQUNBbUUsT0FBT0MsS0FBSyxDQUFDYSxTQUFTLEVBQ3RCcEYsaUJBQ0M7d0JBQ0RLLDBCQUFBQSxvQ0FBQUEsY0FBZ0JpRSxPQUFPQyxLQUFLLENBQUNhLFNBQVM7b0JBQ3hDO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGLEdBQUc7UUFBQ2xELFNBQVN3QyxRQUFRO1FBQUVyRTtRQUFlRjtRQUFjSDtRQUFnQkksUUFBUWdCLE1BQU07S0FBQztJQUVuRiw0Q0FBNEM7SUFDNUMsTUFBTWlFLHlCQUF5QnBHLGtEQUFXQSxDQUFDLENBQUNtRztRQUMxQyxNQUFNLEVBQUVFLFdBQVcsRUFBRUMsbUJBQW1CLEVBQUVDLGVBQWUsRUFBRSxHQUFHakcsaUZBQXdCQSxDQUNsRlksY0FDQWlGLFdBQ0FwRjtRQUdKLElBQUlzRixhQUFhO1lBQ2JuQyxRQUFRc0MsR0FBRyxDQUFDLHVDQUFpRCxPQUFWTDtZQUVuRCxJQUFJSSxpQkFBaUI7Z0JBQ2pCckMsUUFBUXNDLEdBQUcsQ0FBQztZQUNaLDhDQUE4QztZQUNsRDtZQUVBLElBQUlwRixlQUFlO2dCQUNqQkEsY0FBYytFO1lBQ2hCO1lBRUEsT0FBTztnQkFDSE0sTUFBTTtnQkFDTm5CLE9BQU87b0JBQ0hhO29CQUNBTyxRQUFRO29CQUNSQyxVQUFVTDtnQkFDZDtZQUNKO1FBQ0o7UUFFQSxPQUFPO1lBQ0hHLE1BQU07WUFDTm5CLE9BQU87Z0JBQ0hhLFdBQVdqRjtnQkFDWHdGLFFBQVE7Z0JBQ1JDLFVBQVVMO1lBQ2Q7UUFDSjtJQUNKLEdBQUc7UUFBQ3BGO1FBQWNIO1FBQWdCSztLQUFjO0lBRTlDLHdDQUF3QztJQUN4QyxNQUFNMEQsU0FBUzlFLGtEQUFXQSxDQUFDLE9BQU91RSxTQUFjcUM7UUFDOUMsbUVBQW1FO1FBQ25FLE1BQU1DLGtCQUFrQnRDLFFBQVFDLElBQUksS0FBSztRQUN6QyxNQUFNc0MsaUJBQWlCbkcsMkVBQW1CQSxDQUFDTyxjQUFjMkY7UUFFekQscUNBQXFDO1FBQ3JDLE1BQU01RCxTQUFTNkIsTUFBTSxDQUFDUCxTQUFTO1lBQzdCLEdBQUdxQyxPQUFPO1lBQ1Z2RCxNQUFNO21CQUNEdUQsb0JBQUFBLDhCQUFBQSxRQUFTdkQsSUFBSTtnQkFDaEJsQyxTQUFTMkY7WUFDWDtRQUNGO0lBQ0YsR0FBRztRQUFDN0Q7UUFBVS9CO0tBQWE7SUFFM0IsT0FBTztRQUNMLEdBQUcrQixRQUFRO1FBQ1h3QyxVQUFVbEU7UUFDVm9FO1FBQ0FvQix3QkFBd0J6Rix3QkFBd0IrQyxPQUFPO1FBQ3ZEK0I7UUFDQTNFO1FBQ0FDO1FBQ0FNO1FBQ0FMO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FJO1FBQ0E0QztJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlVHJhdmVsQ2hhdC50cz9lM2JkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNoYXQgfSBmcm9tICdhaS9yZWFjdCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVHJhdmVsRGV0YWlscywgVHJhdmVsU2Vzc2lvbiB9IGZyb20gJy4uL21hbmFnZXJzL3R5cGVzJztcbmltcG9ydCB7IFBsYWNlLCBzYXZlZFBsYWNlc01hbmFnZXIgfSBmcm9tICcuLi91dGlscy9wbGFjZXMtdXRpbHMnO1xuaW1wb3J0IHsgU1RBR0VfTElNSVRTLCB2YWxpZGF0ZVN0YWdlUHJvZ3Jlc3Npb24gfSBmcm9tICcuLi9tYW5hZ2Vycy9zdGFnZS1tYW5hZ2VyJztcbmltcG9ydCB7IE1lc3NhZ2UgYXMgTG9jYWxNZXNzYWdlLCBUb29sSW52b2NhdGlvbiB9IGZyb20gJy4uL21hbmFnZXJzL3R5cGVzJztcbmltcG9ydCB7IE1lc3NhZ2UgYXMgQWlNZXNzYWdlIH0gZnJvbSAnYWknO1xuaW1wb3J0IHsgY2hlY2tTZXNzaW9uV2l0aFdhcm5pbmcsIGdldFN0b3JlZFNlc3Npb24sIFNFU1NJT05fQ09ORklHLCBoYW5kbGVTZXNzaW9uRXhwaXJ5LCB1cGRhdGVTdG9yZWRNZXRyaWNzLCBjaGVja0lucHV0TGltaXRzIH0gZnJvbSAnLi4vdXRpbHMvc2Vzc2lvbi1tYW5hZ2VyJztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJztcblxuaW50ZXJmYWNlIENoYXRSZXF1ZXN0Qm9keSB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZGVzdGluYXRpb246IHN0cmluZztcbiAgbWVzc2FnZUNvdW50OiBudW1iZXI7XG4gIGN1cnJlbnRTdGFnZTogbnVtYmVyO1xuICBtZXRyaWNzOiBUcmF2ZWxTZXNzaW9uO1xufVxuXG5pbnRlcmZhY2UgVXNlVHJhdmVsQ2hhdFByb3BzIHtcbiAgY3VycmVudERldGFpbHM6IFRyYXZlbERldGFpbHM7XG4gIHNhdmVkUGxhY2VzOiBQbGFjZVtdO1xuICBjdXJyZW50U3RhZ2U6IG51bWJlcjtcbiAgbWV0cmljczogVHJhdmVsU2Vzc2lvbjtcbiAgb25TdGFnZVVwZGF0ZT86IChuZXh0U3RhZ2U6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYXZlbENoYXQoe1xuICBjdXJyZW50RGV0YWlscyxcbiAgc2F2ZWRQbGFjZXM6IGluaXRpYWxTYXZlZFBsYWNlcyxcbiAgY3VycmVudFN0YWdlLFxuICBtZXRyaWNzLFxuICBvblN0YWdlVXBkYXRlXG59OiBVc2VUcmF2ZWxDaGF0UHJvcHMpIHtcbiAgY29uc3QgcXVpY2tSZXNwb25zZUluUHJvZ3Jlc3MgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBbbWFpbkNoYXRNZXNzYWdlcywgc2V0TWFpbkNoYXRNZXNzYWdlc10gPSB1c2VTdGF0ZTxMb2NhbE1lc3NhZ2VbXT4oW10pO1xuICBjb25zdCBbc2hvd1Nlc3Npb25XYXJuaW5nLCBzZXRTaG93U2Vzc2lvbldhcm5pbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd1ByZW1pdW1Nb2RhbCwgc2V0U2hvd1ByZW1pdW1Nb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwcmVtaXVtTW9kYWxTdGF0ZSwgc2V0UHJlbWl1bU1vZGFsU3RhdGVdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuXG4gIC8vIENoZWNrIGlmIHdpdGhpbiBzdGFnZSBsaW1pdFxuICBjb25zdCBpc1dpdGhpblN0YWdlTGltaXQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gY2hlY2tJbnB1dExpbWl0cyhjdXJyZW50U3RhZ2UpLndpdGhpblN0YWdlTGltaXQ7XG4gIH0sIFtjdXJyZW50U3RhZ2VdKTtcblxuICAvLyBQcmVtaXVtIHN0YWdlIGNoZWNrXG4gIGNvbnN0IGNoZWNrUHJlbWl1bVN0YWdlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChjdXJyZW50U3RhZ2UgPT09IDMgJiYgIW1ldHJpY3MuaXNQYWlkICYmICFpc1dpdGhpblN0YWdlTGltaXQpIHtcbiAgICAgIHNldFNob3dQcmVtaXVtTW9kYWwodHJ1ZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCBbY3VycmVudFN0YWdlLCBtZXRyaWNzLmlzUGFpZCwgaXNXaXRoaW5TdGFnZUxpbWl0XSk7XG5cbiAgLy8gSGFuZGxlIG1pc3Npbmcgc2Vzc2lvblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZ2V0U3RvcmVkU2Vzc2lvbigpKSB7XG4gICAgICByb3V0ZXIucHVzaCgnL3RyYXZlbC1mb3JtJyk7XG4gICAgfVxuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gU2Vzc2lvbiBjaGVjayBlZmZlY3RcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjaGVja1Nlc3Npb24gPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGlzVmFsaWQsIHNob3VsZFdhcm4gfSA9IGNoZWNrU2Vzc2lvbldpdGhXYXJuaW5nKCk7XG4gICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgaGFuZGxlU2Vzc2lvbkV4cGlyeSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkV2Fybikge1xuICAgICAgICBzZXRTaG93U2Vzc2lvbldhcm5pbmcodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9O1xuXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVja1Nlc3Npb24sIDYwMDAwKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0sIFtdKTtcblxuICAvLyBTaW1wbHkgdXNlIHNhdmVkUGxhY2VzTWFuYWdlciBkaXJlY3RseVxuICBjb25zdCBjdXJyZW50U2F2ZWRQbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG4gIC8vIGNvbnNvbGUubG9nKCdbdXNlVHJhdmVsQ2hhdF0gQ3VycmVudCBzYXZlZCBwbGFjZXM6JywgY3VycmVudFNhdmVkUGxhY2VzLm1hcChwID0+ICh7XG4gIC8vICAgaWQ6IHAuaWQsXG4gIC8vICAgcGhvdG9zOiBwLnBob3Rvc1xuICAvLyB9KSkpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlUGxhY2VzQ2hhbmdlZCA9ICgpID0+IHtcbiAgICAgIC8vIEZvcmNlIHJlLXJlbmRlciB3aGVuIHBsYWNlcyBjaGFuZ2VcbiAgICAgIHNldE1haW5DaGF0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldl0pO1xuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2F2ZWRQbGFjZXNDaGFuZ2VkJywgaGFuZGxlUGxhY2VzQ2hhbmdlZCk7XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzYXZlZFBsYWNlc0NoYW5nZWQnLCBoYW5kbGVQbGFjZXNDaGFuZ2VkKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IG1haW5DaGF0ID0gdXNlQ2hhdCh7XG4gICAgYXBpOiAnL2FwaS9jaGF0JyxcbiAgICBpZDogU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVksXG4gICAgYm9keToge1xuICAgICAgY3VycmVudERldGFpbHMsXG4gICAgICBkZXN0aW5hdGlvbjogY3VycmVudERldGFpbHMuZGVzdGluYXRpb24sIC8vIEV4cGxpY2l0bHkgaW5jbHVkZSBkZXN0aW5hdGlvblxuICAgICAgc2F2ZWRQbGFjZXM6IGN1cnJlbnRTYXZlZFBsYWNlc1xuICAgICAgICA/LmZpbHRlcihwbGFjZSA9PiBwbGFjZSAmJiBwbGFjZS5pZCAmJiBwbGFjZS5kaXNwbGF5TmFtZSlcbiAgICAgICAgPy5tYXAocGxhY2UgPT4gKHtcbiAgICAgICAgICBpZDogcGxhY2UuaWQsXG4gICAgICAgICAgZGlzcGxheU5hbWU6IHBsYWNlLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIGZvcm1hdHRlZEFkZHJlc3M6IHBsYWNlLmZvcm1hdHRlZEFkZHJlc3MsXG4gICAgICAgICAgbG9jYXRpb246IHBsYWNlLmxvY2F0aW9uLFxuICAgICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSxcbiAgICAgICAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLFxuICAgICAgICAgIHBob3RvczogcGxhY2UucGhvdG9zIHx8IFtdXG4gICAgICAgIH0pKSB8fCBbXSxcbiAgICAgIGN1cnJlbnRTdGFnZSxcbiAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgLi4ubWV0cmljcyxcbiAgICAgICAgZGVzdGluYXRpb246IGN1cnJlbnREZXRhaWxzLmRlc3RpbmF0aW9uIC8vIEVuc3VyZSBkZXN0aW5hdGlvbiBpcyBpbiBtZXRyaWNzXG4gICAgICB9XG4gICAgfSxcbiAgICBvbkVycm9yOiB1c2VDYWxsYmFjaygoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbTWFpbkNoYXRdIEVycm9yOicsIGVycm9yKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tNYWluQ2hhdF0gQ3VycmVudCBzdGF0ZTonLCB7XG4gICAgICAgIGN1cnJlbnREZXRhaWxzLFxuICAgICAgICBzYXZlZFBsYWNlczogY3VycmVudFNhdmVkUGxhY2VzPy5tYXAocCA9PiAoe1xuICAgICAgICAgIGlkOiBwPy5pZCxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogcD8uZGlzcGxheU5hbWUsXG4gICAgICAgICAgcGhvdG9zOiBwPy5waG90b3M/Lmxlbmd0aFxuICAgICAgICB9KSksXG4gICAgICAgIGN1cnJlbnRTdGFnZSxcbiAgICAgICAgbWV0cmljc1xuICAgICAgfSk7XG4gICAgICBxdWlja1Jlc3BvbnNlSW5Qcm9ncmVzcy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSwgW2N1cnJlbnREZXRhaWxzLCBjdXJyZW50U2F2ZWRQbGFjZXMsIGN1cnJlbnRTdGFnZSwgbWV0cmljc10pLFxuICAgIG9uRmluaXNoOiB1c2VDYWxsYmFjayhhc3luYyAobWVzc2FnZTogQWlNZXNzYWdlKSA9PiB7XG4gICAgICAvLyBPbmx5IHRyaWdnZXIgcXVpY2sgcmVzcG9uc2UgZm9yIGNvbXBsZXRlIGFzc2lzdGFudCBtZXNzYWdlc1xuICAgICAgaWYgKG1lc3NhZ2Uucm9sZSAhPT0gJ2Fzc2lzdGFudCcgfHwgIW1lc3NhZ2UuY29udGVudD8udHJpbSgpKSByZXR1cm47XG4gICAgICBcbiAgICAgIC8vIFByZXZlbnQgbXVsdGlwbGUgcXVpY2sgcmVzcG9uc2UgdHJpZ2dlcnNcbiAgICAgIGlmIChxdWlja1Jlc3BvbnNlSW5Qcm9ncmVzcy5jdXJyZW50KSByZXR1cm47XG4gICAgICBcbiAgICAgIC8vIElmIGl0J3MgYSBsaW1pdCBtZXNzYWdlLCBkb24ndCB0cmlnZ2VyIHF1aWNrIHJlc3BvbnNlXG4gICAgICBpZiAobWVzc2FnZS5jb250ZW50LmluY2x1ZGVzKFwiWW91J3ZlIHJlYWNoZWQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHBsYWNlc1wiKSkge1xuICAgICAgICBxdWlja1Jlc3BvbnNlSW5Qcm9ncmVzcy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcXVpY2tSZXNwb25zZUluUHJvZ3Jlc3MuY3VycmVudCA9IHRydWU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFJlc2V0IHByZXZpb3VzIG1lc3NhZ2VzIHRvIGVuc3VyZSBjbGVhbiBzdGF0ZVxuICAgICAgICBhd2FpdCBxdWlja1Jlc3BvbnNlQ2hhdC5yZWxvYWQoKTtcbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgbWVzc2FnZVxuICAgICAgICBhd2FpdCBxdWlja1Jlc3BvbnNlQ2hhdC5hcHBlbmQobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdbUXVpY2tSZXNwb25zZV0gRXJyb3IgdHJpZ2dlcmluZyBxdWljayByZXNwb25zZTonLCBlcnJvcik7XG4gICAgICAgIHF1aWNrUmVzcG9uc2VJblByb2dyZXNzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgfSk7XG5cbiAgY29uc3QgcXVpY2tSZXNwb25zZUNoYXQgPSB1c2VDaGF0KHtcbiAgICBhcGk6ICcvYXBpL2NoYXQvcXVpY2stcmVzcG9uc2UnLFxuICAgIGlkOiBTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSxcbiAgICBib2R5OiB7XG4gICAgICBjdXJyZW50RGV0YWlscyxcbiAgICAgIHNhdmVkUGxhY2VzOiBjdXJyZW50U2F2ZWRQbGFjZXMsXG4gICAgICBjdXJyZW50U3RhZ2UsXG4gICAgICBtZXRyaWNzXG4gICAgfSxcbiAgICBvbkZpbmlzaDogKG1lc3NhZ2UpID0+IHtcbiAgICAgIC8vIEtlZXAgbG9hZGluZyB1bnRpbCB3ZSBoYXZlIHZhbGlkIHJlc3BvbnNlc1xuICAgICAgY29uc3QgaGFzVmFsaWRSZXNwb25zZXMgPSBtZXNzYWdlPy50b29sSW52b2NhdGlvbnM/LnNvbWUoXG4gICAgICAgIHQgPT4gdC50b29sTmFtZSA9PT0gJ3F1aWNrUmVzcG9uc2UnICYmIFxuICAgICAgICB0LnN0YXRlID09PSAncmVzdWx0JyAmJiBcbiAgICAgICAgdC5yZXN1bHQ/LnByb3BzPy5yZXNwb25zZXM/Lmxlbmd0aCA+IDBcbiAgICAgICk7XG4gICAgICBpZiAoIWhhc1ZhbGlkUmVzcG9uc2VzKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdbUXVpY2tSZXNwb25zZV0gTm8gdmFsaWQgcmVzcG9uc2VzIGluIGZpbmlzaGVkIG1lc3NhZ2UnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcXVpY2tSZXNwb25zZUluUHJvZ3Jlc3MuY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgb25FcnJvcjogdXNlQ2FsbGJhY2soKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgLy8gY29uc29sZS5lcnJvcignW1F1aWNrUmVzcG9uc2VdIEVycm9yOicsIGVycm9yKTtcbiAgICAgIHF1aWNrUmVzcG9uc2VJblByb2dyZXNzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LCBbXSlcbiAgfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBtYXBwZWRNZXNzYWdlcyA9IG1haW5DaGF0Lm1lc3NhZ2VzLm1hcChtc2cgPT4gKHtcbiAgICAgIC4uLm1zZyxcbiAgICAgIHJvbGU6IG1zZy5yb2xlID09PSAnZGF0YScgPyAnc3lzdGVtJyA6IG1zZy5yb2xlXG4gICAgfSkpIGFzIExvY2FsTWVzc2FnZVtdO1xuICAgIFxuICAgIHNldE1haW5DaGF0TWVzc2FnZXMobWFwcGVkTWVzc2FnZXMpO1xuICB9LCBbbWFpbkNoYXQubWVzc2FnZXNdKTtcblxuICBjb25zdCBxdWlja1Jlc3BvbnNlcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gcXVpY2tSZXNwb25zZUNoYXQubWVzc2FnZXM7XG4gICAgXG4gICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1tRdWlja1Jlc3BvbnNlXSBXYWl0aW5nIGZvciBBUEkgcmVzcG9uc2UuLi4nKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGFwaVJlc3BvbnNlID0gbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgXG4gICAgLy8gY29uc29sZS5sb2coJ1tRdWlja1Jlc3BvbnNlXSBQcm9jZXNzaW5nIEFQSSByZXNwb25zZTonLCB7XG4gICAgLy8gICAgIG1lc3NhZ2VJZDogYXBpUmVzcG9uc2UuaWQsXG4gICAgLy8gICAgIGhhc1Rvb2xJbnZvY2F0aW9uczogISFhcGlSZXNwb25zZS50b29sSW52b2NhdGlvbnMsXG4gICAgLy8gICAgIHRvb2xJbnZvY2F0aW9uczogYXBpUmVzcG9uc2UudG9vbEludm9jYXRpb25zPy5tYXAodCA9PiAoe1xuICAgIC8vICAgICAgICAgbmFtZTogdC50b29sTmFtZSxcbiAgICAvLyAgICAgICAgIHN0YXRlOiB0LnN0YXRlXG4gICAgLy8gICAgIH0pKVxuICAgIC8vIH0pO1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdFF1aWNrUmVzcG9uc2VzKG1lc3NhZ2U6IEFpTWVzc2FnZSkge1xuICAgICAgY29uc3QgcXVpY2tSZXNwb25zZUludm9jYXRpb24gPSBtZXNzYWdlLnRvb2xJbnZvY2F0aW9ucz8uZmluZChcbiAgICAgICAgdCA9PiB0LnRvb2xOYW1lID09PSAncXVpY2tSZXNwb25zZScgJiYgdC5zdGF0ZSA9PT0gJ3Jlc3VsdCdcbiAgICAgICk7XG5cbiAgICAgIGlmICghcXVpY2tSZXNwb25zZUludm9jYXRpb24gfHwgISgncmVzdWx0JyBpbiBxdWlja1Jlc3BvbnNlSW52b2NhdGlvbikpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnW1F1aWNrUmVzcG9uc2VdIE5vIHZhbGlkIHJlc3BvbnNlcyBmb3VuZCBpbiBBUEkgcmVzcG9uc2UnKTtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZXMgPSBxdWlja1Jlc3BvbnNlSW52b2NhdGlvbi5yZXN1bHQucHJvcHMucmVzcG9uc2VzO1xuICAgIGlmIChyZXNwb25zZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdbUXVpY2tSZXNwb25zZV0gR290IHZhbGlkIHJlc3BvbnNlczonLCByZXNwb25zZXMpO1xuICAgICAgICAgIHJldHVybiByZXNwb25zZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKCdbUXVpY2tSZXNwb25zZV0gRW1wdHkgcmVzcG9uc2VzIGFycmF5Jyk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dHJhY3RRdWlja1Jlc3BvbnNlcyhhcGlSZXNwb25zZSk7XG59LCBbcXVpY2tSZXNwb25zZUNoYXQubWVzc2FnZXNdKTtcblxuICAvLyBDaGVjayBzdGFnZSBwcm9ncmVzc2lvbiBpbiBtZXNzYWdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gbWFpbkNoYXQubWVzc2FnZXNbbWFpbkNoYXQubWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RNZXNzYWdlPy5yb2xlID09PSAnYXNzaXN0YW50JyAmJiBsYXN0TWVzc2FnZS50b29sSW52b2NhdGlvbnMpIHtcbiAgICAgIGxhc3RNZXNzYWdlLnRvb2xJbnZvY2F0aW9ucy5mb3JFYWNoKCh0b29sSW52b2NhdGlvbikgPT4ge1xuICAgICAgICBpZiAodG9vbEludm9jYXRpb24udG9vbE5hbWUgPT09ICdzdGFnZVByb2dyZXNzJyAmJiAncmVzdWx0JyBpbiB0b29sSW52b2NhdGlvbikge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRvb2xJbnZvY2F0aW9uLnJlc3VsdCBhcyBhbnk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGFkdmFuY2UgdG8gc3RhZ2UgNFxuICAgICAgICAgIGlmIChyZXN1bHQucHJvcHMubmV4dFN0YWdlID09PSA0ICYmICFtZXRyaWNzLmlzUGFpZCkge1xuICAgICAgICAgICAgc2V0U2hvd1ByZW1pdW1Nb2RhbCh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHZhbGlkYXRlU3RhZ2VQcm9ncmVzc2lvbihcbiAgICAgICAgICAgIGN1cnJlbnRTdGFnZSxcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wcy5uZXh0U3RhZ2UsXG4gICAgICAgICAgICBjdXJyZW50RGV0YWlsc1xuICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIG9uU3RhZ2VVcGRhdGU/LihyZXN1bHQucHJvcHMubmV4dFN0YWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW21haW5DaGF0Lm1lc3NhZ2VzLCBvblN0YWdlVXBkYXRlLCBjdXJyZW50U3RhZ2UsIGN1cnJlbnREZXRhaWxzLCBtZXRyaWNzLmlzUGFpZF0pO1xuXG4gIC8vIFN0YWdlIHByb2dyZXNzaW9uIHZhbGlkYXRpb24gYW5kIGhhbmRsaW5nXG4gIGNvbnN0IGhhbmRsZVN0YWdlUHJvZ3Jlc3Npb24gPSB1c2VDYWxsYmFjaygobmV4dFN0YWdlOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCB7IGNhblByb2dyZXNzLCBtaXNzaW5nUmVxdWlyZW1lbnRzLCB1cGdyYWRlUmVxdWlyZWQgfSA9IHZhbGlkYXRlU3RhZ2VQcm9ncmVzc2lvbihcbiAgICAgICAgY3VycmVudFN0YWdlLFxuICAgICAgICBuZXh0U3RhZ2UsXG4gICAgICAgIGN1cnJlbnREZXRhaWxzXG4gICAgKTtcblxuICAgIGlmIChjYW5Qcm9ncmVzcykge1xuICAgICAgICBjb25zb2xlLmxvZyhgW1N0YWdlIFByb2dyZXNzaW9uXSBNb3ZpbmcgdG8gc3RhZ2UgJHtuZXh0U3RhZ2V9YCk7XG5cbiAgICAgICAgaWYgKHVwZ3JhZGVSZXF1aXJlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTdGFnZSBQcm9ncmVzc2lvbl0gVXBncmFkZSByZXF1aXJlZCBmb3Igc3RhZ2UgcHJvZ3Jlc3Npb24nKTtcbiAgICAgICAgICAgIC8vIFlvdSBjYW4gYWRkIGFueSB1cGdyYWRlLXNwZWNpZmljIGxvZ2ljIGhlcmVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvblN0YWdlVXBkYXRlKSB7XG4gICAgICAgICAgb25TdGFnZVVwZGF0ZShuZXh0U3RhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdzdGFnZVByb2dyZXNzJyxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgbmV4dFN0YWdlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogJ1N0YWdlIHJlcXVpcmVtZW50cyBtZXQnLFxuICAgICAgICAgICAgICAgIGNyaXRlcmlhOiBtaXNzaW5nUmVxdWlyZW1lbnRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3N0YWdlUHJvZ3Jlc3MnLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgbmV4dFN0YWdlOiBjdXJyZW50U3RhZ2UsXG4gICAgICAgICAgICByZWFzb246ICdTdGFnZSByZXF1aXJlbWVudHMgbm90IG1ldCcsXG4gICAgICAgICAgICBjcml0ZXJpYTogbWlzc2luZ1JlcXVpcmVtZW50c1xuICAgICAgICB9XG4gICAgfTtcbn0sIFtjdXJyZW50U3RhZ2UsIGN1cnJlbnREZXRhaWxzLCBvblN0YWdlVXBkYXRlXSk7XG5cbiAgLy8gV3JhcCBhcHBlbmQgdG8gaW5jbHVkZSBtZXRyaWNzIHVwZGF0ZVxuICBjb25zdCBhcHBlbmQgPSB1c2VDYWxsYmFjayhhc3luYyAobWVzc2FnZTogYW55LCBvcHRpb25zPzogYW55KSA9PiB7XG4gICAgLy8gT25seSBpbmNyZW1lbnQgbWV0cmljcyBmb3IgdXNlciBtZXNzYWdlcyBhbmQgbm90IHN5c3RlbSBtZXNzYWdlc1xuICAgIGNvbnN0IHNob3VsZEluY3JlbWVudCA9IG1lc3NhZ2Uucm9sZSA9PT0gJ3VzZXInO1xuICAgIGNvbnN0IHVwZGF0ZWRNZXRyaWNzID0gdXBkYXRlU3RvcmVkTWV0cmljcyhjdXJyZW50U3RhZ2UsIHNob3VsZEluY3JlbWVudCk7XG5cbiAgICAvLyBBcHBlbmQgbWVzc2FnZSB3aXRoIGxhdGVzdCBtZXRyaWNzXG4gICAgYXdhaXQgbWFpbkNoYXQuYXBwZW5kKG1lc3NhZ2UsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBib2R5OiB7XG4gICAgICAgIC4uLm9wdGlvbnM/LmJvZHksXG4gICAgICAgIG1ldHJpY3M6IHVwZGF0ZWRNZXRyaWNzXG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFttYWluQ2hhdCwgY3VycmVudFN0YWdlXSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5tYWluQ2hhdCxcbiAgICBtZXNzYWdlczogbWFpbkNoYXRNZXNzYWdlcyxcbiAgICBxdWlja1Jlc3BvbnNlcyxcbiAgICBpc1F1aWNrUmVzcG9uc2VMb2FkaW5nOiBxdWlja1Jlc3BvbnNlSW5Qcm9ncmVzcy5jdXJyZW50LFxuICAgIGhhbmRsZVN0YWdlUHJvZ3Jlc3Npb24sXG4gICAgc2hvd1Nlc3Npb25XYXJuaW5nLFxuICAgIHNldFNob3dTZXNzaW9uV2FybmluZyxcbiAgICBpc1dpdGhpblN0YWdlTGltaXQsXG4gICAgc2hvd1ByZW1pdW1Nb2RhbCxcbiAgICBzZXRTaG93UHJlbWl1bU1vZGFsLFxuICAgIHByZW1pdW1Nb2RhbFN0YXRlLFxuICAgIHNldFByZW1pdW1Nb2RhbFN0YXRlLFxuICAgIGNoZWNrUHJlbWl1bVN0YWdlLFxuICAgIGFwcGVuZFxuICB9O1xufSJdLCJuYW1lcyI6WyJ1c2VDaGF0IiwidXNlQ2FsbGJhY2siLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZU1lbW8iLCJzYXZlZFBsYWNlc01hbmFnZXIiLCJ2YWxpZGF0ZVN0YWdlUHJvZ3Jlc3Npb24iLCJjaGVja1Nlc3Npb25XaXRoV2FybmluZyIsImdldFN0b3JlZFNlc3Npb24iLCJTRVNTSU9OX0NPTkZJRyIsImhhbmRsZVNlc3Npb25FeHBpcnkiLCJ1cGRhdGVTdG9yZWRNZXRyaWNzIiwiY2hlY2tJbnB1dExpbWl0cyIsInVzZVJvdXRlciIsInVzZVRyYXZlbENoYXQiLCJjdXJyZW50RGV0YWlscyIsInNhdmVkUGxhY2VzIiwiaW5pdGlhbFNhdmVkUGxhY2VzIiwiY3VycmVudFN0YWdlIiwibWV0cmljcyIsIm9uU3RhZ2VVcGRhdGUiLCJjdXJyZW50U2F2ZWRQbGFjZXMiLCJxdWlja1Jlc3BvbnNlSW5Qcm9ncmVzcyIsIm1haW5DaGF0TWVzc2FnZXMiLCJzZXRNYWluQ2hhdE1lc3NhZ2VzIiwic2hvd1Nlc3Npb25XYXJuaW5nIiwic2V0U2hvd1Nlc3Npb25XYXJuaW5nIiwic2hvd1ByZW1pdW1Nb2RhbCIsInNldFNob3dQcmVtaXVtTW9kYWwiLCJwcmVtaXVtTW9kYWxTdGF0ZSIsInNldFByZW1pdW1Nb2RhbFN0YXRlIiwicm91dGVyIiwiaXNXaXRoaW5TdGFnZUxpbWl0Iiwid2l0aGluU3RhZ2VMaW1pdCIsImNoZWNrUHJlbWl1bVN0YWdlIiwiaXNQYWlkIiwicHVzaCIsImNoZWNrU2Vzc2lvbiIsImlzVmFsaWQiLCJzaG91bGRXYXJuIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJnZXRQbGFjZXMiLCJoYW5kbGVQbGFjZXNDaGFuZ2VkIiwicHJldiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibWFpbkNoYXQiLCJhcGkiLCJpZCIsIlNUT1JBR0VfS0VZIiwiYm9keSIsImRlc3RpbmF0aW9uIiwiZmlsdGVyIiwicGxhY2UiLCJkaXNwbGF5TmFtZSIsIm1hcCIsImZvcm1hdHRlZEFkZHJlc3MiLCJsb2NhdGlvbiIsInByaW1hcnlUeXBlIiwicHJpbWFyeVR5cGVEaXNwbGF5TmFtZSIsInBob3RvcyIsIm9uRXJyb3IiLCJlcnJvciIsImNvbnNvbGUiLCJwIiwibGVuZ3RoIiwiY3VycmVudCIsIm9uRmluaXNoIiwibWVzc2FnZSIsInJvbGUiLCJjb250ZW50IiwidHJpbSIsImluY2x1ZGVzIiwicXVpY2tSZXNwb25zZUNoYXQiLCJyZWxvYWQiLCJhcHBlbmQiLCJoYXNWYWxpZFJlc3BvbnNlcyIsInRvb2xJbnZvY2F0aW9ucyIsInNvbWUiLCJ0IiwidG9vbE5hbWUiLCJzdGF0ZSIsInJlc3VsdCIsInByb3BzIiwicmVzcG9uc2VzIiwibWFwcGVkTWVzc2FnZXMiLCJtZXNzYWdlcyIsIm1zZyIsInF1aWNrUmVzcG9uc2VzIiwiYXBpUmVzcG9uc2UiLCJleHRyYWN0UXVpY2tSZXNwb25zZXMiLCJxdWlja1Jlc3BvbnNlSW52b2NhdGlvbiIsImZpbmQiLCJsYXN0TWVzc2FnZSIsImZvckVhY2giLCJ0b29sSW52b2NhdGlvbiIsIm5leHRTdGFnZSIsImhhbmRsZVN0YWdlUHJvZ3Jlc3Npb24iLCJjYW5Qcm9ncmVzcyIsIm1pc3NpbmdSZXF1aXJlbWVudHMiLCJ1cGdyYWRlUmVxdWlyZWQiLCJsb2ciLCJ0eXBlIiwicmVhc29uIiwiY3JpdGVyaWEiLCJvcHRpb25zIiwic2hvdWxkSW5jcmVtZW50IiwidXBkYXRlZE1ldHJpY3MiLCJpc1F1aWNrUmVzcG9uc2VMb2FkaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./hooks/useTravelChat.ts\n"));

/***/ })

});