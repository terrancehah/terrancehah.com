"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/script */ \"./node_modules/next/script.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_script__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\nconst globalSavedPlaces = new Map();\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [infoWindow, setInfoWindow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [scriptLoaded, setScriptLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const savedPlacesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const lastUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Memoize getSavedPlaces to prevent unnecessary re-renders\n    const getSavedPlaces = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const now = Date.now();\n        // Only update if more than 1000ms has passed since last update\n        if (now - lastUpdateRef.current < 1000) {\n            return savedPlacesRef.current;\n        }\n        lastUpdateRef.current = now;\n        return savedPlacesRef.current;\n    }, []);\n    // Expose getSavedPlaces to window with debouncing\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (true) {\n            window.getSavedPlaces = getSavedPlaces;\n        }\n        return ()=>{\n            if (true) {\n                delete window.getSavedPlaces;\n            }\n        };\n    }, [\n        getSavedPlaces\n    ]);\n    // Update savedPlacesRef when places are added/removed\n    const updateSavedPlaces = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((places)=>{\n        savedPlacesRef.current = places;\n        lastUpdateRef.current = Date.now();\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"MapComponent: Received props:\", {\n            city,\n            apiKeyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length\n        });\n        if (!apiKey) {\n            console.error(\"MapComponent: Google Maps API key is missing\");\n            setError(\"Google Maps API key is missing\");\n            setIsLoading(false);\n            return;\n        }\n        if (!scriptLoaded || !mapRef.current) {\n            console.log(\"MapComponent: Waiting for script to load or map ref to be ready...\");\n            return;\n        }\n        console.log(\"MapComponent: Initializing map with city:\", city);\n        const initMap = async ()=>{\n            try {\n                // Import required libraries\n                const { Map: Map1 } = await window.google.maps.importLibrary(\"maps\");\n                const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({\n                    address: city\n                }, async (results, status)=>{\n                    var _results__geometry, _results_;\n                    console.log(\"Geocoding response:\", {\n                        status,\n                        resultsLength: results === null || results === void 0 ? void 0 : results.length\n                    });\n                    if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                        console.error(\"Geocoding failed:\", status);\n                        setError(\"Could not find location for \".concat(city));\n                        setIsLoading(false);\n                        return;\n                    }\n                    try {\n                        const location = results[0].geometry.location;\n                        const newMap = new Map1(mapRef.current, {\n                            center: location,\n                            zoom: 12,\n                            mapId: \"2d604af04a7c7fa8\"\n                        });\n                        setMap(newMap);\n                        const newInfoWindow = new google.maps.InfoWindow({\n                            maxWidth: 400\n                        });\n                        setInfoWindow(newInfoWindow);\n                        infoWindowRef.current = newInfoWindow;\n                        const createCityInfoWindowContent = async (city, location)=>{\n                            try {\n                                // Search for the city to get its details including photos\n                                const cityPlace = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.searchPlaceByText)(city, {\n                                    latitude: location.lat(),\n                                    longitude: location.lng()\n                                });\n                                if (!cityPlace) return null;\n                                // Create a photo carousel HTML\n                                const photoCarousel = cityPlace.photos && cityPlace.photos.length > 0 ? '\\n                                            <div class=\"relative w-full\" style=\"height: 200px;\">\\n                                                <div class=\"carousel-container overflow-hidden w-full h-full\">\\n                                                    <div class=\"carousel-track flex transition-transform duration-500\" style=\"height: 100%;\">\\n                                                        '.concat(cityPlace.photos.slice(0, 5).map((photo, index)=>'\\n                                                            <div class=\"carousel-slide w-full h-full flex-none\">\\n                                                                <img src=\"https://places.googleapis.com/v1/'.concat(photo.name, \"/media?maxHeightPx=340&maxWidthPx=340&key=\").concat(apiKey, '\"\\n                                                                    alt=\"').concat(city, '\"\\n                                                                    class=\"w-full h-full object-cover\"\\n                                                                />\\n                                                            </div>\\n                                                        ')).join(\"\"), '\\n                                                    </div>\\n                                                </div>\\n                                                <button onclick=\"window.prevSlide()\" class=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\\n                                                    </svg>\\n                                                </button>\\n                                                <button onclick=\"window.nextSlide()\" class=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\\n                                                    </svg>\\n                                                </button>\\n                                                <div class=\"absolute bottom-2 left-0 right-0 flex justify-center gap-1\">\\n                                                    ').concat(cityPlace.photos.slice(0, 5).map((_, index)=>'\\n                                                        <button onclick=\"window.goToSlide('.concat(index, ')\" class=\"w-2 h-2 rounded-full bg-white/80 hover:bg-white shadow-sm carousel-dot\" data-index=\"').concat(index, '\">\\n                                                        </button>\\n                                                    ')).join(\"\"), \"\\n                                                </div>\\n                                            </div>\\n                                        \") : \"\";\n                                // Add carousel control functions to window\n                                if (cityPlace.photos && cityPlace.photos.length > 0) {\n                                    const numSlides = Math.min(cityPlace.photos.length, 5);\n                                    window.currentSlide = 0;\n                                    window.updateCarousel = ()=>{\n                                        const track = document.querySelector(\".carousel-track\");\n                                        if (track) {\n                                            track.style.transform = \"translateX(-\".concat(window.currentSlide * 100, \"%)\");\n                                            // Update dots\n                                            document.querySelectorAll(\".carousel-dot\").forEach((dot, index)=>{\n                                                if (index === window.currentSlide) {\n                                                    dot.classList.add(\"bg-white\");\n                                                    dot.classList.remove(\"bg-white/80\");\n                                                } else {\n                                                    dot.classList.remove(\"bg-white\");\n                                                    dot.classList.add(\"bg-white/80\");\n                                                }\n                                            });\n                                        }\n                                    };\n                                    window.nextSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide + 1) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.prevSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide - 1 + numSlides) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.goToSlide = (index)=>{\n                                        window.currentSlide = index;\n                                        window.updateCarousel();\n                                    };\n                                }\n                                return '\\n                                        <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 340px;\">\\n                                            '.concat(photoCarousel, '\\n                                            <div class=\"p-4\">\\n                                                <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">').concat(city, \"</h2>\\n                                                \").concat(cityPlace.formattedAddress ? '<p class=\"text-sm text-gray-500 mb-2\">'.concat(cityPlace.formattedAddress, \"</p>\") : \"\", \"\\n                                            </div>\\n                                        </div>\\n                                    \");\n                            } catch (error) {\n                                console.error(\"Error creating city info window:\", error);\n                                return null;\n                            }\n                        };\n                        // Create a marker for the city\n                        const cityMarker = new google.maps.marker.AdvancedMarkerElement({\n                            map: newMap,\n                            position: location,\n                            title: city\n                        });\n                        // Add click listener to the marker\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            if (infoWindow) {\n                                const content = createCityInfoWindowContent(city, location);\n                                if (content) {\n                                    infoWindow.setContent(await content);\n                                    infoWindow.open(newMap, cityMarker);\n                                }\n                            }\n                        });\n                        markers.set(city, cityMarker);\n                        // Add click listener for future interaction\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            const content = await createCityInfoWindowContent(city, location);\n                            if (content) {\n                                newInfoWindow.setContent(content);\n                                newInfoWindow.open({\n                                    anchor: cityMarker,\n                                    map: newMap\n                                });\n                            }\n                        });\n                    } catch (err) {\n                        console.error(\"Error setting up map:\", err);\n                        setError(\"Failed to initialize map\");\n                    }\n                });\n            } catch (err) {\n                console.error(\"Error initializing map:\", err);\n                setError(\"Failed to initialize map\");\n                setIsLoading(false);\n            }\n        };\n        initMap();\n    }, [\n        city,\n        scriptLoaded,\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    // Simply set the map to null to remove the marker\n                    marker.position = null;\n                    // Close info window if open\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    // Remove event listeners\n                    google.maps.event.clearInstanceListeners(marker);\n                    // Clean up references\n                    markersRef.current.delete(placeId);\n                    globalSavedPlaces.delete(placeId);\n                    // Force update component state\n                    setMarkerCount((prev)=>prev - 1);\n                    setSavedPlaces(new Map(globalSavedPlaces));\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n        };\n        window.addPlaceToMap = async (placeData)=>{\n            try {\n                var _placeData_place;\n                const [{ AdvancedMarkerElement }, { PinElement }] = await Promise.all([\n                    google.maps.importLibrary(\"marker\"),\n                    google.maps.importLibrary(\"marker\")\n                ]);\n                const pinElement = new google.maps.marker.PinElement({\n                    scale: 1\n                });\n                const markerId = (_placeData_place = placeData.place) === null || _placeData_place === void 0 ? void 0 : _placeData_place.id;\n                if (!markerId) {\n                    console.error(\"Debug - No place ID provided\");\n                    return;\n                }\n                console.log(\"Debug - Creating marker with ID:\", markerId);\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: placeData.latitude,\n                        lng: placeData.longitude\n                    },\n                    title: placeData.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                // Set the map property after creation\n                marker.map = map;\n                // Add click listener\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (placeData.place) {\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(placeData.place, markerId);\n                        if (content && infoWindowRef.current) {\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.open(map, marker);\n                        }\n                    }\n                });\n                // Store the marker reference\n                markersRef.current.set(markerId, marker);\n                if (placeData.place) {\n                    globalSavedPlaces.set(markerId, placeData.place);\n                    // Force a re-render when adding a marker\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(globalSavedPlaces));\n                    console.log(\"Debug - Added place:\", globalSavedPlaces);\n                }\n                console.log(\"Debug - Marker added successfully\");\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            const places = Array.from(globalSavedPlaces.values());\n            console.log(\"Getting saved places:\", places);\n            return places;\n        };\n    }, [\n        map,\n        infoWindow,\n        markerCount\n    ]);\n    // Add a useEffect to monitor savedPlaces changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Current saved places:\", [\n            ...globalSavedPlaces.entries()\n        ]);\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Load saved places from session storage on mount\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    const placesMap = new Map(parsed.savedPlaces.map((place)=>[\n                            place.id || place.displayName.text,\n                            place\n                        ]));\n                    setSavedPlaces(placesMap);\n                    savedPlacesRef.current = Array.from(placesMap.values());\n                    Object.assign(globalSavedPlaces, placesMap);\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Save to session storage when places change\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                sessionStorage.setItem(\"travelPlannerSession\", JSON.stringify({\n                    ...parsed,\n                    savedPlaces: Array.from(savedPlaces.values())\n                }));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                        <button \\n                            onclick=\\\"\\n                                (function() {\\n                                    console.log('Debug - Delete button clicked for markerId:', '\").concat(markerId, \"');\\n                                    if (window.removePlaceFromMap) {\\n                                        window.removePlaceFromMap('\").concat(markerId, '\\');\\n                                        // Close the info window after deletion\\n                                        if (window.currentInfoWindow) {\\n                                            window.currentInfoWindow.close();\\n                                        }\\n                                    }\\n                                })();\\n                            \"\\n                            class=\"p-1 hover:bg-red-50 rounded-full\"\\n                            aria-label=\"Remove place\"\\n                        >\\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\\n                                <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\\n                            </svg>\\n                        </button>\\n                    </div>\\n                    ').concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_script__WEBPACK_IMPORTED_MODULE_2___default()), {\n                src: \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker&v=beta&callback=Function.prototype\"),\n                strategy: \"afterInteractive\",\n                onLoad: ()=>{\n                    console.log(\"Google Maps script loaded\");\n                    setScriptLoaded(true);\n                },\n                onError: (e)=>{\n                    console.error(\"Failed to load Google Maps script:\", e);\n                    setError(\"Failed to load Google Maps\");\n                    setIsLoading(false);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 531,\n                columnNumber: 17\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 text-red-500 p-4 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 546,\n                columnNumber: 17\n            }, undefined),\n            isLoading && !error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-gray-600\",\n                    children: [\n                        \"Loading map...\",\n                        !apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: \"Waiting for API key...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                            lineNumber: 554,\n                            columnNumber: 37\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 552,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 551,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 558,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 529,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"Nu+m3kdq4zFQwKtjk70F3UuIkg0=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n"));

/***/ })

});