"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_travel-chat_tsx",{

/***/ "./hooks/useTravelChat.ts":
/*!********************************!*\
  !*** ./hooks/useTravelChat.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTravelChat: function() { return /* binding */ useTravelChat; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _managers_ai_chat_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/ai-chat-manager */ \"./managers/ai-chat-manager.ts\");\n\n\nfunction useTravelChat(param) {\n    let { initialDetails, componentManager, contentManager } = param;\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [activeToolUI, setActiveToolUI] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [currentDetails, setCurrentDetails] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialDetails);\n    const chatManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new _managers_ai_chat_manager__WEBPACK_IMPORTED_MODULE_1__.AIChatManager(initialDetails), [\n        initialDetails\n    ]);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        {\n            id: \"init\",\n            role: \"system\",\n            content: \"\",\n            data: {\n                toolName: \"detailsCard\",\n                isDetailsCard: true,\n                componentProps: {\n                    content: {\n                        title: \"Travel Details\",\n                        details: initialDetails\n                    }\n                }\n            }\n        }\n    ]);\n    const [componentLoading, setComponentLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const onDetailsUpdated = (details)=>{\n            setCurrentDetails(details);\n            setMessages((prev)=>{\n                const withoutDetailsCard = prev.filter((msg)=>{\n                    var _msg_data;\n                    return !((_msg_data = msg.data) === null || _msg_data === void 0 ? void 0 : _msg_data.isDetailsCard);\n                });\n                return [\n                    ...withoutDetailsCard,\n                    {\n                        id: Date.now().toString(),\n                        role: \"system\",\n                        content: \"\",\n                        data: {\n                            toolName: \"detailsCard\",\n                            isDetailsCard: true,\n                            componentProps: {\n                                content: {\n                                    title: \"Travel Details\",\n                                    details: details\n                                }\n                            }\n                        }\n                    }\n                ];\n            });\n        };\n        chatManager.on(\"detailsUpdated\", onDetailsUpdated);\n        return ()=>{\n            chatManager.off(\"detailsUpdated\", onDetailsUpdated);\n        };\n    }, [\n        chatManager\n    ]);\n    const addMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newMessage)=>{\n        setMessages((prevMessages)=>[\n                ...prevMessages,\n                {\n                    ...newMessage,\n                    content: chatManager.formatMessageContent(newMessage.content)\n                }\n            ]);\n    }, [\n        chatManager\n    ]);\n    const handleSubmit = async (e)=>{\n        e.preventDefault();\n        if (!input.trim()) return;\n        setIsLoading(true);\n        setError(null);\n        try {\n            // Add user message immediately\n            const userMessage = {\n                id: Date.now().toString(),\n                role: \"user\",\n                content: input\n            };\n            setMessages((prev)=>[\n                    ...prev,\n                    userMessage\n                ]);\n            // Create empty assistant message for streaming\n            const streamMessageId = Date.now().toString();\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        id: streamMessageId,\n                        role: \"assistant\",\n                        content: \"\"\n                    }\n                ]);\n            const reader = await chatManager.sendMessage(input);\n            setInput(\"\");\n            // Process streaming response\n            await chatManager.processStreamingResponse(reader, (content)=>{\n                setMessages((prev)=>prev.map((msg)=>msg.id === streamMessageId ? {\n                            ...msg,\n                            content: msg.content + content\n                        } : msg));\n            });\n        } catch (error) {\n            setError(error instanceof Error ? error.message : \"An error occurred\");\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const handleToolResponse = async (toolName, componentProps)=>{\n        console.log(\"[handleToolResponse] Starting with toolName:\", toolName);\n        setActiveToolUI(null);\n        if ([\n            \"datePicker\",\n            \"preferenceSelector\",\n            \"budgetSelector\",\n            \"languageSelector\"\n        ].includes(toolName)) {\n            try {\n                // 1. UI Cleanup - Remove old components but keep details card\n                setMessages((prev)=>prev.filter((msg)=>{\n                        var _msg_data;\n                        return !((_msg_data = msg.data) === null || _msg_data === void 0 ? void 0 : _msg_data.toolName) || msg.data.isDetailsCard;\n                    }));\n                // 2. Add component with UI-specific props\n                const componentId = Date.now().toString();\n                console.log(\"[handleToolResponse] Added component with ID:\", componentId);\n                setMessages((prev)=>[\n                        ...prev,\n                        {\n                            id: componentId,\n                            role: \"assistant\",\n                            content: \"\",\n                            data: {\n                                toolName,\n                                componentProps: {\n                                    ...componentProps,\n                                    onUpdate: async (value)=>{\n                                        console.log(\"[onUpdate] Starting with value:\", value, \"for toolName:\", toolName);\n                                        try {\n                                            setComponentLoading(componentId);\n                                            console.log(\"[onUpdate] Set component loading for ID:\", componentId);\n                                            setMessages((prev)=>{\n                                                console.log(\"[onUpdate] Previous messages:\", prev);\n                                                return prev.filter((msg)=>{\n                                                    var _msg_data;\n                                                    return !((_msg_data = msg.data) === null || _msg_data === void 0 ? void 0 : _msg_data.toolName) || msg.data.isDetailsCard;\n                                                });\n                                            });\n                                            const updateMessage = chatManager.formatUpdateMessage(toolName, value);\n                                            console.log(\"[onUpdate] Generated update message:\", updateMessage);\n                                            setMessages((prev)=>[\n                                                    ...prev,\n                                                    {\n                                                        id: Date.now().toString(),\n                                                        role: \"user\",\n                                                        content: updateMessage\n                                                    }\n                                                ]);\n                                            console.log(\"[onUpdate] Added user message\");\n                                            try {\n                                                console.log(\"[onUpdate] Calling handleToolUpdate with:\", toolName, value);\n                                                const { reader } = await chatManager.handleToolUpdate(toolName, value);\n                                                const streamMessageId = Date.now().toString();\n                                                setMessages((prev)=>[\n                                                        ...prev,\n                                                        {\n                                                            id: streamMessageId,\n                                                            role: \"assistant\",\n                                                            content: \"\",\n                                                            data: {\n                                                                isLoading: true\n                                                            }\n                                                        }\n                                                    ]);\n                                                await chatManager.processStreamingResponse(reader, (content)=>{\n                                                    setMessages((prev)=>prev.map((msg)=>msg.id === streamMessageId ? {\n                                                                ...msg,\n                                                                content: msg.content + content,\n                                                                data: {\n                                                                    isLoading: false\n                                                                }\n                                                            } : msg));\n                                                });\n                                            } catch (error) {\n                                                if (error instanceof Error && error.message.includes(\"Failed to fetch\")) {\n                                                    setMessages((prev)=>[\n                                                            ...prev,\n                                                            {\n                                                                id: Date.now().toString(),\n                                                                role: \"assistant\",\n                                                                content: \"Unable to connect to the server. Please check your internet connection and try again.\",\n                                                                data: {\n                                                                    isError: true\n                                                                }\n                                                            }\n                                                        ]);\n                                                } else {\n                                                    setMessages((prev)=>[\n                                                            ...prev,\n                                                            {\n                                                                id: Date.now().toString(),\n                                                                role: \"assistant\",\n                                                                content: \"An error occurred while processing your request. Please try again.\",\n                                                                data: {\n                                                                    isError: true\n                                                                }\n                                                            }\n                                                        ]);\n                                                }\n                                                setError(error instanceof Error ? error.message : \"An error occurred\");\n                                            }\n                                        } finally{\n                                            setComponentLoading(null);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]);\n            } catch (error) {\n                setError(error instanceof Error ? error.message : \"An error occurred\");\n            }\n        }\n    };\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    const updateAssistantMessage = (content)=>{\n        setMessages((prevMessages)=>{\n            const lastMessage = prevMessages[prevMessages.length - 1];\n            if (lastMessage && lastMessage.role === \"assistant\") {\n                return prevMessages.map((msg)=>msg.id === lastMessage.id ? {\n                        ...msg,\n                        content: msg.content + content\n                    } : msg);\n            }\n            return prevMessages;\n        });\n    };\n    return {\n        messages,\n        input,\n        isLoading,\n        error,\n        activeToolUI,\n        currentDetails,\n        handleInputChange,\n        handleSubmit,\n        handleToolResponse,\n        chatManager\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useTravelChat.ts\n"));

/***/ })

});