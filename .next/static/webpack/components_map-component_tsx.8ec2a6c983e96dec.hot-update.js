"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/travel-info-utils */ \"./utils/travel-info-utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scriptLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const geometryLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Track current active TravelInfos\n    const [activeTravelInfos, setActiveTravelInfos] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Track polylines for cleanup\n    const polylineRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!apiKey) return;\n        const loadGoogleMapsScript = ()=>{\n            var _window_google;\n            if ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : _window_google.maps) {\n                setupMapInstance();\n            } else if (!scriptLoadedRef.current && !document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]')) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker,geometry&v=beta&callback=setupMapInstance\");\n                script.async = true;\n                script.defer = true;\n                document.head.appendChild(script);\n                scriptLoadedRef.current = true;\n            }\n        };\n        // Initial map setup and geometry library check\n        async function setupMapInstance() {\n            if (!mapRef.current || mapInstanceRef.current) return;\n            try {\n                // Use the city prop directly, fallback to session storage if needed\n                let targetCity = city;\n                if (!targetCity) {\n                    const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n                    if (sessionData) {\n                        const parsed = JSON.parse(sessionData);\n                        targetCity = parsed.city;\n                    }\n                }\n                if (!targetCity) {\n                    console.error(\"No city specified\");\n                    setIsLoading(false);\n                    return;\n                }\n                const location = await getLocation(targetCity);\n                const map = new window.google.maps.Map(mapRef.current, {\n                    zoom: 12,\n                    center: location,\n                    mapId: \"2d604af04a7c7fa8\"\n                });\n                mapInstanceRef.current = map;\n                setMap(map);\n                markersRef.current = new Map();\n                // Initialize the InfoWindow\n                infoWindowRef.current = new window.google.maps.InfoWindow({\n                    maxWidth: 300,\n                    pixelOffset: new window.google.maps.Size(0, -30)\n                });\n                setIsLoading(false);\n                // Check if geometry library is loaded\n                if (isGeometryReady()) {\n                    geometryLoadedRef.current = true;\n                } else {\n                    // Poll for geometry library\n                    const checkGeometry = setInterval(()=>{\n                        if (isGeometryReady()) {\n                            geometryLoadedRef.current = true;\n                            clearInterval(checkGeometry);\n                        }\n                    }, 100);\n                    // Clear interval after 10 seconds to prevent infinite polling\n                    setTimeout(()=>clearInterval(checkGeometry), 10000);\n                }\n            } catch (error) {\n                console.error(\"Error setting up map:\", error);\n                setIsLoading(false);\n            }\n        }\n        window.setupMapInstance = setupMapInstance;\n        loadGoogleMapsScript();\n        return ()=>{\n            delete window.setupMapInstance;\n        };\n    }, [\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const setupMapFeatures = async ()=>{\n            if (!mapInstanceRef.current) return;\n            try {\n                const location = await getLocation(city);\n                // Update existing map instead of creating new one\n                mapInstanceRef.current.setCenter(location);\n                mapInstanceRef.current.setZoom(12);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error updating map features:\", error);\n                setIsLoading(false);\n            }\n        };\n        setupMapFeatures();\n    }, [\n        city\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const initializeMap = async ()=>{\n            // Wait for map to be idle before restoring markers\n            await new Promise((resolve)=>{\n                google.maps.event.addListenerOnce(map, \"idle\", ()=>{\n                    resolve();\n                });\n            });\n            const savedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            console.log(\"Restoring markers for saved places:\", savedPlaces.length);\n            savedPlaces.forEach((place)=>{\n                if (place.location) {\n                    var _window_addPlaceToMap, _window;\n                    (_window_addPlaceToMap = (_window = window).addPlaceToMap) === null || _window_addPlaceToMap === void 0 ? void 0 : _window_addPlaceToMap.call(_window, {\n                        latitude: place.location.latitude,\n                        longitude: place.location.longitude,\n                        title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n                        place: place\n                    });\n                }\n            });\n        };\n        initializeMap();\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    marker.map = null;\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    google.maps.event.clearInstanceListeners(marker);\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                var _data_place;\n                const markerId = ((_data_place = data.place) === null || _data_place === void 0 ? void 0 : _data_place.id) || data.title || String(Date.now());\n                const pinElement = new window.google.maps.marker.PinElement({\n                    background: \"#FF4444\",\n                    borderColor: \"#CC0000\",\n                    glyphColor: \"#FFFFFF\"\n                });\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(data.place);\n                    setMarkerCount((prev)=>prev + 1);\n                }\n                // Ensure the marker is properly added to the map\n                marker.map = mapInstanceRef.current;\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        var // Close any existing InfoWindow\n                        _infoWindowRef_current;\n                        (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current && mapInstanceRef.current) {\n                            const position = marker.position;\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.setPosition(position);\n                            infoWindowRef.current.open(mapInstanceRef.current);\n                        }\n                    }\n                });\n                markersRef.current.set(markerId, marker);\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        mapInstanceRef.current\n    ]); // Only depend on the map instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const handlePlacesChanged = async (event)=>{\n            const e = event;\n            console.log(\"[MapComponent] Places changed:\", e.detail);\n            // Clear existing markers\n            markersRef.current.forEach((marker)=>{\n                marker.map = null;\n            });\n            markersRef.current.clear();\n            // Add new markers\n            const places = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            places.forEach((place)=>{\n                if (place.location) {\n                    const marker = createMarker(place);\n                    if (marker) {\n                        marker.map = map;\n                        markersRef.current.set(place.id, marker);\n                    }\n                }\n            });\n        };\n        window.addEventListener(\"places-changed\", handlePlacesChanged);\n        return ()=>{\n            window.removeEventListener(\"places-changed\", handlePlacesChanged);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const handleTravelInfoDisplay = (event)=>{\n            const e = event;\n            setActiveTravelInfos((prev)=>[\n                    ...prev,\n                    e.detail\n                ]);\n        };\n        const handleTravelInfoHide = (event)=>{\n            const e = event;\n            setActiveTravelInfos((prev)=>prev.filter((info)=>info.fromId !== e.detail.fromId || info.toId !== e.detail.toId));\n        };\n        window.addEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n        window.addEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        return ()=>{\n            window.removeEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n            window.removeEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        };\n    }, [\n        mapInstanceRef.current\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        // Clear all existing polylines\n        polylineRef.current.forEach((polyline)=>polyline.setMap(null));\n        polylineRef.current.clear();\n        // Draw routes for active TravelInfos\n        activeTravelInfos.forEach(async (param)=>{\n            let { fromId, toId } = param;\n            const fromPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(fromId);\n            const toPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(toId);\n            if ((fromPlace === null || fromPlace === void 0 ? void 0 : fromPlace.dayIndex) !== undefined && toPlace) {\n                const color = getRouteColor(fromPlace.dayIndex);\n                const polyline = await drawRoute([\n                    fromPlace,\n                    toPlace\n                ], color);\n                if (polyline) {\n                    polylineRef.current.set(\"\".concat(fromId, \"-\").concat(toId), polyline);\n                }\n            }\n        });\n    }, [\n        activeTravelInfos\n    ]);\n    const drawRoute = async (places, color)=>{\n        if (!places || places.length !== 2 || !mapInstanceRef.current || !isGeometryReady()) return;\n        const [place1, place2] = places;\n        if (!place1.location || !place2.location) return;\n        try {\n            const info = await _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.getTravelInfo(place1, place2);\n            if (!info || !info.legPolyline) return;\n            const path = google.maps.geometry.encoding.decodePath(info.legPolyline);\n            return new google.maps.Polyline({\n                path,\n                strokeColor: color,\n                strokeOpacity: 0.8,\n                strokeWeight: 5,\n                map: mapInstanceRef.current\n            });\n        } catch (error) {\n            console.error(\"[MapComponent] Error drawing route:\", error);\n        }\n    };\n    const getPhotoUrl = (photo, index)=>{\n        var _photo_getURI;\n        return ((_photo_getURI = photo.getURI) === null || _photo_getURI === void 0 ? void 0 : _photo_getURI.call(photo)) || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                    </div>\\n                    \").concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    const isGeometryReady = ()=>{\n        var _window_google_maps_geometry_encoding, _window_google_maps_geometry, _window_google_maps, _window_google;\n        return !!(((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_geometry = _window_google_maps.geometry) === null || _window_google_maps_geometry === void 0 ? void 0 : (_window_google_maps_geometry_encoding = _window_google_maps_geometry.encoding) === null || _window_google_maps_geometry_encoding === void 0 ? void 0 : _window_google_maps_geometry_encoding.decodePath) && typeof window.google.maps.geometry.encoding.decodePath === \"function\");\n    };\n    const getLocation = async (city)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject)=>{\n            geocoder.geocode({\n                address: city\n            }, (results, status)=>{\n                var _results__geometry, _results_;\n                if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                    console.error(\"Geocoding failed:\", status);\n                    reject(\"Could not find location for \" + city);\n                } else {\n                    resolve(results[0].geometry.location);\n                }\n            });\n        });\n    };\n    const getRouteColor = (dayIndex)=>{\n        const colors = [\n            \"#2196F3\",\n            \"#9C27B0\",\n            \"#795548\",\n            \"#FF9800\",\n            \"#009688\",\n            \"#E91E63\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#00BCD4\",\n            \"#4CAF50\" // Green\n        ];\n        return colors[dayIndex % colors.length];\n    };\n    const createMarker = (place)=>{\n        if (!place.location) {\n            console.warn(\"[MapComponent] Cannot create marker: place missing location\", place);\n            return null;\n        }\n        const pinElement = new window.google.maps.marker.PinElement({\n            background: \"#FF4444\",\n            borderColor: \"#CC0000\",\n            glyphColor: \"#FFFFFF\"\n        });\n        const marker = new google.maps.marker.AdvancedMarkerElement({\n            position: {\n                lat: place.location.latitude,\n                lng: place.location.longitude\n            },\n            title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n            content: pinElement.element,\n            gmpDraggable: false\n        });\n        marker.addListener(\"gmp-click\", ()=>{\n            var // Close any existing InfoWindow\n            _infoWindowRef_current;\n            (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n            window.currentInfoWindowMarker = {\n                markerId: place.id,\n                marker: marker\n            };\n            const content = createPlaceInfoWindowContent(place, place.id);\n            if (content && infoWindowRef.current && mapInstanceRef.current) {\n                const position = marker.position;\n                infoWindowRef.current.setContent(content);\n                infoWindowRef.current.setPosition(position);\n                infoWindowRef.current.open(mapInstanceRef.current);\n            }\n        });\n        return marker;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 635,\n                columnNumber: 13\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 bg-red-500 text-white p-2 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 637,\n                columnNumber: 17\n            }, undefined),\n            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"\n                }, void 0, false, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 643,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 642,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 634,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"fkvZqn7wn+CYKhHkVUX0XpdyMLI=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL21hcC1jb21wb25lbnQudHN4PzM0MGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQbGFjZSwgc2F2ZWRQbGFjZXNNYW5hZ2VyLCBzZWFyY2hQbGFjZUJ5VGV4dCB9IGZyb20gJ0AvdXRpbHMvcGxhY2VzLXV0aWxzJztcbmltcG9ydCB7IFNFU1NJT05fQ09ORklHIH0gZnJvbSAnLi4vdXRpbHMvc2Vzc2lvbi1tYW5hZ2VyJztcbmltcG9ydCB7IHRyYXZlbEluZm9NYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvdHJhdmVsLWluZm8tdXRpbHMnO1xuXG5pbnRlcmZhY2UgTWFwQ29tcG9uZW50UHJvcHMge1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBhcGlLZXk6IHN0cmluZztcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBzZXR1cE1hcEluc3RhbmNlPzogKCkgPT4gdm9pZDtcbiAgICAgICAgY3VycmVudFNsaWRlOiBudW1iZXI7XG4gICAgICAgIGN1cnJlbnRJbmZvV2luZG93PzogZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdztcbiAgICAgICAgdXBkYXRlQ2Fyb3VzZWw6ICgpID0+IHZvaWQ7XG4gICAgICAgIG5leHRTbGlkZTogKCkgPT4gdm9pZDtcbiAgICAgICAgcHJldlNsaWRlOiAoKSA9PiB2b2lkO1xuICAgICAgICBnb1RvU2xpZGU6IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuICAgICAgICBnb29nbGU6IHR5cGVvZiBnb29nbGU7XG4gICAgICAgIHJlbW92ZVBsYWNlRnJvbU1hcD86ICh0aXRsZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgICAgICBjdXJyZW50SW5mb1dpbmRvd01hcmtlcj86IHtcbiAgICAgICAgICAgIG1hcmtlcklkOiBzdHJpbmc7XG4gICAgICAgICAgICBtYXJrZXI6IGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIGFkZFBsYWNlVG9NYXA/OiAocGxhY2U6IHsgXG4gICAgICAgICAgICBsYXRpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIGxvbmdpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICAgICAgcGxhY2U/OiBQbGFjZTtcbiAgICAgICAgfSkgPT4gdm9pZDtcbiAgICAgICAgY2xlYXJQbGFjZU1hcmtlcnM/OiAoKSA9PiB2b2lkO1xuICAgICAgICBzYXZlZFBsYWNlczogUGxhY2VbXTtcbiAgICAgICAgZ2V0U2F2ZWRQbGFjZXM/OiAoKSA9PiBQbGFjZVtdO1xuICAgIH1cbn1cblxuLy8gTW9kaWZ5IG1hcC1jb21wb25lbnQudHN4IHRvIGV4cG9zZSBhIHByb3BlciBnbG9iYWwgaW50ZXJmYWNlXG4vLyBBdCB0aGUgdG9wIG9mIGZpbGVcbmludGVyZmFjZSBTYXZlZFBsYWNlc01hbmFnZXIge1xuICAgIGFkZFBsYWNlOiAocGxhY2U6IFBsYWNlKSA9PiB2b2lkO1xuICAgIHJlbW92ZVBsYWNlOiAocGxhY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGdldFBsYWNlczogKCkgPT4gUGxhY2VbXTtcbiAgICBoYXNQbGFjZTogKHBsYWNlSWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcbn1cblxuLy8gRXhwb3NlIHR5cGUtc2FmZSBnbG9iYWwgbWV0aG9kc1xuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBzYXZlZFBsYWNlc01hbmFnZXI6IFNhdmVkUGxhY2VzTWFuYWdlcjtcbiAgICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBuYW1lc3BhY2UgZ29vZ2xlLm1hcHMge1xuICAgICAgICBpbnRlcmZhY2UgTWFya2VyTGlicmFyeSB7XG4gICAgICAgICAgICBBZHZhbmNlZE1hcmtlckVsZW1lbnQ6IHR5cGVvZiBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50O1xuICAgICAgICAgICAgUGluRWxlbWVudDogdHlwZW9mIGdvb2dsZS5tYXBzLm1hcmtlci5QaW5FbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzcGFjZSBnZW9tZXRyeSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UgZW5jb2Rpbmcge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlY29kZVBhdGgoZW5jb2RlZFBhdGg6IHN0cmluZyk6IGdvb2dsZS5tYXBzLkxhdExuZ1tdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmNvbnN0IE1hcENvbXBvbmVudDogUmVhY3QuRkM8TWFwQ29tcG9uZW50UHJvcHM+ID0gKHsgY2l0eSwgYXBpS2V5IH0pID0+IHtcbiAgICBjb25zdCBtYXBSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICAgIGNvbnN0IG1hcEluc3RhbmNlUmVmID0gdXNlUmVmPGdvb2dsZS5tYXBzLk1hcCB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFttYXAsIHNldE1hcF0gPSB1c2VTdGF0ZTxnb29nbGUubWFwcy5NYXAgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCBzY3JpcHRMb2FkZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGdlb21ldHJ5TG9hZGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBbc2VsZWN0ZWRQbGFjZSwgc2V0U2VsZWN0ZWRQbGFjZV0gPSB1c2VTdGF0ZTxQbGFjZSB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IG1hcmtlcnNSZWYgPSB1c2VSZWY8TWFwPHN0cmluZywgZ29vZ2xlLm1hcHMubWFya2VyLkFkdmFuY2VkTWFya2VyRWxlbWVudD4+KG5ldyBNYXAoKSk7XG4gICAgY29uc3QgaW5mb1dpbmRvd1JlZiA9IHVzZVJlZjxnb29nbGUubWFwcy5JbmZvV2luZG93IHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW21hcmtlckNvdW50LCBzZXRNYXJrZXJDb3VudF0gPSB1c2VTdGF0ZSgwKTtcbiAgICAvLyBUcmFjayBjdXJyZW50IGFjdGl2ZSBUcmF2ZWxJbmZvc1xuICAgIGNvbnN0IFthY3RpdmVUcmF2ZWxJbmZvcywgc2V0QWN0aXZlVHJhdmVsSW5mb3NdID0gdXNlU3RhdGU8e2Zyb21JZDogc3RyaW5nLCB0b0lkOiBzdHJpbmd9W10+KFtdKTtcbiAgICAvLyBUcmFjayBwb2x5bGluZXMgZm9yIGNsZWFudXBcbiAgICBjb25zdCBwb2x5bGluZVJlZiA9IHVzZVJlZjxNYXA8c3RyaW5nLCBnb29nbGUubWFwcy5Qb2x5bGluZT4+KG5ldyBNYXAoKSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWFwaUtleSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGxvYWRHb29nbGVNYXBzU2NyaXB0ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5nb29nbGU/Lm1hcHMpIHtcbiAgICAgICAgICAgICAgICBzZXR1cE1hcEluc3RhbmNlKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzY3JpcHRMb2FkZWRSZWYuY3VycmVudCAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyYyo9XCJtYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzXCJdJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQuc3JjID0gYGh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9JHthcGlLZXl9JmxpYnJhcmllcz1wbGFjZXMsbWFya2VyLGdlb21ldHJ5JnY9YmV0YSZjYWxsYmFjaz1zZXR1cE1hcEluc3RhbmNlYDtcbiAgICAgICAgICAgICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdExvYWRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbml0aWFsIG1hcCBzZXR1cCBhbmQgZ2VvbWV0cnkgbGlicmFyeSBjaGVja1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBzZXR1cE1hcEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKCFtYXBSZWYuY3VycmVudCB8fCBtYXBJbnN0YW5jZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBjaXR5IHByb3AgZGlyZWN0bHksIGZhbGxiYWNrIHRvIHNlc3Npb24gc3RvcmFnZSBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0Q2l0eSA9IGNpdHk7XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRDaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShzZXNzaW9uRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDaXR5ID0gcGFyc2VkLmNpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldENpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gY2l0eSBzcGVjaWZpZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gYXdhaXQgZ2V0TG9jYXRpb24odGFyZ2V0Q2l0eSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0gbmV3IHdpbmRvdy5nb29nbGUubWFwcy5NYXAobWFwUmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgem9vbTogMTIsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjogbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG1hcElkOiAnMmQ2MDRhZjA0YTdjN2ZhOCdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1hcEluc3RhbmNlUmVmLmN1cnJlbnQgPSBtYXA7XG4gICAgICAgICAgICAgICAgc2V0TWFwKG1hcCk7XG4gICAgICAgICAgICAgICAgbWFya2Vyc1JlZi5jdXJyZW50ID0gbmV3IE1hcCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgSW5mb1dpbmRvd1xuICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudCA9IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7XG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsT2Zmc2V0OiBuZXcgd2luZG93Lmdvb2dsZS5tYXBzLlNpemUoMCwgLTMwKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGdlb21ldHJ5IGxpYnJhcnkgaXMgbG9hZGVkXG4gICAgICAgICAgICAgICAgaWYgKGlzR2VvbWV0cnlSZWFkeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5TG9hZGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBvbGwgZm9yIGdlb21ldHJ5IGxpYnJhcnlcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tHZW9tZXRyeSA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0dlb21ldHJ5UmVhZHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5TG9hZGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tHZW9tZXRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIGludGVydmFsIGFmdGVyIDEwIHNlY29uZHMgdG8gcHJldmVudCBpbmZpbml0ZSBwb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY2xlYXJJbnRlcnZhbChjaGVja0dlb21ldHJ5KSwgMTAwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2V0dGluZyB1cCBtYXA6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cuc2V0dXBNYXBJbnN0YW5jZSA9IHNldHVwTWFwSW5zdGFuY2U7XG4gICAgICAgIGxvYWRHb29nbGVNYXBzU2NyaXB0KCk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuc2V0dXBNYXBJbnN0YW5jZTtcbiAgICAgICAgfTtcbiAgICB9LCBbYXBpS2V5XSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzZXR1cE1hcEZlYXR1cmVzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFtYXBJbnN0YW5jZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBhd2FpdCBnZXRMb2NhdGlvbihjaXR5KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgbWFwIGluc3RlYWQgb2YgY3JlYXRpbmcgbmV3IG9uZVxuICAgICAgICAgICAgICAgIG1hcEluc3RhbmNlUmVmLmN1cnJlbnQuc2V0Q2VudGVyKGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBtYXBJbnN0YW5jZVJlZi5jdXJyZW50LnNldFpvb20oMTIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIG1hcCBmZWF0dXJlczonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZXR1cE1hcEZlYXR1cmVzKCk7XG4gICAgfSwgW2NpdHldKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghbWFwKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgaW5pdGlhbGl6ZU1hcCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIFdhaXQgZm9yIG1hcCB0byBiZSBpZGxlIGJlZm9yZSByZXN0b3JpbmcgbWFya2Vyc1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lck9uY2UobWFwLCAnaWRsZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNhdmVkUGxhY2VzID0gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlcygpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Jlc3RvcmluZyBtYXJrZXJzIGZvciBzYXZlZCBwbGFjZXM6Jywgc2F2ZWRQbGFjZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2F2ZWRQbGFjZXMuZm9yRWFjaChwbGFjZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRQbGFjZVRvTWFwPy4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHBsYWNlLmxvY2F0aW9uLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBwbGFjZS5sb2NhdGlvbi5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyA/IHBsYWNlLmRpc3BsYXlOYW1lIDogcGxhY2UuZGlzcGxheU5hbWUudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiBwbGFjZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBpbml0aWFsaXplTWFwKCk7XG4gICAgfSwgW21hcF0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFtYXBJbnN0YW5jZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgd2luZG93LnJlbW92ZVBsYWNlRnJvbU1hcCA9IChwbGFjZUlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWJ1ZyAtIFN0YXJ0aW5nIHJlbW92YWwgcHJvY2VzcyBmb3IgcGxhY2VJZDonLCBwbGFjZUlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBtYXJrZXJzUmVmLmN1cnJlbnQuZ2V0KHBsYWNlSWQpO1xuICAgICAgICAgICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlYnVnIC0gRm91bmQgbWFya2VyOicsIG1hcmtlcik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXIubWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvV2luZG93UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuY2xlYXJJbnN0YW5jZUxpc3RlbmVycyhtYXJrZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnNSZWYuY3VycmVudC5kZWxldGUocGxhY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzTWFuYWdlci5yZW1vdmVQbGFjZShwbGFjZUlkKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgLSBBZnRlciByZW1vdmFsIG1hcmtlcnM6JywgWy4uLm1hcmtlcnNSZWYuY3VycmVudC5lbnRyaWVzKCldKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlYnVnIC0gU3VjY2Vzc2Z1bGx5IHJlbW92ZWQgbWFya2VyIGFuZCBwbGFjZTonLCBwbGFjZUlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlYnVnIC0gQ291bGQgbm90IGZpbmQgbWFya2VyIGZvciBwbGFjZUlkOicsIHBsYWNlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRGVidWcgLSBFcnJvciBkdXJpbmcgbWFya2VyIHJlbW92YWw6JywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NhdmVkUGxhY2VzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VzOiBBcnJheS5mcm9tKHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMudmFsdWVzKCkpLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy5zaXplXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRQbGFjZVRvTWFwID0gYXN5bmMgKGRhdGE6IHsgXG4gICAgICAgICAgICBsYXRpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIGxvbmdpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICAgICAgcGxhY2U/OiBQbGFjZTtcbiAgICAgICAgfSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJJZCA9IGRhdGEucGxhY2U/LmlkIHx8IGRhdGEudGl0bGUgfHwgU3RyaW5nKERhdGUubm93KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpbkVsZW1lbnQgPSBuZXcgd2luZG93Lmdvb2dsZS5tYXBzLm1hcmtlci5QaW5FbGVtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCIjRkY0NDQ0XCIsICAvLyBCcmlnaHQgcmVkXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiNDQzAwMDBcIiwgLy8gRGFya2VyIHJlZCBib3JkZXJcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhDb2xvcjogXCIjRkZGRkZGXCIsICAvLyBXaGl0ZSBnbHlwaCBmb3IgYmV0dGVyIGNvbnRyYXN0XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgbWFya2VyIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmIChtYXJrZXJzUmVmLmN1cnJlbnQuaGFzKG1hcmtlcklkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ01hcmtlciA9IG1hcmtlcnNSZWYuY3VycmVudC5nZXQobWFya2VySWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTWFya2VyLm1hcCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdNYXJrZXIuZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTWFya2VyLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuZGVsZXRlKG1hcmtlcklkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogZGF0YS5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogZGF0YS5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHBpbkVsZW1lbnQuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZ21wRHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzTWFuYWdlci5hZGRQbGFjZShkYXRhLnBsYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0TWFya2VyQ291bnQocHJldiA9PiBwcmV2ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBtYXJrZXIgaXMgcHJvcGVybHkgYWRkZWQgdG8gdGhlIG1hcFxuICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBtYXBJbnN0YW5jZVJlZi5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdnbXAtY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSBhbnkgZXhpc3RpbmcgSW5mb1dpbmRvd1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50Py5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3VycmVudEluZm9XaW5kb3dNYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VySWQ6IG1hcmtlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlUGxhY2VJbmZvV2luZG93Q29udGVudChkYXRhLnBsYWNlLCBtYXJrZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCAmJiBpbmZvV2luZG93UmVmLmN1cnJlbnQgJiYgbWFwSW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbWFya2VyLnBvc2l0aW9uIGFzIGdvb2dsZS5tYXBzLkxhdExuZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5vcGVuKG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuc2V0KG1hcmtlcklkLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZWRQbGFjZXNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlczogQXJyYXkuZnJvbShzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBwbGFjZSBtYXJrZXI6JywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3cuZ2V0U2F2ZWRQbGFjZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlcygpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICB9LCBbbWFwSW5zdGFuY2VSZWYuY3VycmVudF0pOyAvLyBPbmx5IGRlcGVuZCBvbiB0aGUgbWFwIGluc3RhbmNlXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShzZXNzaW9uRGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFBsYWNlcyA9IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXJzZWQsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBY3RpdmU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzOiB1cGRhdGVkUGxhY2VzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBwbGFjZXMgdG8gc2Vzc2lvbjonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbc2F2ZWRQbGFjZXNNYW5hZ2VyXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnICYmIG1hcCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5nb29nbGU/Lm1hcHM/LmV2ZW50Py50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgICAgfTtcbiAgICB9LCBbbWFwXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShzZXNzaW9uRGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5zYXZlZFBsYWNlcykge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWQuc2F2ZWRQbGFjZXMuZm9yRWFjaCgocGxhY2U6IFBsYWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2UuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlZFBsYWNlc01hbmFnZXIuYWRkUGxhY2UocGxhY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzYXZlZFBsYWNlc0NoYW5nZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZXM6IEFycmF5LmZyb20oc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy52YWx1ZXMoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMuc2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHNhdmVkIHBsYWNlcyBmcm9tIHNlc3Npb246JywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFtYXApIHJldHVybjtcblxuICAgICAgICBjb25zdCBoYW5kbGVQbGFjZXNDaGFuZ2VkID0gYXN5bmMgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IGV2ZW50IGFzIEN1c3RvbUV2ZW50PHsgdHlwZT86IHN0cmluZzsgc291cmNlRGF5SWQ/OiBzdHJpbmc7IH0+O1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tNYXBDb21wb25lbnRdIFBsYWNlcyBjaGFuZ2VkOicsIGUuZGV0YWlsKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgZXhpc3RpbmcgbWFya2Vyc1xuICAgICAgICAgICAgbWFya2Vyc1JlZi5jdXJyZW50LmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgICAgICAgICAgICBtYXJrZXIubWFwID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWFya2Vyc1JlZi5jdXJyZW50LmNsZWFyKCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBuZXcgbWFya2Vyc1xuICAgICAgICAgICAgY29uc3QgcGxhY2VzID0gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlcygpO1xuICAgICAgICAgICAgcGxhY2VzLmZvckVhY2gocGxhY2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZS5sb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBjcmVhdGVNYXJrZXIocGxhY2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIubWFwID0gbWFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1JlZi5jdXJyZW50LnNldChwbGFjZS5pZCwgbWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwbGFjZXMtY2hhbmdlZCcsIGhhbmRsZVBsYWNlc0NoYW5nZWQpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGxhY2VzLWNoYW5nZWQnLCBoYW5kbGVQbGFjZXNDaGFuZ2VkKTtcbiAgICAgICAgfTtcbiAgICB9LCBbbWFwXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBoYW5kbGVUcmF2ZWxJbmZvRGlzcGxheSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBldmVudCBhcyBDdXN0b21FdmVudDx7ZnJvbUlkOiBzdHJpbmcsIHRvSWQ6IHN0cmluZ30+O1xuICAgICAgICAgICAgc2V0QWN0aXZlVHJhdmVsSW5mb3MocHJldiA9PiBbLi4ucHJldiwgZS5kZXRhaWxdKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVUcmF2ZWxJbmZvSGlkZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBldmVudCBhcyBDdXN0b21FdmVudDx7ZnJvbUlkOiBzdHJpbmcsIHRvSWQ6IHN0cmluZ30+O1xuICAgICAgICAgICAgc2V0QWN0aXZlVHJhdmVsSW5mb3MocHJldiA9PiBcbiAgICAgICAgICAgICAgICBwcmV2LmZpbHRlcihpbmZvID0+IFxuICAgICAgICAgICAgICAgICAgICBpbmZvLmZyb21JZCAhPT0gZS5kZXRhaWwuZnJvbUlkIHx8IGluZm8udG9JZCAhPT0gZS5kZXRhaWwudG9JZFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYXZlbGluZm8tZGlzcGxheWVkJywgaGFuZGxlVHJhdmVsSW5mb0Rpc3BsYXkpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndHJhdmVsaW5mby1oaWRkZW4nLCBoYW5kbGVUcmF2ZWxJbmZvSGlkZSk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmF2ZWxpbmZvLWRpc3BsYXllZCcsIGhhbmRsZVRyYXZlbEluZm9EaXNwbGF5KTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmF2ZWxpbmZvLWhpZGRlbicsIGhhbmRsZVRyYXZlbEluZm9IaWRlKTtcbiAgICAgICAgfTtcbiAgICB9LCBbbWFwSW5zdGFuY2VSZWYuY3VycmVudF0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFtYXBJbnN0YW5jZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgLy8gQ2xlYXIgYWxsIGV4aXN0aW5nIHBvbHlsaW5lc1xuICAgICAgICBwb2x5bGluZVJlZi5jdXJyZW50LmZvckVhY2gocG9seWxpbmUgPT4gcG9seWxpbmUuc2V0TWFwKG51bGwpKTtcbiAgICAgICAgcG9seWxpbmVSZWYuY3VycmVudC5jbGVhcigpO1xuXG4gICAgICAgIC8vIERyYXcgcm91dGVzIGZvciBhY3RpdmUgVHJhdmVsSW5mb3NcbiAgICAgICAgYWN0aXZlVHJhdmVsSW5mb3MuZm9yRWFjaChhc3luYyAoeyBmcm9tSWQsIHRvSWQgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnJvbVBsYWNlID0gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlQnlJZChmcm9tSWQpO1xuICAgICAgICAgICAgY29uc3QgdG9QbGFjZSA9IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZUJ5SWQodG9JZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmcm9tUGxhY2U/LmRheUluZGV4ICE9PSB1bmRlZmluZWQgJiYgdG9QbGFjZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZ2V0Um91dGVDb2xvcihmcm9tUGxhY2UuZGF5SW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvbHlsaW5lID0gYXdhaXQgZHJhd1JvdXRlKFtmcm9tUGxhY2UsIHRvUGxhY2VdLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgaWYgKHBvbHlsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbHlsaW5lUmVmLmN1cnJlbnQuc2V0KGAke2Zyb21JZH0tJHt0b0lkfWAsIHBvbHlsaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIFthY3RpdmVUcmF2ZWxJbmZvc10pO1xuXG4gICAgY29uc3QgZHJhd1JvdXRlID0gYXN5bmMgKHBsYWNlczogUGxhY2VbXSwgY29sb3I6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIXBsYWNlcyB8fCBwbGFjZXMubGVuZ3RoICE9PSAyIHx8ICFtYXBJbnN0YW5jZVJlZi5jdXJyZW50IHx8ICFpc0dlb21ldHJ5UmVhZHkoKSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IFtwbGFjZTEsIHBsYWNlMl0gPSBwbGFjZXM7XG4gICAgICAgIGlmICghcGxhY2UxLmxvY2F0aW9uIHx8ICFwbGFjZTIubG9jYXRpb24pIHJldHVybjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRyYXZlbEluZm9NYW5hZ2VyLmdldFRyYXZlbEluZm8ocGxhY2UxLCBwbGFjZTIpO1xuICAgICAgICAgICAgaWYgKCFpbmZvIHx8ICFpbmZvLmxlZ1BvbHlsaW5lKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBnb29nbGUubWFwcy5nZW9tZXRyeS5lbmNvZGluZy5kZWNvZGVQYXRoKGluZm8ubGVnUG9seWxpbmUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5Qb2x5bGluZSh7XG4gICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eTogMC44LFxuICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogNSxcbiAgICAgICAgICAgICAgICBtYXA6IG1hcEluc3RhbmNlUmVmLmN1cnJlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW01hcENvbXBvbmVudF0gRXJyb3IgZHJhd2luZyByb3V0ZTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0UGhvdG9VcmwgPSAocGhvdG86IGdvb2dsZS5tYXBzLnBsYWNlcy5QaG90bywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gcGhvdG8uZ2V0VVJJPy4oKSB8fCAnJztcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlU2xpZGVDaGFuZ2UgPSAoXzogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmICh3aW5kb3cuY3VycmVudFNsaWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jdXJyZW50U2xpZGUgPSBpbmRleDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjcmVhdGVQbGFjZUluZm9XaW5kb3dDb250ZW50ID0gKHBsYWNlOiBQbGFjZSwgbWFya2VySWQ6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgLSBDcmVhdGluZyBpbmZvIHdpbmRvdyBjb250ZW50IGZvciBtYXJrZXJJZDonLCBtYXJrZXJJZCk7XG4gICAgICAgIGNvbnN0IHBob3RvVXJsID0gcGxhY2UucGhvdG9zICYmIHBsYWNlLnBob3Rvc1swXSBcbiAgICAgICAgICAgID8gYGh0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxLyR7cGxhY2UucGhvdG9zWzBdLm5hbWV9L21lZGlhP21heEhlaWdodFB4PTIwMCZtYXhXaWR0aFB4PTMwMCZrZXk9JHthcGlLZXl9YFxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICBjb25zdCBwbGFjZVRpdGxlID0gdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyA/IHBsYWNlLmRpc3BsYXlOYW1lIDogcGxhY2UuZGlzcGxheU5hbWUudGV4dDtcblxuICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LXNtXCIgc3R5bGU9XCJtYXgtd2lkdGg6IDMwMHB4O1wiPlxuICAgICAgICAgICAgICAgICR7cGhvdG9VcmwgPyBgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJoZWlnaHQ6IDE1MHB4OyB3aWR0aDogMTAwJTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtwaG90b1VybH1cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCIke3BsYWNlVGl0bGV9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IG9iamVjdC1maXQ6IGNvdmVyOyBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjVyZW07IGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjVyZW07XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIGAgOiAnJ31cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTkwMCBtYi0xXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtwbGFjZVRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICR7cGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYDxkaXYgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbWItMVwiPiR7cGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS50ZXh0fTwvZGl2PmBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICR7cGxhY2UuZm9ybWF0dGVkQWRkcmVzcyBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYDxwIGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+JHtwbGFjZS5mb3JtYXR0ZWRBZGRyZXNzfTwvcD5gXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfTtcblxuICAgIGNvbnN0IGlzR2VvbWV0cnlSZWFkeSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICEhKFxuICAgICAgICAgICAgd2luZG93Lmdvb2dsZT8ubWFwcz8uZ2VvbWV0cnk/LmVuY29kaW5nPy5kZWNvZGVQYXRoICYmXG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93Lmdvb2dsZS5tYXBzLmdlb21ldHJ5LmVuY29kaW5nLmRlY29kZVBhdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0TG9jYXRpb24gPSBhc3luYyAoY2l0eTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGdlb2NvZGVyID0gbmV3IHdpbmRvdy5nb29nbGUubWFwcy5HZW9jb2RlcigpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxnb29nbGUubWFwcy5MYXRMbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoXG4gICAgICAgICAgICAgICAgeyBhZGRyZXNzOiBjaXR5IH0sXG4gICAgICAgICAgICAgICAgKHJlc3VsdHMsIHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAnT0snIHx8ICFyZXN1bHRzPy5bMF0/Lmdlb21ldHJ5Py5sb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignR2VvY29kaW5nIGZhaWxlZDonLCBzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdDb3VsZCBub3QgZmluZCBsb2NhdGlvbiBmb3IgJyArIGNpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRSb3V0ZUNvbG9yID0gKGRheUluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgY29sb3JzID0gW1xuICAgICAgICAgICAgJyMyMTk2RjMnLCAvLyBCbHVlXG4gICAgICAgICAgICAnIzlDMjdCMCcsIC8vIFB1cnBsZVxuICAgICAgICAgICAgJyM3OTU1NDgnLCAvLyBCcm93blxuICAgICAgICAgICAgJyNGRjk4MDAnLCAvLyBPcmFuZ2VcbiAgICAgICAgICAgICcjMDA5Njg4JywgLy8gVGVhbFxuICAgICAgICAgICAgJyNFOTFFNjMnLCAvLyBQaW5rXG4gICAgICAgICAgICAnIzY3M0FCNycsIC8vIERlZXAgUHVycGxlXG4gICAgICAgICAgICAnIzNGNTFCNScsIC8vIEluZGlnb1xuICAgICAgICAgICAgJyMwMEJDRDQnLCAvLyBDeWFuXG4gICAgICAgICAgICAnIzRDQUY1MCcgIC8vIEdyZWVuXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBjb2xvcnNbZGF5SW5kZXggJSBjb2xvcnMubGVuZ3RoXTtcbiAgICB9O1xuXG4gICAgY29uc3QgY3JlYXRlTWFya2VyID0gKHBsYWNlOiBQbGFjZSkgPT4ge1xuICAgICAgICBpZiAoIXBsYWNlLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tNYXBDb21wb25lbnRdIENhbm5vdCBjcmVhdGUgbWFya2VyOiBwbGFjZSBtaXNzaW5nIGxvY2F0aW9uJywgcGxhY2UpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwaW5FbGVtZW50ID0gbmV3IHdpbmRvdy5nb29nbGUubWFwcy5tYXJrZXIuUGluRWxlbWVudCh7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiNGRjQ0NDRcIiwgIC8vIEJyaWdodCByZWRcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiNDQzAwMDBcIiwgLy8gRGFya2VyIHJlZCBib3JkZXJcbiAgICAgICAgICAgIGdseXBoQ29sb3I6IFwiI0ZGRkZGRlwiLCAgLy8gV2hpdGUgZ2x5cGggZm9yIGJldHRlciBjb250cmFzdFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMubWFya2VyLkFkdmFuY2VkTWFya2VyRWxlbWVudCh7XG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIGxhdDogcGxhY2UubG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgbG5nOiBwbGFjZS5sb2NhdGlvbi5sb25naXR1ZGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZTogdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyA/IHBsYWNlLmRpc3BsYXlOYW1lIDogcGxhY2UuZGlzcGxheU5hbWUudGV4dCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHBpbkVsZW1lbnQuZWxlbWVudCxcbiAgICAgICAgICAgIGdtcERyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1hcmtlci5hZGRMaXN0ZW5lcignZ21wLWNsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2xvc2UgYW55IGV4aXN0aW5nIEluZm9XaW5kb3dcbiAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudD8uY2xvc2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2luZG93LmN1cnJlbnRJbmZvV2luZG93TWFya2VyID0ge1xuICAgICAgICAgICAgICAgIG1hcmtlcklkOiBwbGFjZS5pZCxcbiAgICAgICAgICAgICAgICBtYXJrZXI6IG1hcmtlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGNyZWF0ZVBsYWNlSW5mb1dpbmRvd0NvbnRlbnQocGxhY2UsIHBsYWNlLmlkKTtcbiAgICAgICAgICAgIGlmIChjb250ZW50ICYmIGluZm9XaW5kb3dSZWYuY3VycmVudCAmJiBtYXBJbnN0YW5jZVJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBtYXJrZXIucG9zaXRpb24gYXMgZ29vZ2xlLm1hcHMuTGF0TG5nO1xuICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5zZXRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50Lm9wZW4obWFwSW5zdGFuY2VSZWYuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCByZWxhdGl2ZVwiPlxuICAgICAgICAgICAgPGRpdiByZWY9e21hcFJlZn0gY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbFwiIC8+XG4gICAgICAgICAgICB7ZXJyb3IgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTAgbGVmdC0wIHJpZ2h0LTAgYmctcmVkLTUwMCB0ZXh0LXdoaXRlIHAtMiB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICB7ZXJyb3J9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2lzTG9hZGluZyAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGJnLWdyYXktMTAwIGJnLW9wYWNpdHktNzVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtOCB3LTggYm9yZGVyLWItMiBib3JkZXItZ3JheS05MDBcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDb21wb25lbnQ7Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJzYXZlZFBsYWNlc01hbmFnZXIiLCJTRVNTSU9OX0NPTkZJRyIsInRyYXZlbEluZm9NYW5hZ2VyIiwiTWFwQ29tcG9uZW50IiwiY2l0eSIsImFwaUtleSIsIm1hcFJlZiIsIm1hcEluc3RhbmNlUmVmIiwibWFwIiwic2V0TWFwIiwiZXJyb3IiLCJzZXRFcnJvciIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsInNjcmlwdExvYWRlZFJlZiIsImdlb21ldHJ5TG9hZGVkUmVmIiwic2VsZWN0ZWRQbGFjZSIsInNldFNlbGVjdGVkUGxhY2UiLCJtYXJrZXJzUmVmIiwiTWFwIiwiaW5mb1dpbmRvd1JlZiIsIm1hcmtlckNvdW50Iiwic2V0TWFya2VyQ291bnQiLCJhY3RpdmVUcmF2ZWxJbmZvcyIsInNldEFjdGl2ZVRyYXZlbEluZm9zIiwicG9seWxpbmVSZWYiLCJsb2FkR29vZ2xlTWFwc1NjcmlwdCIsIndpbmRvdyIsImdvb2dsZSIsIm1hcHMiLCJzZXR1cE1hcEluc3RhbmNlIiwiY3VycmVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJhc3luYyIsImRlZmVyIiwiaGVhZCIsImFwcGVuZENoaWxkIiwidGFyZ2V0Q2l0eSIsInNlc3Npb25EYXRhIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiU1RPUkFHRV9LRVkiLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJjb25zb2xlIiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsInpvb20iLCJjZW50ZXIiLCJtYXBJZCIsIkluZm9XaW5kb3ciLCJtYXhXaWR0aCIsInBpeGVsT2Zmc2V0IiwiU2l6ZSIsImlzR2VvbWV0cnlSZWFkeSIsImNoZWNrR2VvbWV0cnkiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0Iiwic2V0dXBNYXBGZWF0dXJlcyIsInNldENlbnRlciIsInNldFpvb20iLCJpbml0aWFsaXplTWFwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJldmVudCIsImFkZExpc3RlbmVyT25jZSIsInNhdmVkUGxhY2VzIiwiZ2V0UGxhY2VzIiwibG9nIiwibGVuZ3RoIiwiZm9yRWFjaCIsInBsYWNlIiwiYWRkUGxhY2VUb01hcCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwidGl0bGUiLCJkaXNwbGF5TmFtZSIsInRleHQiLCJyZW1vdmVQbGFjZUZyb21NYXAiLCJwbGFjZUlkIiwibWFya2VyIiwiZ2V0IiwiY2xvc2UiLCJjbGVhckluc3RhbmNlTGlzdGVuZXJzIiwiZGVsZXRlIiwicmVtb3ZlUGxhY2UiLCJlbnRyaWVzIiwid2FybiIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsInBsYWNlcyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImNvdW50Iiwic2l6ZSIsImRhdGEiLCJtYXJrZXJJZCIsImlkIiwiU3RyaW5nIiwiRGF0ZSIsIm5vdyIsInBpbkVsZW1lbnQiLCJQaW5FbGVtZW50IiwiYmFja2dyb3VuZCIsImJvcmRlckNvbG9yIiwiZ2x5cGhDb2xvciIsImhhcyIsImV4aXN0aW5nTWFya2VyIiwiZWxlbWVudCIsInJlbW92ZSIsIkFkdmFuY2VkTWFya2VyRWxlbWVudCIsInBvc2l0aW9uIiwibGF0IiwibG5nIiwiY29udGVudCIsImdtcERyYWdnYWJsZSIsImFkZFBsYWNlIiwicHJldiIsImFkZExpc3RlbmVyIiwiY3VycmVudEluZm9XaW5kb3dNYXJrZXIiLCJjcmVhdGVQbGFjZUluZm9XaW5kb3dDb250ZW50Iiwic2V0Q29udGVudCIsInNldFBvc2l0aW9uIiwib3BlbiIsInNldCIsImVyciIsImdldFNhdmVkUGxhY2VzIiwidXBkYXRlZFBsYWNlcyIsInNlc3Npb25EYXRhV2l0aFVwZGF0ZWRQbGFjZXMiLCJsYXN0QWN0aXZlIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ0cmlnZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVQbGFjZXNDaGFuZ2VkIiwiZSIsImNsZWFyIiwiY3JlYXRlTWFya2VyIiwiaGFuZGxlVHJhdmVsSW5mb0Rpc3BsYXkiLCJoYW5kbGVUcmF2ZWxJbmZvSGlkZSIsImZpbHRlciIsImluZm8iLCJmcm9tSWQiLCJ0b0lkIiwicG9seWxpbmUiLCJmcm9tUGxhY2UiLCJnZXRQbGFjZUJ5SWQiLCJ0b1BsYWNlIiwiZGF5SW5kZXgiLCJ1bmRlZmluZWQiLCJjb2xvciIsImdldFJvdXRlQ29sb3IiLCJkcmF3Um91dGUiLCJwbGFjZTEiLCJwbGFjZTIiLCJnZXRUcmF2ZWxJbmZvIiwibGVnUG9seWxpbmUiLCJwYXRoIiwiZ2VvbWV0cnkiLCJlbmNvZGluZyIsImRlY29kZVBhdGgiLCJQb2x5bGluZSIsInN0cm9rZUNvbG9yIiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdlaWdodCIsImdldFBob3RvVXJsIiwicGhvdG8iLCJpbmRleCIsImdldFVSSSIsImhhbmRsZVNsaWRlQ2hhbmdlIiwiXyIsImN1cnJlbnRTbGlkZSIsInBob3RvVXJsIiwicGhvdG9zIiwibmFtZSIsInBsYWNlVGl0bGUiLCJwcmltYXJ5VHlwZURpc3BsYXlOYW1lIiwiZm9ybWF0dGVkQWRkcmVzcyIsImdlb2NvZGVyIiwiR2VvY29kZXIiLCJyZWplY3QiLCJnZW9jb2RlIiwiYWRkcmVzcyIsInJlc3VsdHMiLCJzdGF0dXMiLCJjb2xvcnMiLCJkaXYiLCJjbGFzc05hbWUiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n"));

/***/ })

});