"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/travel-info-utils */ \"./utils/travel-info-utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst MapComponent = (param)=>{\n    let { city, apiKey } = param;\n    _s();\n    var _s1 = $RefreshSig$();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scriptLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const geometryLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const routesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!apiKey) return;\n        const loadGoogleMapsScript = ()=>{\n            var _window_google;\n            if ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : _window_google.maps) {\n                setupMapInstance();\n            } else if (!scriptLoadedRef.current && !document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]')) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(apiKey, \"&libraries=places,marker,geometry&v=beta&callback=setupMapInstance\");\n                script.async = true;\n                script.defer = true;\n                document.head.appendChild(script);\n                scriptLoadedRef.current = true;\n            }\n        };\n        // Initial map setup and geometry library check\n        async function setupMapInstance() {\n            if (!mapRef.current || mapInstanceRef.current) return;\n            try {\n                // Use the city prop directly, fallback to session storage if needed\n                let targetCity = city;\n                if (!targetCity) {\n                    const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n                    if (sessionData) {\n                        const parsed = JSON.parse(sessionData);\n                        targetCity = parsed.city;\n                    }\n                }\n                if (!targetCity) {\n                    console.error(\"No city specified\");\n                    setIsLoading(false);\n                    return;\n                }\n                const location = await getLocation(targetCity);\n                const map = new window.google.maps.Map(mapRef.current, {\n                    zoom: 12,\n                    center: location,\n                    mapId: \"2d604af04a7c7fa8\"\n                });\n                mapInstanceRef.current = map;\n                setMap(map);\n                markersRef.current = new Map();\n                routesRef.current = new Map();\n                // Initialize the InfoWindow\n                infoWindowRef.current = new window.google.maps.InfoWindow({\n                    maxWidth: 300,\n                    pixelOffset: new window.google.maps.Size(0, -30)\n                });\n                setIsLoading(false);\n                // Check if geometry library is loaded\n                if (isGeometryReady()) {\n                    geometryLoadedRef.current = true;\n                } else {\n                    // Poll for geometry library\n                    const checkGeometry = setInterval(()=>{\n                        if (isGeometryReady()) {\n                            geometryLoadedRef.current = true;\n                            clearInterval(checkGeometry);\n                        }\n                    }, 100);\n                    // Clear interval after 10 seconds to prevent infinite polling\n                    setTimeout(()=>clearInterval(checkGeometry), 10000);\n                }\n            } catch (error) {\n                console.error(\"Error setting up map:\", error);\n                setIsLoading(false);\n            }\n        }\n        window.setupMapInstance = setupMapInstance;\n        loadGoogleMapsScript();\n        return ()=>{\n            delete window.setupMapInstance;\n        };\n    }, [\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const setupMapFeatures = async ()=>{\n            if (!mapInstanceRef.current) return;\n            try {\n                const location = await getLocation(city);\n                // Update existing map instead of creating new one\n                mapInstanceRef.current.setCenter(location);\n                mapInstanceRef.current.setZoom(12);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error updating map features:\", error);\n                setIsLoading(false);\n            }\n        };\n        setupMapFeatures();\n    }, [\n        city\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const initializeMap = async ()=>{\n            // Wait for map to be idle before restoring markers\n            await new Promise((resolve)=>{\n                google.maps.event.addListenerOnce(map, \"idle\", ()=>{\n                    resolve();\n                });\n            });\n            const savedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            console.log(\"Restoring markers for saved places:\", savedPlaces.length);\n            savedPlaces.forEach((place)=>{\n                if (place.location) {\n                    var _window_addPlaceToMap, _window;\n                    (_window_addPlaceToMap = (_window = window).addPlaceToMap) === null || _window_addPlaceToMap === void 0 ? void 0 : _window_addPlaceToMap.call(_window, {\n                        latitude: place.location.latitude,\n                        longitude: place.location.longitude,\n                        title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n                        place: place\n                    });\n                }\n            });\n        };\n        initializeMap();\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    marker.map = null;\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    google.maps.event.clearInstanceListeners(marker);\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                var _data_place;\n                const markerId = ((_data_place = data.place) === null || _data_place === void 0 ? void 0 : _data_place.id) || data.title || String(Date.now());\n                const pinElement = new window.google.maps.marker.PinElement({\n                    background: \"#FF4444\",\n                    borderColor: \"#CC0000\",\n                    glyphColor: \"#FFFFFF\"\n                });\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(data.place);\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places));\n                }\n                // Ensure the marker is properly added to the map\n                marker.map = mapInstanceRef.current;\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        var // Close any existing InfoWindow\n                        _infoWindowRef_current;\n                        (_infoWindowRef_current = infoWindowRef.current) === null || _infoWindowRef_current === void 0 ? void 0 : _infoWindowRef_current.close();\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current && mapInstanceRef.current) {\n                            const position = marker.position;\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.setPosition(position);\n                            infoWindowRef.current.open(mapInstanceRef.current);\n                        }\n                    }\n                });\n                markersRef.current.set(markerId, marker);\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        mapInstanceRef.current\n    ]); // Only depend on the map instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                var _window_google_maps_event, _window_google_maps, _window_google;\n                (_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_event = _window_google_maps.event) === null || _window_google_maps_event === void 0 ? void 0 : _window_google_maps_event.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(_s1(()=>{\n        _s1();\n        if (!map) return;\n        const handlePlacesChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((places)=>{\n            console.log(\"[MapComponent] Places changed:\", places.length);\n            // Group places by day\n            const placesByDay = new Map();\n            places.forEach((place)=>{\n                if (place.dayIndex !== undefined) {\n                    const dayPlaces = placesByDay.get(place.dayIndex) || [];\n                    dayPlaces.push(place);\n                    placesByDay.set(place.dayIndex, dayPlaces);\n                }\n            });\n            // Clear all existing routes first\n            clearAllRoutes();\n            // Clear travel info cache for all affected days\n            placesByDay.forEach((_, dayIndex)=>{\n                _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.clearRoutesForDay(dayIndex);\n            });\n            // Draw routes for each day\n            placesByDay.forEach((dayPlaces, dayIndex)=>{\n                if (dayPlaces.length >= 2) {\n                    const color = getColorForDay(dayIndex);\n                    drawRoute(dayPlaces, \"day-\".concat(dayIndex), color);\n                }\n            });\n        }, [\n            clearAllRoutes,\n            drawRoute\n        ]);\n        const handlePlaceMoved = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((place, fromDay, toDay)=>{\n            console.log(\"[MapComponent] Place moved between days:\", {\n                place: place.name,\n                from: fromDay,\n                to: toDay\n            });\n            // Clear routes for both affected days\n            _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.clearRoutesForDay(fromDay);\n            _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.clearRoutesForDay(toDay);\n            // Clear the place's specific routes\n            _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.clearRoutesForPlace(place);\n            // Trigger a full places update to redraw routes\n            handlePlacesChanged(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces());\n        }, [\n            handlePlacesChanged\n        ]);\n        // Type-safe event handler\n        const handleSavedPlacesChanged = (event)=>{\n            const customEvent = event;\n            console.log(\"[MapComponent] Places changed event received:\", customEvent.detail);\n            handlePlacesChanged(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces());\n        };\n        // Add event listener with proper typing\n        window.addEventListener(\"savedPlacesChanged\", handleSavedPlacesChanged);\n        return ()=>{\n            clearAllRoutes();\n            window.removeEventListener(\"savedPlacesChanged\", handleSavedPlacesChanged);\n        };\n    }, \"OsaPcLDseZntHcYeOiKfIKSiKWc=\"), [\n        map,\n        clearAllRoutes,\n        drawRoute\n    ]);\n    const clearAllRoutes = ()=>{\n        console.log(\"[MapComponent] Clearing ALL routes\");\n        // First set all polylines' map to null\n        routesRef.current.forEach((route, dayId)=>{\n            console.log(\"[MapComponent] Removing route from map: day-\".concat(dayId));\n            route.setMap(null);\n        });\n        // Then clear the routes map\n        routesRef.current.clear();\n        console.log(\"[MapComponent] All routes cleared\");\n    };\n    const drawRoute = async (places, dayId, color)=>{\n        var _places_;\n        console.log(\"[MapComponent] Drawing route for day \".concat(dayId, \" with \").concat(places.length, \" places\"));\n        // Validate all places are from the same day and have correct indices\n        const dayIndex = (_places_ = places[0]) === null || _places_ === void 0 ? void 0 : _places_.dayIndex;\n        if (!dayIndex || !places.every((p)=>p.dayIndex === dayIndex)) {\n            console.warn(\"[MapComponent] Places from different days or invalid dayIndex, skipping route:\", places.map((p)=>({\n                    name: p.name,\n                    dayIndex: p.dayIndex\n                })));\n            return;\n        }\n        // Sort places by orderIndex to ensure correct order\n        places.sort((a, b)=>(a.orderIndex || 0) - (b.orderIndex || 0));\n        // Verify places are consecutive in the day\n        for(let i = 1; i < places.length; i++){\n            const prevPlace = places[i - 1];\n            const currPlace = places[i];\n            // Check if places are consecutive in order\n            if (currPlace.orderIndex !== prevPlace.orderIndex + 1) {\n                console.warn(\"[MapComponent] Non-consecutive places in day \".concat(dayIndex, \":\"), {\n                    prev: {\n                        name: prevPlace.name,\n                        order: prevPlace.orderIndex\n                    },\n                    curr: {\n                        name: currPlace.name,\n                        order: currPlace.orderIndex\n                    }\n                });\n                return;\n            }\n            // Verify both places are still in the same day\n            if (currPlace.dayIndex !== prevPlace.dayIndex) {\n                console.warn(\"[MapComponent] Places moved to different days:\", {\n                    prev: {\n                        name: prevPlace.name,\n                        day: prevPlace.dayIndex\n                    },\n                    curr: {\n                        name: currPlace.name,\n                        day: currPlace.dayIndex\n                    }\n                });\n                return;\n            }\n        }\n        if (!places || places.length < 2 || !mapInstanceRef.current || !isGeometryReady()) {\n            console.log(\"[MapComponent] Not ready to draw route:\", {\n                places: places === null || places === void 0 ? void 0 : places.length,\n                mapReady: !!mapInstanceRef.current,\n                geometryReady: isGeometryReady()\n            });\n            return;\n        }\n        // Clear any existing route for this day\n        const existingRoute = routesRef.current.get(dayId);\n        if (existingRoute) {\n            existingRoute.setMap(null);\n            routesRef.current.delete(dayId);\n        }\n        const coordinates = [];\n        for(let i = 0; i < places.length - 1; i++){\n            const place1 = places[i];\n            const place2 = places[i + 1];\n            if (!place1.location || !place2.location) {\n                console.warn(\"[MapComponent] Missing location for place:\", {\n                    place1Name: place1.name,\n                    place2Name: place2.name\n                });\n                continue;\n            }\n            const info = await _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.getTravelInfo(place1, place2);\n            // Skip if travel info is invalid or has error\n            if (!info || info.error || !info.legPolyline) {\n                console.warn(\"[MapComponent] Invalid travel info between:\", {\n                    from: place1.name,\n                    to: place2.name,\n                    error: info === null || info === void 0 ? void 0 : info.error\n                });\n                continue;\n            }\n            try {\n                const path = google.maps.geometry.encoding.decodePath(info.legPolyline);\n                if (path && path.length > 0) {\n                    coordinates.push(...path);\n                }\n            } catch (error) {\n                console.error(\"[MapComponent] Error decoding polyline:\", error);\n            }\n        }\n        if (coordinates.length > 0) {\n            console.log(\"[MapComponent] Creating new route for day \".concat(dayId, \" with \").concat(coordinates.length, \" coordinates\"));\n            const route = new google.maps.Polyline({\n                path: coordinates,\n                geodesic: true,\n                strokeColor: color,\n                strokeOpacity: 1.0,\n                strokeWeight: 5,\n                map: mapInstanceRef.current\n            });\n            routesRef.current.set(dayId, route);\n        }\n    };\n    const getPhotoUrl = (photo, index)=>{\n        var _photo_getURI;\n        return ((_photo_getURI = photo.getURI) === null || _photo_getURI === void 0 ? void 0 : _photo_getURI.call(photo)) || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? \"https://places.googleapis.com/v1/\".concat(place.photos[0].name, \"/media?maxHeightPx=200&maxWidthPx=300&key=\").concat(apiKey) : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return '\\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\\n                '.concat(photoUrl ? '\\n                    <div style=\"height: 150px; width: 100%;\">\\n                        <img src=\"'.concat(photoUrl, '\" \\n                            alt=\"').concat(placeTitle, '\"\\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\\n                        />\\n                    </div>\\n                ') : \"\", '\\n\\n                <div class=\"p-3\">\\n                    <div class=\"flex justify-between items-start\">\\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\\n                            ').concat(placeTitle, \"\\n                        </h3>\\n                    </div>\\n                    \").concat(place.primaryTypeDisplayName ? '<div class=\"text-sm text-gray-600 mb-1\">'.concat(place.primaryTypeDisplayName.text, \"</div>\") : \"\", \"\\n                    \").concat(place.formattedAddress ? '<p class=\"text-sm text-gray-500\">'.concat(place.formattedAddress, \"</p>\") : \"\", \"\\n                </div>\\n            </div>\\n        \");\n    };\n    const isGeometryReady = ()=>{\n        var _window_google_maps_geometry_encoding, _window_google_maps_geometry, _window_google_maps, _window_google;\n        return !!(((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : (_window_google_maps_geometry = _window_google_maps.geometry) === null || _window_google_maps_geometry === void 0 ? void 0 : (_window_google_maps_geometry_encoding = _window_google_maps_geometry.encoding) === null || _window_google_maps_geometry_encoding === void 0 ? void 0 : _window_google_maps_geometry_encoding.decodePath) && typeof window.google.maps.geometry.encoding.decodePath === \"function\");\n    };\n    const getLocation = async (city)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject)=>{\n            geocoder.geocode({\n                address: city\n            }, (results, status)=>{\n                var _results__geometry, _results_;\n                if (status !== \"OK\" || !(results === null || results === void 0 ? void 0 : (_results_ = results[0]) === null || _results_ === void 0 ? void 0 : (_results__geometry = _results_.geometry) === null || _results__geometry === void 0 ? void 0 : _results__geometry.location)) {\n                    console.error(\"Geocoding failed:\", status);\n                    reject(\"Could not find location for \" + city);\n                } else {\n                    resolve(results[0].geometry.location);\n                }\n            });\n        });\n    };\n    const getRouteColor = (dayIndex)=>{\n        const colors = [\n            \"#2196F3\",\n            \"#9C27B0\",\n            \"#795548\",\n            \"#FF9800\",\n            \"#009688\",\n            \"#E91E63\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#00BCD4\",\n            \"#4CAF50\" // Green\n        ];\n        return colors[dayIndex % colors.length];\n    };\n    const getColorForDay = (dayIndex)=>{\n        const colors = [\n            \"#2196F3\",\n            \"#9C27B0\",\n            \"#795548\",\n            \"#FF9800\",\n            \"#009688\",\n            \"#E91E63\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#00BCD4\",\n            \"#4CAF50\" // Green\n        ];\n        return colors[dayIndex % colors.length];\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 689,\n                columnNumber: 13\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 bg-red-500 text-white p-2 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 691,\n                columnNumber: 17\n            }, undefined),\n            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"\n                }, void 0, false, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 697,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 696,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 688,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MapComponent, \"thTcGqObX+PD/6/JJI7bFmAkd9k=\");\n_c = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n"));

/***/ })

});