"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./utils/local-metrics.ts":
/*!********************************!*\
  !*** ./utils/local-metrics.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METRICS_STORAGE_KEY: function() { return /* binding */ METRICS_STORAGE_KEY; },\n/* harmony export */   checkInputLimits: function() { return /* binding */ checkInputLimits; },\n/* harmony export */   checkSession: function() { return /* binding */ checkSession; },\n/* harmony export */   clearPaymentReference: function() { return /* binding */ clearPaymentReference; },\n/* harmony export */   getPaymentReference: function() { return /* binding */ getPaymentReference; },\n/* harmony export */   getPaymentReferenceId: function() { return /* binding */ getPaymentReferenceId; },\n/* harmony export */   getPaymentStatus: function() { return /* binding */ getPaymentStatus; },\n/* harmony export */   getStoredMetrics: function() { return /* binding */ getStoredMetrics; },\n/* harmony export */   resetMetrics: function() { return /* binding */ resetMetrics; },\n/* harmony export */   setPaymentReference: function() { return /* binding */ setPaymentReference; },\n/* harmony export */   setPaymentReferenceId: function() { return /* binding */ setPaymentReferenceId; },\n/* harmony export */   setPaymentStatus: function() { return /* binding */ setPaymentStatus; },\n/* harmony export */   updateStoredMetrics: function() { return /* binding */ updateStoredMetrics; }\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"./managers/stage-manager.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n\n\nconst METRICS_STORAGE_KEY = \"travel_interaction_metrics\";\nconst SESSION_KEY = \"travel_session_id\";\nconst PAYMENT_REF_KEY = \"payment_reference_id\";\nconst MAX_TOTAL_INPUTS = 15;\nfunction getStoredMetrics() {\n    try {\n        // Check session validity first\n        if (!(0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.checkSessionValidity)()) {\n            return resetMetrics();\n        }\n        const storedMetrics = localStorage.getItem(METRICS_STORAGE_KEY);\n        if (!storedMetrics) {\n            return resetMetrics();\n        }\n        const metrics = JSON.parse(storedMetrics);\n        // Ensure all fields exist\n        metrics.totalPrompts = metrics.totalPrompts || 0;\n        metrics.savedPlacesCount = metrics.savedPlacesCount || 0;\n        metrics.isPaid = metrics.isPaid || false;\n        metrics.stagePrompts = metrics.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        metrics.paymentReference = metrics.paymentReference || \"\";\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving metrics:\", error);\n        return resetMetrics();\n    }\n}\nfunction updateStoredMetrics(currentStage) {\n    let incrementPrompt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n    try {\n        const metrics = getStoredMetrics();\n        if (incrementPrompt) {\n            // Only increment if explicitly requested and not already at limit\n            const { withinStageLimit } = checkInputLimits(currentStage);\n            if (withinStageLimit) {\n                metrics.totalPrompts += 1;\n                if (!metrics.stagePrompts) {\n                    metrics.stagePrompts = {};\n                }\n                metrics.stagePrompts[currentStage] = (metrics.stagePrompts[currentStage] || 0) + 1;\n            }\n        }\n        // Save to storage\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating metrics:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction checkInputLimits(currentStage) {\n    var _metrics_stagePrompts;\n    const metrics = getStoredMetrics();\n    const stagePrompts = ((_metrics_stagePrompts = metrics.stagePrompts) === null || _metrics_stagePrompts === void 0 ? void 0 : _metrics_stagePrompts[currentStage]) || 0;\n    const totalPrompts = metrics.totalPrompts || 0;\n    // Only apply stage limits to stage 3, all other stages should be unlimited\n    const result = {\n        withinStageLimit: currentStage === 3 ? stagePrompts < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n        withinTotalLimit: currentStage === 3 ? totalPrompts < MAX_TOTAL_INPUTS : true,\n        stageInputCount: stagePrompts,\n        totalInputCount: totalPrompts\n    };\n    // console.log(`[Metrics] Input limit check for stage ${currentStage}:`, result);\n    return result;\n}\nfunction resetMetrics() {\n    const metrics = {\n        totalPrompts: 0,\n        savedPlacesCount: 0,\n        isPaid: false,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0\n        },\n        paymentReference: \"session_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9))\n    };\n    localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n    (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.initializeSession)(); // Initialize a new session when metrics are reset\n    return metrics;\n}\nfunction checkSession() {\n    const currentSession = localStorage.getItem(SESSION_KEY);\n    if (!currentSession) {\n        const newSession = Date.now().toString();\n        localStorage.setItem(SESSION_KEY, newSession);\n        resetMetrics();\n        return false;\n    }\n    return true;\n}\nfunction setPaymentStatus(isPaid) {\n    try {\n        const metrics = getStoredMetrics();\n        metrics.isPaid = isPaid;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating payment status:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction getPaymentStatus() {\n    const metrics = getStoredMetrics();\n    return metrics.isPaid || false;\n}\nfunction setPaymentReferenceId(referenceId) {\n    try {\n        localStorage.setItem(PAYMENT_REF_KEY, referenceId);\n        console.log(\"[Metrics] Stored payment reference ID:\", referenceId);\n    } catch (error) {\n        console.error(\"[Metrics] Error storing payment reference ID:\", error);\n    }\n}\nfunction getPaymentReferenceId() {\n    try {\n        return localStorage.getItem(PAYMENT_REF_KEY);\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving payment reference ID:\", error);\n        return null;\n    }\n}\nfunction setPaymentReference(reference) {\n    try {\n        const metrics = getStoredMetrics();\n        metrics.paymentReference = reference;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        console.log(\"[Metrics] Payment reference set:\", reference);\n    } catch (error) {\n        console.error(\"[Metrics] Error setting payment reference:\", error);\n    }\n}\nfunction getPaymentReference() {\n    try {\n        const metrics = getStoredMetrics();\n        return metrics.paymentReference;\n    } catch (error) {\n        console.error(\"[Metrics] Error getting payment reference:\", error);\n        return undefined;\n    }\n}\nfunction clearPaymentReference() {\n    try {\n        const metrics = getStoredMetrics();\n        delete metrics.paymentReference;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        console.log(\"[Metrics] Payment reference cleared\");\n    } catch (error) {\n        console.error(\"[Metrics] Error clearing payment reference:\", error);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/local-metrics.ts\n"));

/***/ })

});