"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_travel-chat_tsx",{

/***/ "./hooks/useTravelChat.ts":
/*!********************************!*\
  !*** ./hooks/useTravelChat.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTravelChat: function() { return /* binding */ useTravelChat; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _managers_ai_chat_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/ai-chat-manager */ \"./managers/ai-chat-manager.ts\");\n\n\nfunction useTravelChat(param) {\n    let { initialDetails, componentManager, contentManager } = param;\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [activeToolUI, setActiveToolUI] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [currentDetails, setCurrentDetails] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialDetails);\n    const chatManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new _managers_ai_chat_manager__WEBPACK_IMPORTED_MODULE_1__.AIChatManager(initialDetails), [\n        initialDetails\n    ]);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        {\n            id: \"init\",\n            role: \"system\",\n            content: \"\",\n            data: {\n                toolName: \"detailsCard\",\n                isDetailsCard: true,\n                componentProps: {\n                    content: {\n                        title: \"Travel Details\",\n                        details: initialDetails\n                    }\n                }\n            }\n        }\n    ]);\n    const [componentLoading, setComponentLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const onDetailsUpdated = (details)=>{\n            setCurrentDetails(details);\n            setMessages((prev)=>{\n                const withoutDetailsCard = prev.filter((msg)=>{\n                    var _msg_data;\n                    return !((_msg_data = msg.data) === null || _msg_data === void 0 ? void 0 : _msg_data.isDetailsCard);\n                });\n                return [\n                    ...withoutDetailsCard,\n                    {\n                        id: Date.now().toString(),\n                        role: \"system\",\n                        content: \"\",\n                        data: {\n                            toolName: \"detailsCard\",\n                            isDetailsCard: true,\n                            componentProps: {\n                                content: {\n                                    title: \"Travel Details\",\n                                    details: details\n                                }\n                            }\n                        }\n                    }\n                ];\n            });\n        };\n        chatManager.on(\"detailsUpdated\", onDetailsUpdated);\n        return ()=>{\n            chatManager.off(\"detailsUpdated\", onDetailsUpdated);\n        };\n    }, [\n        chatManager\n    ]);\n    const addMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newMessage)=>{\n        setMessages((prevMessages)=>[\n                ...prevMessages,\n                {\n                    ...newMessage,\n                    content: chatManager.formatMessageContent(newMessage.content)\n                }\n            ]);\n    }, [\n        chatManager\n    ]);\n    const handleSubmit = async (e)=>{\n        e.preventDefault();\n        if (!input.trim()) return;\n        setIsLoading(true);\n        setError(null);\n        try {\n            // Add user message immediately\n            const userMessage = {\n                id: Date.now().toString(),\n                role: \"user\",\n                content: input\n            };\n            setMessages((prev)=>[\n                    ...prev,\n                    userMessage\n                ]);\n            // Create empty assistant message for streaming\n            const streamMessageId = Date.now().toString();\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        id: streamMessageId,\n                        role: \"assistant\",\n                        content: \"\"\n                    }\n                ]);\n            const reader = await chatManager.sendMessage(input);\n            setInput(\"\");\n            // Process streaming response\n            await chatManager.processStreamingResponse(reader, (content)=>{\n                setMessages((prev)=>prev.map((msg)=>msg.id === streamMessageId ? {\n                            ...msg,\n                            content: msg.content + content\n                        } : msg));\n            });\n        } catch (error) {\n            setError(error instanceof Error ? error.message : \"An error occurred\");\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const handleToolResponse = async (toolName, componentProps)=>{\n        console.log(\"[handleToolResponse] Starting with toolName:\", toolName);\n        setActiveToolUI(null);\n        if ([\n            \"datePicker\",\n            \"preferenceSelector\",\n            \"budgetSelector\",\n            \"languageSelector\"\n        ].includes(toolName)) {\n            try {\n                // 1. UI Cleanup - Remove old components but keep details card\n                setMessages((prev)=>prev.filter((msg)=>{\n                        var _msg_data;\n                        return !((_msg_data = msg.data) === null || _msg_data === void 0 ? void 0 : _msg_data.toolName) || msg.data.isDetailsCard;\n                    }));\n                // 2. Add component with UI-specific props\n                const componentId = Date.now().toString();\n                console.log(\"[handleToolResponse] Added component with ID:\", componentId);\n                setMessages((prev)=>[\n                        ...prev,\n                        {\n                            id: componentId,\n                            role: \"assistant\",\n                            content: \"\",\n                            data: {\n                                toolName,\n                                componentProps: {\n                                    ...componentProps,\n                                    onUpdate: async (value)=>{\n                                        console.log(\"[onUpdate] Starting with value:\", value, \"for toolName:\", toolName);\n                                        try {\n                                            setComponentLoading(componentId);\n                                            console.log(\"[onUpdate] Set component loading for ID:\", componentId);\n                                            setMessages((prev)=>{\n                                                console.log(\"[onUpdate] Previous messages:\", prev);\n                                                return prev.filter((msg)=>{\n                                                    var _msg_data;\n                                                    return !((_msg_data = msg.data) === null || _msg_data === void 0 ? void 0 : _msg_data.toolName) || msg.data.isDetailsCard;\n                                                });\n                                            });\n                                            const updateMessage = chatManager.formatUpdateMessage(toolName, value);\n                                            setMessages((prev)=>[\n                                                    ...prev,\n                                                    {\n                                                        id: Date.now().toString(),\n                                                        role: \"user\",\n                                                        content: updateMessage\n                                                    }\n                                                ]);\n                                            try {\n                                                const { reader } = await chatManager.handleToolUpdate(toolName, value);\n                                                const streamMessageId = Date.now().toString();\n                                                setMessages((prev)=>[\n                                                        ...prev,\n                                                        {\n                                                            id: streamMessageId,\n                                                            role: \"assistant\",\n                                                            content: \"\",\n                                                            data: {\n                                                                isLoading: true\n                                                            }\n                                                        }\n                                                    ]);\n                                                await chatManager.processStreamingResponse(reader, (content)=>{\n                                                    setMessages((prev)=>prev.map((msg)=>msg.id === streamMessageId ? {\n                                                                ...msg,\n                                                                content: msg.content + content,\n                                                                data: {\n                                                                    isLoading: false\n                                                                }\n                                                            } : msg));\n                                                });\n                                            } catch (error) {\n                                                if (error instanceof Error && error.message.includes(\"Failed to fetch\")) {\n                                                    setMessages((prev)=>[\n                                                            ...prev,\n                                                            {\n                                                                id: Date.now().toString(),\n                                                                role: \"assistant\",\n                                                                content: \"Unable to connect to the server. Please check your internet connection and try again.\",\n                                                                data: {\n                                                                    isError: true\n                                                                }\n                                                            }\n                                                        ]);\n                                                } else {\n                                                    setMessages((prev)=>[\n                                                            ...prev,\n                                                            {\n                                                                id: Date.now().toString(),\n                                                                role: \"assistant\",\n                                                                content: \"An error occurred while processing your request. Please try again.\",\n                                                                data: {\n                                                                    isError: true\n                                                                }\n                                                            }\n                                                        ]);\n                                                }\n                                                setError(error instanceof Error ? error.message : \"An error occurred\");\n                                            }\n                                        } finally{\n                                            setComponentLoading(null);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]);\n            } catch (error) {\n                setError(error instanceof Error ? error.message : \"An error occurred\");\n            }\n        }\n    };\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    const updateAssistantMessage = (content)=>{\n        setMessages((prevMessages)=>{\n            const lastMessage = prevMessages[prevMessages.length - 1];\n            if (lastMessage && lastMessage.role === \"assistant\") {\n                return prevMessages.map((msg)=>msg.id === lastMessage.id ? {\n                        ...msg,\n                        content: msg.content + content\n                    } : msg);\n            }\n            return prevMessages;\n        });\n    };\n    return {\n        messages,\n        input,\n        isLoading,\n        error,\n        activeToolUI,\n        currentDetails,\n        handleInputChange,\n        handleSubmit,\n        handleToolResponse,\n        chatManager\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHO3dCQUFFLEdBQUdlLEdBQUc7d0JBQUViLFNBQVNhLElBQUliLE9BQU8sR0FBR0E7b0JBQVEsSUFBSWE7WUFFakY7WUFDQSxPQUFPUTtRQUNYO0lBQ0o7SUFFQSxPQUFPO1FBQ0h6QjtRQUNBTDtRQUNBTjtRQUNBRTtRQUNBRTtRQUNBSTtRQUNBcUQ7UUFDQXZCO1FBQ0FZO1FBQ0F4QztJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlVHJhdmVsQ2hhdC50cz9lM2JkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSwgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQUlDb21wb25lbnRNYW5hZ2VyIH0gZnJvbSAnLi4vbWFuYWdlcnMvYWktY29tcG9uZW50LW1hbmFnZXInO1xuaW1wb3J0IHsgQUlDb250ZW50TWFuYWdlciB9IGZyb20gJy4uL21hbmFnZXJzL2FpLWNvbnRlbnQtbWFuYWdlcic7XG5pbXBvcnQgeyBBSUNoYXRNYW5hZ2VyIH0gZnJvbSAnLi4vbWFuYWdlcnMvYWktY2hhdC1tYW5hZ2VyJztcbmltcG9ydCB7XG4gICAgQ29tcG9uZW50VHlwZSxcbiAgICBUcmF2ZWxEZXRhaWxzLFxuICAgIE1lc3NhZ2VEYXRhLFxuICAgIEV4dGVuZGVkTWVzc2FnZSxcbiAgICBUb29sUmVzcG9uc2Vcbn0gZnJvbSAnLi4vbWFuYWdlcnMvdHlwZXMnO1xuXG5pbnRlcmZhY2UgTWVzc2FnZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBkYXRhPzogYW55O1xufVxuXG5pbnRlcmZhY2UgVXNlVHJhdmVsQ2hhdFByb3BzIHtcbiAgICBpbml0aWFsRGV0YWlsczogVHJhdmVsRGV0YWlscztcbiAgICBjb21wb25lbnRNYW5hZ2VyOiBBSUNvbXBvbmVudE1hbmFnZXI7XG4gICAgY29udGVudE1hbmFnZXI6IEFJQ29udGVudE1hbmFnZXI7XG59XG5cbmludGVyZmFjZSBVc2VUcmF2ZWxDaGF0UmV0dXJuIHtcbiAgICBtZXNzYWdlczogRXh0ZW5kZWRNZXNzYWdlW107XG4gICAgaW5wdXQ6IHN0cmluZztcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG4gICAgYWN0aXZlVG9vbFVJOiBDb21wb25lbnRUeXBlIHwgbnVsbDtcbiAgICBjdXJyZW50RGV0YWlsczogVHJhdmVsRGV0YWlscztcbiAgICBoYW5kbGVJbnB1dENoYW5nZTogKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICAgIGhhbmRsZVN1Ym1pdDogKGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIGhhbmRsZVRvb2xSZXNwb25zZTogKHRvb2xOYW1lOiBDb21wb25lbnRUeXBlLCBjb21wb25lbnRQcm9wczogUGFydGlhbDxNZXNzYWdlRGF0YT4pID0+IFByb21pc2U8dm9pZD47XG4gICAgY2hhdE1hbmFnZXI6IEFJQ2hhdE1hbmFnZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUcmF2ZWxDaGF0KHtcbiAgICBpbml0aWFsRGV0YWlscyxcbiAgICBjb21wb25lbnRNYW5hZ2VyLFxuICAgIGNvbnRlbnRNYW5hZ2VyXG59OiBVc2VUcmF2ZWxDaGF0UHJvcHMpOiBVc2VUcmF2ZWxDaGF0UmV0dXJuIHtcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW2FjdGl2ZVRvb2xVSSwgc2V0QWN0aXZlVG9vbFVJXSA9IHVzZVN0YXRlPENvbXBvbmVudFR5cGUgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbY3VycmVudERldGFpbHMsIHNldEN1cnJlbnREZXRhaWxzXSA9IHVzZVN0YXRlPFRyYXZlbERldGFpbHM+KGluaXRpYWxEZXRhaWxzKTtcbiAgICBjb25zdCBjaGF0TWFuYWdlciA9IHVzZU1lbW8oKCkgPT4gbmV3IEFJQ2hhdE1hbmFnZXIoaW5pdGlhbERldGFpbHMpLCBbaW5pdGlhbERldGFpbHNdKTtcbiAgICBjb25zdCBbbWVzc2FnZXMsIHNldE1lc3NhZ2VzXSA9IHVzZVN0YXRlPEV4dGVuZGVkTWVzc2FnZVtdPihbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnaW5pdCcsXG4gICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHRvb2xOYW1lOiAnZGV0YWlsc0NhcmQnLFxuICAgICAgICAgICAgICAgIGlzRGV0YWlsc0NhcmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50UHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdUcmF2ZWwgRGV0YWlscycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBpbml0aWFsRGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG4gICAgY29uc3QgW2NvbXBvbmVudExvYWRpbmcsIHNldENvbXBvbmVudExvYWRpbmddID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBvbkRldGFpbHNVcGRhdGVkID0gKGRldGFpbHM6IFRyYXZlbERldGFpbHMpID0+IHtcbiAgICAgICAgICAgIHNldEN1cnJlbnREZXRhaWxzKGRldGFpbHMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aXRob3V0RGV0YWlsc0NhcmQgPSBwcmV2LmZpbHRlcihtc2cgPT4gIW1zZy5kYXRhPy5pc0RldGFpbHNDYXJkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWy4uLndpdGhvdXREZXRhaWxzQ2FyZCwge1xuICAgICAgICAgICAgICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiAnZGV0YWlsc0NhcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZXRhaWxzQ2FyZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1RyYXZlbCBEZXRhaWxzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogZGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2hhdE1hbmFnZXIub24oJ2RldGFpbHNVcGRhdGVkJywgb25EZXRhaWxzVXBkYXRlZCk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjaGF0TWFuYWdlci5vZmYoJ2RldGFpbHNVcGRhdGVkJywgb25EZXRhaWxzVXBkYXRlZCk7XG4gICAgICAgIH07XG4gICAgfSwgW2NoYXRNYW5hZ2VyXSk7XG5cbiAgICBjb25zdCBhZGRNZXNzYWdlID0gdXNlQ2FsbGJhY2soKG5ld01lc3NhZ2U6IE1lc3NhZ2UpID0+IHtcbiAgICAgICAgc2V0TWVzc2FnZXMocHJldk1lc3NhZ2VzID0+IFtcbiAgICAgICAgICAgIC4uLnByZXZNZXNzYWdlcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAuLi5uZXdNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNoYXRNYW5hZ2VyLmZvcm1hdE1lc3NhZ2VDb250ZW50KG5ld01lc3NhZ2UuY29udGVudClcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfSwgW2NoYXRNYW5hZ2VyXSk7XG5cbiAgICBjb25zdCBoYW5kbGVTdWJtaXQgPSBhc3luYyAoZTogUmVhY3QuRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD4pID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIWlucHV0LnRyaW0oKSkgcmV0dXJuO1xuXG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgc2V0RXJyb3IobnVsbCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFkZCB1c2VyIG1lc3NhZ2UgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGNvbnN0IHVzZXJNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGlucHV0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwgdXNlck1lc3NhZ2VdKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXRlIGVtcHR5IGFzc2lzdGFudCBtZXNzYWdlIGZvciBzdHJlYW1pbmdcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbU1lc3NhZ2VJZCA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIHtcbiAgICAgICAgICAgICAgICBpZDogc3RyZWFtTWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnXG4gICAgICAgICAgICB9XSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IGF3YWl0IGNoYXRNYW5hZ2VyLnNlbmRNZXNzYWdlKGlucHV0KTtcbiAgICAgICAgICAgIHNldElucHV0KCcnKTtcblxuICAgICAgICAgICAgLy8gUHJvY2VzcyBzdHJlYW1pbmcgcmVzcG9uc2VcbiAgICAgICAgICAgIGF3YWl0IGNoYXRNYW5hZ2VyLnByb2Nlc3NTdHJlYW1pbmdSZXNwb25zZShyZWFkZXIsIChjb250ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBwcmV2Lm1hcChtc2cgPT5cbiAgICAgICAgICAgICAgICAgICAgbXNnLmlkID09PSBzdHJlYW1NZXNzYWdlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8geyAuLi5tc2csIGNvbnRlbnQ6IG1zZy5jb250ZW50ICsgY29udGVudCB9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IG1zZ1xuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBzZXRFcnJvcihlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdBbiBlcnJvciBvY2N1cnJlZCcpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVUb29sUmVzcG9uc2UgPSBhc3luYyAodG9vbE5hbWU6IENvbXBvbmVudFR5cGUsIGNvbXBvbmVudFByb3BzOiBQYXJ0aWFsPE1lc3NhZ2VEYXRhPikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnW2hhbmRsZVRvb2xSZXNwb25zZV0gU3RhcnRpbmcgd2l0aCB0b29sTmFtZTonLCB0b29sTmFtZSk7XG4gICAgICAgIHNldEFjdGl2ZVRvb2xVSShudWxsKTtcblxuICAgICAgICBpZiAoWydkYXRlUGlja2VyJywgJ3ByZWZlcmVuY2VTZWxlY3RvcicsICdidWRnZXRTZWxlY3RvcicsICdsYW5ndWFnZVNlbGVjdG9yJ10uaW5jbHVkZXModG9vbE5hbWUpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIDEuIFVJIENsZWFudXAgLSBSZW1vdmUgb2xkIGNvbXBvbmVudHMgYnV0IGtlZXAgZGV0YWlscyBjYXJkXG4gICAgICAgICAgICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBwcmV2LmZpbHRlcihtc2cgPT4gIW1zZy5kYXRhPy50b29sTmFtZSB8fCBtc2cuZGF0YS5pc0RldGFpbHNDYXJkKSk7XG5cbiAgICAgICAgICAgICAgICAvLyAyLiBBZGQgY29tcG9uZW50IHdpdGggVUktc3BlY2lmaWMgcHJvcHNcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRJZCA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW2hhbmRsZVRvb2xSZXNwb25zZV0gQWRkZWQgY29tcG9uZW50IHdpdGggSUQ6JywgY29tcG9uZW50SWQpO1xuICAgICAgICAgICAgICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbXBvbmVudElkLFxuICAgICAgICAgICAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jb21wb25lbnRQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZTogYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tvblVwZGF0ZV0gU3RhcnRpbmcgd2l0aCB2YWx1ZTonLCB2YWx1ZSwgJ2ZvciB0b29sTmFtZTonLCB0b29sTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21wb25lbnRMb2FkaW5nKGNvbXBvbmVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbb25VcGRhdGVdIFNldCBjb21wb25lbnQgbG9hZGluZyBmb3IgSUQ6JywgY29tcG9uZW50SWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW29uVXBkYXRlXSBQcmV2aW91cyBtZXNzYWdlczonLCBwcmV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldi5maWx0ZXIobXNnID0+ICFtc2cuZGF0YT8udG9vbE5hbWUgfHwgbXNnLmRhdGEuaXNEZXRhaWxzQ2FyZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVNZXNzYWdlID0gY2hhdE1hbmFnZXIuZm9ybWF0VXBkYXRlTWVzc2FnZSh0b29sTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IFsuLi5wcmV2LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogdXBkYXRlTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHJlYWRlciB9ID0gYXdhaXQgY2hhdE1hbmFnZXIuaGFuZGxlVG9vbFVwZGF0ZSh0b29sTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbU1lc3NhZ2VJZCA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IFsuLi5wcmV2LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzdHJlYW1NZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBpc0xvYWRpbmc6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjaGF0TWFuYWdlci5wcm9jZXNzU3RyZWFtaW5nUmVzcG9uc2UocmVhZGVyLCAoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IHByZXYubWFwKG1zZyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmlkID09PSBzdHJlYW1NZXNzYWdlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgLi4ubXNnLCBjb250ZW50OiBtc2cuY29udGVudCArIGNvbnRlbnQsIGRhdGE6IHsgaXNMb2FkaW5nOiBmYWxzZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG1zZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnRmFpbGVkIHRvIGZldGNoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1VuYWJsZSB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIuIFBsZWFzZSBjaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24gYW5kIHRyeSBhZ2Fpbi4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBpc0Vycm9yOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC4gUGxlYXNlIHRyeSBhZ2Fpbi4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBpc0Vycm9yOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvcihlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdBbiBlcnJvciBvY2N1cnJlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29tcG9uZW50TG9hZGluZyhudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnQW4gZXJyb3Igb2NjdXJyZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICBzZXRJbnB1dChlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHVwZGF0ZUFzc2lzdGFudE1lc3NhZ2UgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldE1lc3NhZ2VzKHByZXZNZXNzYWdlcyA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYXN0TWVzc2FnZSA9IHByZXZNZXNzYWdlc1twcmV2TWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAobGFzdE1lc3NhZ2UgJiYgbGFzdE1lc3NhZ2Uucm9sZSA9PT0gJ2Fzc2lzdGFudCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldk1lc3NhZ2VzLm1hcChtc2cgPT4gXG4gICAgICAgICAgICAgICAgICAgIG1zZy5pZCA9PT0gbGFzdE1lc3NhZ2UuaWQgPyB7IC4uLm1zZywgY29udGVudDogbXNnLmNvbnRlbnQgKyBjb250ZW50IH0gOiBtc2dcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZXZNZXNzYWdlcztcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgaXNMb2FkaW5nLFxuICAgICAgICBlcnJvcixcbiAgICAgICAgYWN0aXZlVG9vbFVJLFxuICAgICAgICBjdXJyZW50RGV0YWlscyxcbiAgICAgICAgaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICAgIGhhbmRsZVN1Ym1pdCxcbiAgICAgICAgaGFuZGxlVG9vbFJlc3BvbnNlLFxuICAgICAgICBjaGF0TWFuYWdlclxuICAgIH07XG59XG4iXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJ1c2VTdGF0ZSIsInVzZU1lbW8iLCJ1c2VFZmZlY3QiLCJBSUNoYXRNYW5hZ2VyIiwidXNlVHJhdmVsQ2hhdCIsImluaXRpYWxEZXRhaWxzIiwiY29tcG9uZW50TWFuYWdlciIsImNvbnRlbnRNYW5hZ2VyIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiZXJyb3IiLCJzZXRFcnJvciIsImFjdGl2ZVRvb2xVSSIsInNldEFjdGl2ZVRvb2xVSSIsImlucHV0Iiwic2V0SW5wdXQiLCJjdXJyZW50RGV0YWlscyIsInNldEN1cnJlbnREZXRhaWxzIiwiY2hhdE1hbmFnZXIiLCJtZXNzYWdlcyIsInNldE1lc3NhZ2VzIiwiaWQiLCJyb2xlIiwiY29udGVudCIsImRhdGEiLCJ0b29sTmFtZSIsImlzRGV0YWlsc0NhcmQiLCJjb21wb25lbnRQcm9wcyIsInRpdGxlIiwiZGV0YWlscyIsImNvbXBvbmVudExvYWRpbmciLCJzZXRDb21wb25lbnRMb2FkaW5nIiwib25EZXRhaWxzVXBkYXRlZCIsInByZXYiLCJ3aXRob3V0RGV0YWlsc0NhcmQiLCJmaWx0ZXIiLCJtc2ciLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJvbiIsIm9mZiIsImFkZE1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwicHJldk1lc3NhZ2VzIiwiZm9ybWF0TWVzc2FnZUNvbnRlbnQiLCJoYW5kbGVTdWJtaXQiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0cmltIiwidXNlck1lc3NhZ2UiLCJzdHJlYW1NZXNzYWdlSWQiLCJyZWFkZXIiLCJzZW5kTWVzc2FnZSIsInByb2Nlc3NTdHJlYW1pbmdSZXNwb25zZSIsIm1hcCIsIkVycm9yIiwibWVzc2FnZSIsImhhbmRsZVRvb2xSZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJpbmNsdWRlcyIsImNvbXBvbmVudElkIiwib25VcGRhdGUiLCJ2YWx1ZSIsInVwZGF0ZU1lc3NhZ2UiLCJmb3JtYXRVcGRhdGVNZXNzYWdlIiwiaGFuZGxlVG9vbFVwZGF0ZSIsImlzRXJyb3IiLCJoYW5kbGVJbnB1dENoYW5nZSIsInRhcmdldCIsInVwZGF0ZUFzc2lzdGFudE1lc3NhZ2UiLCJsYXN0TWVzc2FnZSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/useTravelChat.ts\n"));

/***/ })

});