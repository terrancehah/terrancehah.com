"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./utils/session-manager.ts":
/*!**********************************!*\
  !*** ./utils/session-manager.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SESSION_CONFIG: function() { return /* binding */ SESSION_CONFIG; },\n/* harmony export */   checkInputLimits: function() { return /* binding */ checkInputLimits; },\n/* harmony export */   checkSession: function() { return /* binding */ checkSession; },\n/* harmony export */   checkSessionValidity: function() { return /* binding */ checkSessionValidity; },\n/* harmony export */   checkSessionWithWarning: function() { return /* binding */ checkSessionWithWarning; },\n/* harmony export */   clearPaymentReference: function() { return /* binding */ clearPaymentReference; },\n/* harmony export */   clearSession: function() { return /* binding */ clearSession; },\n/* harmony export */   generateSessionId: function() { return /* binding */ generateSessionId; },\n/* harmony export */   getPaymentReference: function() { return /* binding */ getPaymentReference; },\n/* harmony export */   getPaymentReferenceId: function() { return /* binding */ getPaymentReferenceId; },\n/* harmony export */   getPaymentStatus: function() { return /* binding */ getPaymentStatus; },\n/* harmony export */   getStorage: function() { return /* binding */ getStorage; },\n/* harmony export */   getStoredMetrics: function() { return /* binding */ getStoredMetrics; },\n/* harmony export */   getStoredSession: function() { return /* binding */ getStoredSession; },\n/* harmony export */   handleSessionExpiry: function() { return /* binding */ handleSessionExpiry; },\n/* harmony export */   initializeSession: function() { return /* binding */ initializeSession; },\n/* harmony export */   safeStorageOp: function() { return /* binding */ safeStorageOp; },\n/* harmony export */   setPaymentReference: function() { return /* binding */ setPaymentReference; },\n/* harmony export */   setPaymentReferenceId: function() { return /* binding */ setPaymentReferenceId; },\n/* harmony export */   setPaymentStatus: function() { return /* binding */ setPaymentStatus; },\n/* harmony export */   storage: function() { return /* binding */ storage; },\n/* harmony export */   updateLastActive: function() { return /* binding */ updateLastActive; },\n/* harmony export */   updateStoredMetrics: function() { return /* binding */ updateStoredMetrics; }\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"./managers/stage-manager.ts\");\n\nconst SESSION_CONFIG = {\n    STORAGE_KEY: \"travel_rizz_session\",\n    ABSOLUTE_TIMEOUT: 24 * 60 * 60 * 1000,\n    INACTIVITY_TIMEOUT: 2 * 60 * 60 * 1000,\n    WARNING_BEFORE_TIMEOUT: 5 * 60 * 1000,\n    MAX_TOTAL_INPUTS: 15,\n    PAYMENT_REF_KEY: \"payment_reference_id\"\n};\n// Safe storage access\nconst getStorage = ()=>{\n    if (true) {\n        return window.sessionStorage;\n    }\n    return null;\n};\nconst storage = getStorage();\n// Add atomic operation lock\nlet isSessionLocked = false;\nconst sessionLockTimeout = 1000; // 1 second timeout\nfunction acquireSessionLock() {\n    if (isSessionLocked) return false;\n    isSessionLocked = true;\n    return true;\n}\nfunction releaseSessionLock() {\n    isSessionLocked = false;\n}\n// Helper function to safely access storage with atomic guarantees\nconst safeStorageOp = async (operation, defaultValue)=>{\n    try {\n        if (!storage) return defaultValue;\n        // Try to acquire lock\n        let lockAcquired = false;\n        let attempts = 0;\n        while(!lockAcquired && attempts < 5){\n            lockAcquired = acquireSessionLock();\n            if (!lockAcquired) {\n                attempts++;\n                // Wait a bit before trying again\n                await new Promise((resolve)=>setTimeout(resolve, 50));\n            }\n        }\n        if (!lockAcquired) {\n            console.error(\"[Session] Failed to acquire lock after 5 attempts\");\n            return defaultValue;\n        }\n        try {\n            return operation();\n        } finally{\n            releaseSessionLock();\n        }\n    } catch (error) {\n        console.error(\"[Session] Storage operation failed:\", error);\n        releaseSessionLock();\n        return defaultValue;\n    }\n};\n// Helper function to safely access storage\n// export const safeStorageOp = <T>(operation: () => T, defaultValue: T): T => {\n//   try {\n//     if (!storage) return defaultValue;\n//     return operation();\n//   } catch (error) {\n//     console.error('[Session] Storage operation failed:', error);\n//     return defaultValue;\n//   }\n// };\nasync function initializeSession() {\n    const now = Date.now();\n    // Try to get existing session first\n    const existingSession = await getStoredSession();\n    if (existingSession) {\n        // Update both lastActive and expiresAt\n        existingSession.lastActive = now;\n        existingSession.expiresAt = now + SESSION_CONFIG.ABSOLUTE_TIMEOUT;\n        // Ensure all stages are initialized\n        existingSession.stagePrompts = existingSession.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0\n        };\n        await safeStorageOp(()=>{\n            storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(existingSession));\n        }, undefined);\n        return existingSession;\n    }\n    // Create new session if none exists\n    const sessionId = generateSessionId();\n    const session = {\n        // Session info\n        sessionId,\n        startTime: now,\n        lastActive: now,\n        expiresAt: now + SESSION_CONFIG.ABSOLUTE_TIMEOUT,\n        // Travel details\n        destination: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: [],\n        budget: \"\",\n        language: \"\",\n        transport: [],\n        // Places\n        savedPlaces: [],\n        currentStage: 1,\n        // Metrics\n        totalPrompts: 0,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0\n        },\n        savedPlacesCount: 0,\n        // Payment\n        isPaid: false,\n        paymentReference: \"session_\".concat(sessionId)\n    };\n    await safeStorageOp(()=>{\n        storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n    return session;\n}\nasync function getStoredSession() {\n    return safeStorageOp(()=>{\n        console.log(\"[Session] Attempting to get stored session\");\n        const storedData = storage === null || storage === void 0 ? void 0 : storage.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No stored session data found\");\n            return null;\n        }\n        try {\n            const session = JSON.parse(storedData);\n            console.log(\"[Session] Successfully parsed session:\", {\n                sessionId: session.sessionId,\n                destination: session.destination,\n                startTime: new Date(session.startTime).toISOString(),\n                lastActive: new Date(session.lastActive).toISOString(),\n                expiresAt: new Date(session.expiresAt).toISOString()\n            });\n            return session;\n        } catch (error) {\n            console.error(\"[Session] Failed to parse session data:\", error);\n            return null;\n        }\n    }, null);\n}\nasync function getStoredMetrics() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        if (!session) return null;\n        return {\n            interaction: {\n                totalPrompts: session.totalPrompts,\n                stagePrompts: session.stagePrompts,\n                lastActive: session.lastActive\n            },\n            places: {\n                savedCount: session.savedPlacesCount\n            },\n            payment: {\n                status: session.isPaid,\n                reference: session.paymentReference,\n                timestamp: session.paymentTimestamp\n            },\n            parameters: {\n                destination: session.destination,\n                dates: {\n                    start: session.startDate,\n                    end: session.endDate\n                },\n                preferences: session.preferences,\n                budget: session.budget,\n                language: session.language,\n                transport: session.transport\n            }\n        };\n    }, null);\n}\nasync function updateStoredMetrics(currentStage) {\n    let incrementPrompt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, incrementSavedPlaces = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    return safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        if (incrementPrompt) {\n            const { withinStageLimit } = checkInputLimits(currentStage);\n            if (withinStageLimit) {\n                // Initialize stagePrompts with all stages if it doesn't exist\n                if (!session.stagePrompts) {\n                    session.stagePrompts = {\n                        1: 0,\n                        2: 0,\n                        3: 0,\n                        4: 0,\n                        5: 0\n                    };\n                }\n                // Ensure all stages exist\n                for(let stage = 1; stage <= 5; stage++){\n                    if (typeof session.stagePrompts[stage] !== \"number\") {\n                        session.stagePrompts[stage] = 0;\n                    }\n                }\n                session.totalPrompts = (session.totalPrompts || 0) + 1;\n                session.stagePrompts[currentStage] = (session.stagePrompts[currentStage] || 0) + 1;\n            }\n        }\n        if (incrementSavedPlaces) {\n            session.savedPlacesCount = (session.savedPlacesCount || 0) + 1;\n        }\n        storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n        return session;\n    }, null) || await initializeSession();\n}\nasync function checkInputLimits(currentStage) {\n    return safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        const stagePrompts = session.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        const totalPrompts = session.totalPrompts || 0;\n        return {\n            withinStageLimit: currentStage === 3 ? (stagePrompts[currentStage] || 0) < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n            withinTotalLimit: currentStage === 3 ? totalPrompts < SESSION_CONFIG.MAX_TOTAL_INPUTS : true,\n            stageInputCount: stagePrompts[currentStage] || 0,\n            totalInputCount: totalPrompts\n        };\n    }, {\n        withinStageLimit: true,\n        withinTotalLimit: true,\n        stageInputCount: 0,\n        totalInputCount: 0\n    });\n}\n// Payment related functions\nasync function setPaymentStatus(isPaid) {\n    await safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.isPaid = isPaid;\n        session.paymentTimestamp = isPaid ? Date.now() : undefined;\n        storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nasync function getPaymentStatus() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        return (session === null || session === void 0 ? void 0 : session.isPaid) || false;\n    }, false);\n}\nasync function setPaymentReference(reference) {\n    await safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.paymentReference = reference;\n        storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nasync function getPaymentReference() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        return session === null || session === void 0 ? void 0 : session.paymentReference;\n    }, undefined);\n}\nasync function clearPaymentReference() {\n    await safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.paymentReference = \"\";\n        storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nasync function getPaymentReferenceId() {\n    return safeStorageOp(()=>{\n        const stored = storage === null || storage === void 0 ? void 0 : storage.getItem(SESSION_CONFIG.PAYMENT_REF_KEY);\n        return stored || null;\n    }, null);\n}\nasync function setPaymentReferenceId(referenceId) {\n    await safeStorageOp(()=>{\n        storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.PAYMENT_REF_KEY, referenceId);\n        console.log(\"[Session] Stored payment reference ID:\", referenceId);\n    }, undefined);\n}\nasync function checkSession() {\n    return safeStorageOp(()=>{\n        const currentSession = storage === null || storage === void 0 ? void 0 : storage.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!currentSession) {\n            const newSession = Date.now().toString();\n            storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, newSession);\n            return false;\n        }\n        return true;\n    }, false);\n}\n// Add warning mechanism\nasync function checkSessionWithWarning() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        if (!session) {\n            return {\n                isValid: false,\n                shouldWarn: false\n            };\n        }\n        const now = Date.now();\n        const timeLeft = session.expiresAt - now;\n        const shouldWarn = timeLeft <= SESSION_CONFIG.WARNING_BEFORE_TIMEOUT;\n        const isValid = timeLeft > 0;\n        return {\n            isValid,\n            shouldWarn\n        };\n    }, {\n        isValid: false,\n        shouldWarn: false\n    });\n}\nasync function checkSessionValidity() {\n    return safeStorageOp(()=>{\n        console.log(\"[Session] Checking session validity\");\n        const storedData = storage === null || storage === void 0 ? void 0 : storage.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No session found during validity check\");\n            return false;\n        }\n        let session;\n        try {\n            session = JSON.parse(storedData);\n            console.log(\"[Session] Parsed session for validity check:\", {\n                sessionId: session.sessionId,\n                destination: session.destination,\n                startTime: new Date(session.startTime).toISOString(),\n                lastActive: new Date(session.lastActive).toISOString(),\n                expiresAt: new Date(session.expiresAt).toISOString()\n            });\n        } catch (error) {\n            console.error(\"[Session] Failed to parse session during validity check:\", error);\n            return false;\n        }\n        const now = Date.now();\n        console.log(\"[Session] Validity check times:\", {\n            now: new Date(now).toISOString(),\n            expiresAt: new Date(session.expiresAt).toISOString(),\n            lastActive: new Date(session.lastActive).toISOString(),\n            timeTillExpiry: session.expiresAt - now,\n            inactiveTime: now - session.lastActive,\n            absoluteTimeout: SESSION_CONFIG.ABSOLUTE_TIMEOUT,\n            inactivityTimeout: SESSION_CONFIG.INACTIVITY_TIMEOUT\n        });\n        // Check absolute timeout\n        if (now >= session.expiresAt) {\n            console.log(\"[Session] Session expired due to absolute timeout. Times:\", {\n                now,\n                expiresAt: session.expiresAt,\n                diff: now - session.expiresAt\n            });\n            clearSession();\n            return false;\n        }\n        // Check inactivity timeout\n        const inactiveTime = now - session.lastActive;\n        if (inactiveTime >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            console.log(\"[Session] Session expired due to inactivity. Times:\", {\n                now,\n                lastActive: session.lastActive,\n                inactiveTime,\n                inactivityTimeout: SESSION_CONFIG.INACTIVITY_TIMEOUT\n            });\n            clearSession();\n            return false;\n        }\n        // Only update lastActive if it's been more than 1 minute\n        if (inactiveTime > 60000) {\n            console.log(\"[Session] Updating lastActive time in validity check\");\n            session.lastActive = now;\n            storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n        }\n        return true;\n    }, false);\n}\n// Session expiry handler\nasync function handleSessionExpiry() {\n    await safeStorageOp(()=>{\n        var _window_getSavedPlaces, _window;\n        // Don't handle expiry if we're already on the landing page\n        if (window.location.pathname === \"/\" || window.location.pathname === \"\") {\n            return;\n        }\n        // Save current state if needed\n        const currentState = {\n            messages: ((_window_getSavedPlaces = (_window = window).getSavedPlaces) === null || _window_getSavedPlaces === void 0 ? void 0 : _window_getSavedPlaces.call(_window)) || [],\n            lastUrl: window.location.pathname\n        };\n        storage === null || storage === void 0 ? void 0 : storage.setItem(\"expiredSessionState\", JSON.stringify(currentState));\n        // Clear session\n        clearSession();\n        // Only redirect if we're not already on the landing page\n        const currentUrl = new URL(window.location.href);\n        if (!currentUrl.searchParams.has(\"return\")) {\n            window.location.href = \"/?return=\".concat(encodeURIComponent(currentState.lastUrl));\n        }\n    }, undefined);\n}\nasync function clearSession() {\n    console.log(\"[Session] Clearing session storage\");\n    await safeStorageOp(()=>{\n        storage === null || storage === void 0 ? void 0 : storage.removeItem(SESSION_CONFIG.STORAGE_KEY);\n    }, undefined);\n}\nasync function updateLastActive() {\n    await safeStorageOp(()=>{\n        const session = storage === null || storage === void 0 ? void 0 : storage.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!session) return;\n        try {\n            const sessionData = JSON.parse(session);\n            sessionData.lastActive = Date.now();\n            storage === null || storage === void 0 ? void 0 : storage.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionData));\n            console.log(\"[Session] Successfully updated lastActive timestamp\");\n        } catch (error) {\n            console.error(\"[Session] Failed to update lastActive timestamp:\", error);\n        }\n    }, undefined);\n}\nfunction generateSessionId() {\n    return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/session-manager.ts\n"));

/***/ })

});