"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_map-component_tsx",{

/***/ "./managers/stage-manager.ts":
/*!***********************************!*\
  !*** ./managers/stage-manager.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STAGE_LIMITS: function() { return /* binding */ STAGE_LIMITS; },\n/* harmony export */   validateStageProgression: function() { return /* binding */ validateStageProgression; }\n/* harmony export */ });\n// Validation functions for each stage\nconst STAGE_LIMITS = {\n    3: {\n        maxPrompts: 5,\n        upgradeMessage: \"I'm sorry to tell you that you have reached the prompts limit in the free version. \\n    Would you like to upgrade to unlock unlimited places browsing and premium features? \\n    This will give you access to personalized recommendations, detailed scheduling, and local insights.\"\n    }\n};\nconst STAGE_VALIDATORS = {\n    // Stage 1: Initial Parameter Check\n    1: {\n        validate: (details)=>{\n            var _details_preferences;\n            const missingRequirements = [];\n            if (!details.destination) missingRequirements.push(\"destination\");\n            if (!details.startDate) missingRequirements.push(\"start date\");\n            if (!details.endDate) missingRequirements.push(\"end date\");\n            if (!((_details_preferences = details.preferences) === null || _details_preferences === void 0 ? void 0 : _details_preferences.length)) missingRequirements.push(\"preferences\");\n            if (!details.language) missingRequirements.push(\"language\");\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 2: City Introduction\n    2: {\n        validate: (details, metrics)=>{\n            return {\n                isValid: true,\n                missingRequirements: []\n            };\n        }\n    },\n    // Stage 3: Places Introduction\n    3: {\n        validate: (_, metrics)=>{\n            var _metrics_stagePrompts;\n            const stagePrompts = ((_metrics_stagePrompts = metrics.stagePrompts) === null || _metrics_stagePrompts === void 0 ? void 0 : _metrics_stagePrompts[3]) || 0;\n            const maxPrompts = STAGE_LIMITS[3].maxPrompts;\n            if (stagePrompts >= maxPrompts) {\n                return {\n                    isValid: true,\n                    missingRequirements: [\n                        \"Maximum places limit reached. Ready for upgrade.\"\n                    ],\n                    upgradeRequired: true\n                };\n            }\n            return {\n                isValid: false,\n                missingRequirements: [\n                    \"Continue adding places\"\n                ]\n            };\n        }\n    },\n    // Stage 4: Itinerary Review (with payment check)\n    4: {\n        validate: (_, metrics)=>{\n            const missingRequirements = [];\n            // Only allow progression if user has paid\n            if (!metrics.isPaid) {\n                missingRequirements.push(\"payment required\");\n            }\n            return {\n                isValid: metrics.isPaid,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 5: Final Confirmation (keeping it open as requested)\n    5: {\n        validate: (_, metrics)=>{\n            const missingRequirements = [];\n            // First validate Stage 1 parameters\n            const stage1Validator = STAGE_VALIDATORS[1];\n            const stage1Result = stage1Validator.validate(_, metrics);\n            if (!stage1Result.isValid) {\n                return stage1Result;\n            }\n            return {\n                isValid: true,\n                missingRequirements\n            };\n        }\n    }\n};\n// Main validation function to be used in the chat component\nfunction validateStageProgression(currentStage, nextStage, travelDetails, metrics) {\n    // Ensure stage progression is sequential\n    if (nextStage !== currentStage + 1) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage progression\"\n            ]\n        };\n    }\n    // Get validator for the current stage\n    const validator = STAGE_VALIDATORS[currentStage];\n    if (!validator) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage\"\n            ]\n        };\n    }\n    // Run validation\n    const { isValid, missingRequirements, upgradeRequired } = validator.validate(travelDetails, metrics);\n    return {\n        canProgress: isValid,\n        missingRequirements,\n        upgradeRequired\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/stage-manager.ts\n"));

/***/ }),

/***/ "./utils/local-metrics.ts":
/*!********************************!*\
  !*** ./utils/local-metrics.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkInputLimits: function() { return /* binding */ checkInputLimits; },\n/* harmony export */   checkSession: function() { return /* binding */ checkSession; },\n/* harmony export */   getStoredMetrics: function() { return /* binding */ getStoredMetrics; },\n/* harmony export */   resetMetrics: function() { return /* binding */ resetMetrics; },\n/* harmony export */   updateStoredMetrics: function() { return /* binding */ updateStoredMetrics; }\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"./managers/stage-manager.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n\n\nconst METRICS_STORAGE_KEY = \"travel_interaction_metrics\";\nconst SESSION_KEY = \"travel_session_id\";\nconst MAX_TOTAL_INPUTS = 15;\nfunction getStoredMetrics() {\n    try {\n        // Check session validity first\n        if (!(0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.checkSessionValidity)()) {\n            return resetMetrics();\n        }\n        const storedMetrics = localStorage.getItem(METRICS_STORAGE_KEY);\n        if (!storedMetrics) {\n            return resetMetrics();\n        }\n        const metrics = JSON.parse(storedMetrics);\n        // Ensure all fields exist\n        metrics.totalPrompts = metrics.totalPrompts || 0;\n        metrics.savedPlacesCount = metrics.savedPlacesCount || 0;\n        metrics.isPaid = metrics.isPaid || false;\n        metrics.stagePrompts = metrics.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving metrics:\", error);\n        return resetMetrics();\n    }\n}\nfunction updateStoredMetrics(currentStage) {\n    let incrementPrompt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n    try {\n        const metrics = getStoredMetrics();\n        if (incrementPrompt) {\n            // Only increment if explicitly requested and not already at limit\n            const { withinStageLimit } = checkInputLimits(currentStage);\n            if (withinStageLimit) {\n                metrics.totalPrompts += 1;\n                if (!metrics.stagePrompts) {\n                    metrics.stagePrompts = {};\n                }\n                metrics.stagePrompts[currentStage] = (metrics.stagePrompts[currentStage] || 0) + 1;\n            }\n        }\n        // Save to storage\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating metrics:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction checkInputLimits(currentStage) {\n    var _metrics_stagePrompts;\n    const metrics = getStoredMetrics();\n    const stagePrompts = ((_metrics_stagePrompts = metrics.stagePrompts) === null || _metrics_stagePrompts === void 0 ? void 0 : _metrics_stagePrompts[currentStage]) || 0;\n    const totalPrompts = metrics.totalPrompts || 0;\n    // Only apply stage limits to stage 3, all other stages should be unlimited\n    const result = {\n        withinStageLimit: currentStage === 3 ? stagePrompts < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n        withinTotalLimit: currentStage === 3 ? totalPrompts < MAX_TOTAL_INPUTS : true,\n        stageInputCount: stagePrompts,\n        totalInputCount: totalPrompts\n    };\n    console.log(\"[Metrics] Input limit check for stage \".concat(currentStage, \":\"), result);\n    return result;\n}\nfunction resetMetrics() {\n    const metrics = {\n        totalPrompts: 0,\n        savedPlacesCount: 0,\n        isPaid: false,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0\n        }\n    };\n    localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n    (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.initializeSession)(); // Initialize a new session when metrics are reset\n    return metrics;\n}\nfunction checkSession() {\n    const currentSession = localStorage.getItem(SESSION_KEY);\n    if (!currentSession) {\n        const newSession = Date.now().toString();\n        localStorage.setItem(SESSION_KEY, newSession);\n        resetMetrics();\n        return false;\n    }\n    return true;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/local-metrics.ts\n"));

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: function() { return /* binding */ fetchPlaces; },\n/* harmony export */   filterUniquePlaces: function() { return /* binding */ filterUniquePlaces; },\n/* harmony export */   formatPrimaryType: function() { return /* binding */ formatPrimaryType; },\n/* harmony export */   getDisplayName: function() { return /* binding */ getDisplayName; },\n/* harmony export */   getPlaceTypesFromPreferences: function() { return /* binding */ getPlaceTypesFromPreferences; },\n/* harmony export */   preferenceToPlaceTypes: function() { return /* binding */ preferenceToPlaceTypes; },\n/* harmony export */   savedPlacesManager: function() { return /* binding */ savedPlacesManager; },\n/* harmony export */   searchMultiplePlacesByText: function() { return /* binding */ searchMultiplePlacesByText; },\n/* harmony export */   searchPlaceByText: function() { return /* binding */ searchPlaceByText; }\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _local_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-metrics */ \"./utils/local-metrics.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            var _preferenceToPlaceTypes_pref;\n            const availableTypes = ((_preferenceToPlaceTypes_pref = preferenceToPlaceTypes[pref]) === null || _preferenceToPlaceTypes_pref === void 0 ? void 0 : _preferenceToPlaceTypes_pref.filter((type)=>!usedTypes.has(type))) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    var _place_displayName;\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\nconst METRICS_STORAGE_KEY = \"metrics\";\n// Initialize from localStorage if available\nfunction initializePlaces() {\n    if (false) {}\n    try {\n        const savedPlaces = localStorage.getItem(STORAGE_KEY);\n        console.log(\"[SavedPlacesManager] Loading from storage:\", savedPlaces);\n        if (savedPlaces) {\n            const parsedPlaces = JSON.parse(savedPlaces);\n            console.log(\"[SavedPlacesManager] Parsed places:\", parsedPlaces);\n            // Handle array format\n            const places = new Map();\n            if (Array.isArray(parsedPlaces)) {\n                parsedPlaces.forEach((place)=>{\n                    if (place === null || place === void 0 ? void 0 : place.id) {\n                        places.set(place.id, place);\n                    }\n                });\n            }\n            console.log(\"[SavedPlacesManager] Initialized with places:\", Array.from(places.values()));\n            return places;\n        }\n    } catch (error) {\n        console.error(\"[SavedPlacesManager] Error loading from storage:\", error);\n    }\n    console.log(\"[SavedPlacesManager] No saved places found, returning empty map\");\n    return new Map();\n}\n// Create the singleton manager\nconst savedPlacesManager = {\n    places:  false ? 0 : initializePlaces(),\n    addPlace (place) {\n        console.log(\"[savedPlacesManager] Adding place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            currentPlacesCount: this.places.size\n        });\n        // Add place to the map\n        this.places.set(place.id, place);\n        // Persist to localStorage and notify\n        this._persist();\n        this._notifyChange();\n        console.log(\"[savedPlacesManager] Place added, new count:\", this.places.size);\n    },\n    removePlace (id) {\n        console.log(\"[savedPlacesManager] Removing place:\", {\n            id,\n            currentPlacesCount: this.places.size\n        });\n        this.places.delete(id);\n        this._persist();\n        this._notifyChange();\n        console.log(\"[savedPlacesManager] Place removed, new count:\", this.places.size);\n    },\n    getPlaces () {\n        return Array.from(this.places.values());\n    },\n    hasPlace (id) {\n        return this.places.has(id);\n    },\n    _persist () {\n        if (false) {}\n        try {\n            const placesArray = Array.from(this.places.values());\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(placesArray));\n            // Update metrics with current count\n            const metrics = (0,_local_metrics__WEBPACK_IMPORTED_MODULE_1__.getStoredMetrics)();\n            metrics.savedPlacesCount = this.places.size;\n            localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n            console.log(\"[savedPlacesManager] Persisted places and metrics:\", {\n                placesCount: placesArray.length,\n                metricsCount: metrics.savedPlacesCount\n            });\n        } catch (error) {\n            console.error(\"[savedPlacesManager] Error persisting places:\", error);\n        }\n    },\n    _notifyChange () {\n        if (false) {}\n        try {\n            const event = new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(this.places.values()),\n                    count: this.places.size\n                }\n            });\n            window.dispatchEvent(event);\n            console.log(\"[savedPlacesManager] Notified change, current count:\", this.places.size);\n        } catch (error) {\n            console.error(\"[savedPlacesManager] Error notifying change:\", error);\n        }\n    }\n};\n// Initialize window interface for backward compatibility\nif (true) {\n    try {\n        console.log(\"[savedPlacesManager] Initializing window interface\");\n        window.savedPlaces = Array.from(savedPlacesManager.places.values());\n        window.getSavedPlaces = ()=>Array.from(savedPlacesManager.places.values());\n        console.log(\"[savedPlacesManager] Window interface initialized with places count:\", savedPlacesManager.places.size);\n    } catch (error) {\n        console.error(\"[savedPlacesManager] Error initializing window interface:\", error);\n    }\n}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n    };\n    // Extract type from search text for alternate searches\n    const typeMatch = searchText.match(/(?:show me |find |get )(?:a |an |some )?(\\w+)/i);\n    const placeType = typeMatch ? typeMatch[1] : searchText;\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? \"different \".concat(placeType, \" in \").concat(cityName) : \"\".concat(searchText, \" \").concat(cityName);\n    console.log(\"[searchWithStrategy] Using \".concat(useAlternateSearch ? \"alternate\" : \"original\", \" search:\"), query);\n    const place = await trySearch(query, headers, location);\n    if (!place) {\n        console.log(\"[searchWithStrategy] No place found\");\n        return null;\n    }\n    // If this place is already saved and we haven't tried alternate search yet\n    if (savedPlacesManager.hasPlace(place.id)) {\n        if (!useAlternateSearch) {\n            console.log(\"[searchWithStrategy] Place already saved, will try alternate search\");\n            return null;\n        } else {\n            console.log(\"[searchWithStrategy] Place already saved in alternate search\");\n            return null;\n        }\n    }\n    return place;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        var _data_places;\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                }\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!((_data_places = data.places) === null || _data_places === void 0 ? void 0 : _data_places.length)) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        // Try each place until we find one that isn't saved\n        for (const place of data.places){\n            var _place_displayName;\n            if (!savedPlacesManager.hasPlace(place.id)) {\n                var _place_displayName1;\n                console.log(\"[trySearch] Found new place:\", {\n                    id: place.id,\n                    name: ((_place_displayName1 = place.displayName) === null || _place_displayName1 === void 0 ? void 0 : _place_displayName1.text) || place.name\n                });\n                return place;\n            }\n            console.log(\"[trySearch] Place already saved, trying next result:\", ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) || place.name);\n        }\n        return null;\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        var _result_places;\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!(result === null || result === void 0 ? void 0 : (_result_places = result.places) === null || _result_places === void 0 ? void 0 : _result_places[0])) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    var _place_displayName, _place_photos;\n    if (!place) return null;\n    const displayName = ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    return {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                name: photo.name,\n                widthPx: photo.widthPx,\n                heightPx: photo.heightPx,\n                authorAttributions: photo.authorAttributions\n            }))) || [],\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n}\nconst searchMultiplePlacesByText = async function(searchText, location) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>{\n            var _place_displayName, _place_photos;\n            return {\n                id: place.id,\n                displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                        name: photo.name\n                    }))) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            };\n        });\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async function(latitude, longitude, preferences) {\n    let maxResults = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5, placeTypes = arguments.length > 4 ? arguments[4] : void 0;\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!(preferences === null || preferences === void 0 ? void 0 : preferences.length),\n            fromPlaceTypes: !!(placeTypes === null || placeTypes === void 0 ? void 0 : placeTypes.length)\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>{\n                        var _place_displayName, _place_photos;\n                        return {\n                            id: place.id,\n                            displayName: ((_place_displayName = place.displayName) === null || _place_displayName === void 0 ? void 0 : _place_displayName.text) ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: ((_place_photos = place.photos) === null || _place_photos === void 0 ? void 0 : _place_photos.map((photo)=>({\n                                    name: photo.name\n                                }))) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        };\n                    });\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFlBQVliLFNBQVNhLFVBQVU7Z0JBQy9CMUYsT0FBTytHO1lBQ1g7UUFDSixFQUFFLE9BQU8vRyxPQUFPO1lBQ1pDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1FBQzdDO1FBRUEsc0RBQXNEO1FBQ3REQyxRQUFRNEIsR0FBRyxDQUFDO1FBQ1osTUFBTXlGLGNBQWNILGlCQUFpQkYsVUFBVyxDQUFDLEVBQUUsR0FBR3RJLFdBQVksQ0FBQyxFQUFFO1FBQ3JFLE9BQU8sTUFBTWdJLDJCQUEyQlcsYUFBYTtZQUFFakM7WUFBVUM7UUFBVSxHQUFHc0I7SUFFbEYsRUFBRSxPQUFPNUcsT0FBTztRQUNaQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxPQUFPLEVBQUU7SUFDYjtBQUNKLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvcGxhY2VzLXV0aWxzLnRzPzU1NWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGxhY2UgcmVsYXRlZCBpbnRlcmZhY2VzXG5leHBvcnQgaW50ZXJmYWNlIFBsYWNlIHtcbiAgICBuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgaWQ6IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZToge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGxhbmd1YWdlQ29kZTogc3RyaW5nO1xuICAgIH0gfCBzdHJpbmc7XG4gICAgZm9ybWF0dGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBsb2NhdGlvbj86IHtcbiAgICAgICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgfTtcbiAgICBwcmltYXJ5VHlwZTogc3RyaW5nO1xuICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU/OiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwaG90b3M/OiB7IFxuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHdpZHRoUHg/OiBudW1iZXI7XG4gICAgICAgIGhlaWdodFB4PzogbnVtYmVyO1xuICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM/OiBBcnJheTx7XG4gICAgICAgICAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAgICAgICAgIHVyaT86IHN0cmluZztcbiAgICAgICAgICAgIHBob3RvVXJpPzogc3RyaW5nO1xuICAgICAgICB9PjtcbiAgICB9W107XG59XG5cbmludGVyZmFjZSBHb29nbGVQbGFjZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgZGlzcGxheU5hbWU/OiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBmb3JtYXR0ZWRBZGRyZXNzPzogc3RyaW5nO1xuICAgIGxvY2F0aW9uPzoge1xuICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgICAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB9O1xuICAgIHByaW1hcnlUeXBlPzogc3RyaW5nO1xuICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU/OiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwaG90b3M/OiBBcnJheTx7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgd2lkdGhQeD86IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0UHg/OiBudW1iZXI7XG4gICAgICAgIGF1dGhvckF0dHJpYnV0aW9ucz86IEFycmF5PHtcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICAgICAgICAgICAgdXJpPzogc3RyaW5nO1xuICAgICAgICAgICAgcGhvdG9Vcmk/OiBzdHJpbmc7XG4gICAgICAgIH0+O1xuICAgIH0+O1xufVxuXG5pbXBvcnQgeyBUcmF2ZWxQcmVmZXJlbmNlIH0gZnJvbSAnLi4vbWFuYWdlcnMvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U3RvcmVkTWV0cmljcywgdXBkYXRlU3RvcmVkTWV0cmljcyB9IGZyb20gJy4vbG9jYWwtbWV0cmljcyc7XG5cbi8vIFVwZGF0ZWQgcHJlZmVyZW5jZSB0byBwbGFjZSB0eXBlcyBtYXBwaW5nIGJhc2VkIG9uIHRyYXZlbC1yaXp6Lmh0bWxcbmV4cG9ydCBjb25zdCBwcmVmZXJlbmNlVG9QbGFjZVR5cGVzOiBSZWNvcmQ8VHJhdmVsUHJlZmVyZW5jZSwgc3RyaW5nW10+ID0ge1xuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLkN1bHR1cmVdOiBbXG4gICAgICAgICdtdXNldW0nLFxuICAgICAgICAnY3VsdHVyYWxfY2VudGVyJyxcbiAgICAgICAgJ2N1bHR1cmFsX2xhbmRtYXJrJyxcbiAgICAgICAgJ2hpc3RvcmljYWxfbGFuZG1hcmsnLFxuICAgICAgICAnbW9udW1lbnQnLFxuICAgICAgICAnYXJ0X2dhbGxlcnknLFxuICAgICAgICAnaGlzdG9yaWNhbF9wbGFjZSdcbiAgICBdLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLk5hdHVyZV06IFtcbiAgICAgICAgJ25hdGlvbmFsX3BhcmsnLFxuICAgICAgICAnc3RhdGVfcGFyaycsXG4gICAgICAgICdib3RhbmljYWxfZ2FyZGVuJyxcbiAgICAgICAgJ3dpbGRsaWZlX3BhcmsnLFxuICAgICAgICAnZ2FyZGVuJyxcbiAgICAgICAgJ2hpa2luZ19hcmVhJyxcbiAgICAgICAgJ3dpbGRsaWZlX3JlZnVnZSdcbiAgICBdLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLkZvb2RdOiBbXG4gICAgICAgICdyZXN0YXVyYW50JyxcbiAgICAgICAgJ2ZpbmVfZGluaW5nX3Jlc3RhdXJhbnQnLFxuICAgICAgICAnY2FmZScsXG4gICAgICAgICdmb29kX2NvdXJ0JyxcbiAgICAgICAgJ2Jha2VyeScsXG4gICAgICAgICdkZXNzZXJ0X3Nob3AnLFxuICAgICAgICAnYmFyX2FuZF9ncmlsbCdcbiAgICBdLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLlJlbGF4YXRpb25dOiBbXG4gICAgICAgICdzcGEnLFxuICAgICAgICAnd2VsbG5lc3NfY2VudGVyJyxcbiAgICAgICAgJ3Nob3BwaW5nX21hbGwnLFxuICAgICAgICAnYmVhY2gnLFxuICAgICAgICAnZ2FyZGVuJyxcbiAgICAgICAgJ3BsYXphJyxcbiAgICAgICAgJ3lvZ2Ffc3R1ZGlvJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuQWR2ZW50dXJlXTogW1xuICAgICAgICAnYWR2ZW50dXJlX3Nwb3J0c19jZW50ZXInLFxuICAgICAgICAnYW11c2VtZW50X3BhcmsnLFxuICAgICAgICAnaGlraW5nX2FyZWEnLFxuICAgICAgICAnc3BvcnRzX2NvbXBsZXgnLFxuICAgICAgICAnd2F0ZXJfcGFyaycsXG4gICAgICAgICdvZmZfcm9hZGluZ19hcmVhJyxcbiAgICAgICAgJ3Nwb3J0c19hY3Rpdml0eV9sb2NhdGlvbidcbiAgICBdLFxuICAgIFtUcmF2ZWxQcmVmZXJlbmNlLlNob3BwaW5nXTogWyAvLyBBcnRzICYgTXVzZXVtXG4gICAgICAgICdhcnRfZ2FsbGVyeScsXG4gICAgICAgICdhcnRfc3R1ZGlvJyxcbiAgICAgICAgJ3BlcmZvcm1pbmdfYXJ0c190aGVhdGVyJyxcbiAgICAgICAgJ2F1ZGl0b3JpdW0nLFxuICAgICAgICAnY29uY2VydF9oYWxsJyxcbiAgICAgICAgJ211c2V1bScsXG4gICAgICAgICdvcGVyYV9ob3VzZSdcbiAgICBdXG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHBsYWNlIHR5cGVzIGJhc2VkIG9uIHByZWZlcmVuY2VzXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGxhY2VUeXBlc0Zyb21QcmVmZXJlbmNlcyhwcmVmZXJlbmNlczogVHJhdmVsUHJlZmVyZW5jZVtdKTogc3RyaW5nW10ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFRyYWNrIHVzZWQgdHlwZXMgdG8gYXZvaWQgcmVwZWF0c1xuICAgICAgICBjb25zdCB1c2VkVHlwZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgY29uc3QgcmVzdWx0VHlwZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNzIGVhY2ggcHJlZmVyZW5jZVxuICAgICAgICBwcmVmZXJlbmNlcy5mb3JFYWNoKHByZWYgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlVHlwZXMgPSBwcmVmZXJlbmNlVG9QbGFjZVR5cGVzW3ByZWZdPy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgdHlwZSA9PiAhdXNlZFR5cGVzLmhhcyh0eXBlKVxuICAgICAgICAgICAgKSB8fCBbXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVGFrZSAyLTMgcmFuZG9tIHR5cGVzIGZyb20gZWFjaCBwcmVmZXJlbmNlXG4gICAgICAgICAgICBjb25zdCBudW1UeXBlcyA9IE1hdGgubWluKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpICsgMiwgYXZhaWxhYmxlVHlwZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVHlwZXMgPSBhdmFpbGFibGVUeXBlc1xuICAgICAgICAgICAgICAgIC5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIG51bVR5cGVzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCB0byByZXN1bHRzIGFuZCBtYXJrIGFzIHVzZWRcbiAgICAgICAgICAgIHNlbGVjdGVkVHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHRUeXBlcy5wdXNoKHR5cGUpO1xuICAgICAgICAgICAgICAgIHVzZWRUeXBlcy5hZGQodHlwZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFR5cGVzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgcGxhY2UgdHlwZXMgZnJvbSBwcmVmZXJlbmNlczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbJ3RvdXJpc3RfYXR0cmFjdGlvbiddOyAvLyBEZWZhdWx0IGZhbGxiYWNrXG4gICAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IHByaW1hcnkgdHlwZVxuZXhwb3J0IGNvbnN0IGZvcm1hdFByaW1hcnlUeXBlID0gKHR5cGU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIHR5cGUuc3BsaXQoJ18nKVxuICAgICAgICAubWFwKHdvcmQgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkpXG4gICAgICAgIC5qb2luKCcgJyk7XG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGRpc3BsYXkgbmFtZSBmb3IgcGxhY2UgdHlwZVxuZXhwb3J0IGNvbnN0IGdldERpc3BsYXlOYW1lID0gKHBsYWNlOiBQbGFjZSk6IHN0cmluZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBwbGFjZS5kaXNwbGF5TmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHBsYWNlLmRpc3BsYXlOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgfHwgcGxhY2UubmFtZSB8fCAnJztcbn07XG5cbi8vIEZ1bmN0aW9uIHRvIGZpbHRlciBvdXQgZHVwbGljYXRlIHBsYWNlc1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclVuaXF1ZVBsYWNlcyhwbGFjZXM6IFBsYWNlW10pOiBQbGFjZVtdIHtcbiAgICBpZiAoIXBsYWNlcyB8fCAhQXJyYXkuaXNBcnJheShwbGFjZXMpKSByZXR1cm4gW107XG5cbiAgICAvLyBHZXQgc2F2ZWQgcGxhY2VzIGZyb20gZ2xvYmFsIHN0YXRlIGlmIGF2YWlsYWJsZVxuICAgIGNvbnN0IHNhdmVkUGxhY2VzID0gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlcygpO1xuXG4gICAgY29uc3Qgc2F2ZWRQbGFjZUlkcyA9IG5ldyBTZXQoc2F2ZWRQbGFjZXMubWFwKHBsYWNlID0+IHBsYWNlLmlkKSk7XG4gICAgY29uc3Qgc2F2ZWRQbGFjZU5hbWVzID0gbmV3IFNldChzYXZlZFBsYWNlcy5tYXAocGxhY2UgPT4gXG4gICAgICAgIHR5cGVvZiBwbGFjZS5kaXNwbGF5TmFtZSA9PT0gJ3N0cmluZycgXG4gICAgICAgICAgICA/IHBsYWNlLmRpc3BsYXlOYW1lLnRvTG93ZXJDYXNlKCkgXG4gICAgICAgICAgICA6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQudG9Mb3dlckNhc2UoKVxuICAgICkpO1xuXG4gICAgIC8vIEZpbHRlciBvdXQgcGxhY2VzIHRoYXQ6XG4gICAgLy8gMS4gSGF2ZSBzYW1lIElEIGFzIHNhdmVkIHBsYWNlXG4gICAgLy8gMi4gSGF2ZSBzYW1lIG5hbWUgYXMgc2F2ZWQgcGxhY2VcbiAgICByZXR1cm4gcGxhY2VzLmZpbHRlcihwbGFjZSA9PiB7XG4gICAgICAgIGlmICghcGxhY2UuaWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHNhdmVkUGxhY2VJZHMuaGFzKHBsYWNlLmlkKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcGxhY2VOYW1lID0gdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyBcbiAgICAgICAgICAgID8gcGxhY2UuZGlzcGxheU5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgOiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgKHNhdmVkUGxhY2VOYW1lcy5oYXMocGxhY2VOYW1lKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG59XG5cbi8vIEFkZCBTYXZlZFBsYWNlc01hbmFnZXIgaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIFNhdmVkUGxhY2VzTWFuYWdlciB7XG4gICAgcGxhY2VzOiBNYXA8c3RyaW5nLCBQbGFjZT47XG4gICAgYWRkUGxhY2U6IChwbGFjZTogUGxhY2UpID0+IHZvaWQ7XG4gICAgcmVtb3ZlUGxhY2U6IChpZDogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGdldFBsYWNlczogKCkgPT4gUGxhY2VbXTtcbiAgICBoYXNQbGFjZTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgX3BlcnNpc3Q6ICgpID0+IHZvaWQ7XG4gICAgX25vdGlmeUNoYW5nZTogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgU1RPUkFHRV9LRVkgPSAnc2F2ZWRfcGxhY2VzJztcbmNvbnN0IE1FVFJJQ1NfU1RPUkFHRV9LRVkgPSAnbWV0cmljcyc7XG5cbi8vIEluaXRpYWxpemUgZnJvbSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG5mdW5jdGlvbiBpbml0aWFsaXplUGxhY2VzKCk6IE1hcDxzdHJpbmcsIFBsYWNlPiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbU2F2ZWRQbGFjZXNNYW5hZ2VyXSBTZXJ2ZXItc2lkZSwgcmV0dXJuaW5nIGVtcHR5IG1hcCcpO1xuICAgICAgICByZXR1cm4gbmV3IE1hcDxzdHJpbmcsIFBsYWNlPigpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhdmVkUGxhY2VzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU1RPUkFHRV9LRVkpO1xuICAgICAgICBjb25zb2xlLmxvZygnW1NhdmVkUGxhY2VzTWFuYWdlcl0gTG9hZGluZyBmcm9tIHN0b3JhZ2U6Jywgc2F2ZWRQbGFjZXMpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHNhdmVkUGxhY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRQbGFjZXMgPSBKU09OLnBhcnNlKHNhdmVkUGxhY2VzKSBhcyBQbGFjZVtdO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTYXZlZFBsYWNlc01hbmFnZXJdIFBhcnNlZCBwbGFjZXM6JywgcGFyc2VkUGxhY2VzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGFuZGxlIGFycmF5IGZvcm1hdFxuICAgICAgICAgICAgY29uc3QgcGxhY2VzID0gbmV3IE1hcDxzdHJpbmcsIFBsYWNlPigpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGxhY2VzKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZFBsYWNlcy5mb3JFYWNoKHBsYWNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlPy5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VzLnNldChwbGFjZS5pZCwgcGxhY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbU2F2ZWRQbGFjZXNNYW5hZ2VyXSBJbml0aWFsaXplZCB3aXRoIHBsYWNlczonLCBBcnJheS5mcm9tKHBsYWNlcy52YWx1ZXMoKSkpO1xuICAgICAgICAgICAgcmV0dXJuIHBsYWNlcztcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTYXZlZFBsYWNlc01hbmFnZXJdIEVycm9yIGxvYWRpbmcgZnJvbSBzdG9yYWdlOicsIGVycm9yKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnW1NhdmVkUGxhY2VzTWFuYWdlcl0gTm8gc2F2ZWQgcGxhY2VzIGZvdW5kLCByZXR1cm5pbmcgZW1wdHkgbWFwJyk7XG4gICAgcmV0dXJuIG5ldyBNYXA8c3RyaW5nLCBQbGFjZT4oKTtcbn1cblxuLy8gRGVjbGFyZSB3aW5kb3cgaW50ZXJmYWNlIGZvciBzYXZlZCBwbGFjZXNcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgc2F2ZWRQbGFjZXM6IFBsYWNlW107XG4gICAgICAgIGFkZFBsYWNlVG9NYXA/OiAocGxhY2U6IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgICAgICAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICAgICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICAgICAgcGxhY2U/OiBQbGFjZTtcbiAgICAgICAgfSkgPT4gdm9pZDtcbiAgICAgICAgZ2V0U2F2ZWRQbGFjZXM/OiAoKSA9PiBQbGFjZVtdO1xuICAgIH1cbn1cblxuLy8gQ3JlYXRlIHRoZSBzaW5nbGV0b24gbWFuYWdlclxuZXhwb3J0IGNvbnN0IHNhdmVkUGxhY2VzTWFuYWdlciA9IHtcbiAgICBwbGFjZXM6IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbmV3IE1hcCgpIDogaW5pdGlhbGl6ZVBsYWNlcygpLFxuXG4gICAgYWRkUGxhY2UocGxhY2U6IFBsYWNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbc2F2ZWRQbGFjZXNNYW5hZ2VyXSBBZGRpbmcgcGxhY2U6Jywge1xuICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgbmFtZTogZ2V0RGlzcGxheU5hbWUocGxhY2UpLFxuICAgICAgICAgICAgY3VycmVudFBsYWNlc0NvdW50OiB0aGlzLnBsYWNlcy5zaXplXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHBsYWNlIHRvIHRoZSBtYXBcbiAgICAgICAgdGhpcy5wbGFjZXMuc2V0KHBsYWNlLmlkLCBwbGFjZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBQZXJzaXN0IHRvIGxvY2FsU3RvcmFnZSBhbmQgbm90aWZ5XG4gICAgICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnW3NhdmVkUGxhY2VzTWFuYWdlcl0gUGxhY2UgYWRkZWQsIG5ldyBjb3VudDonLCB0aGlzLnBsYWNlcy5zaXplKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlUGxhY2UoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zb2xlLmxvZygnW3NhdmVkUGxhY2VzTWFuYWdlcl0gUmVtb3ZpbmcgcGxhY2U6Jywge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBjdXJyZW50UGxhY2VzQ291bnQ6IHRoaXMucGxhY2VzLnNpemVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGxhY2VzLmRlbGV0ZShpZCk7XG4gICAgICAgIHRoaXMuX3BlcnNpc3QoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbc2F2ZWRQbGFjZXNNYW5hZ2VyXSBQbGFjZSByZW1vdmVkLCBuZXcgY291bnQ6JywgdGhpcy5wbGFjZXMuc2l6ZSk7XG4gICAgfSxcblxuICAgIGdldFBsYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wbGFjZXMudmFsdWVzKCkpO1xuICAgIH0sXG5cbiAgICBoYXNQbGFjZShpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYWNlcy5oYXMoaWQpO1xuICAgIH0sXG5cbiAgICBfcGVyc2lzdCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlc0FycmF5ID0gQXJyYXkuZnJvbSh0aGlzLnBsYWNlcy52YWx1ZXMoKSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkocGxhY2VzQXJyYXkpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIG1ldHJpY3Mgd2l0aCBjdXJyZW50IGNvdW50XG4gICAgICAgICAgICBjb25zdCBtZXRyaWNzID0gZ2V0U3RvcmVkTWV0cmljcygpO1xuICAgICAgICAgICAgbWV0cmljcy5zYXZlZFBsYWNlc0NvdW50ID0gdGhpcy5wbGFjZXMuc2l6ZTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKE1FVFJJQ1NfU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KG1ldHJpY3MpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzYXZlZFBsYWNlc01hbmFnZXJdIFBlcnNpc3RlZCBwbGFjZXMgYW5kIG1ldHJpY3M6Jywge1xuICAgICAgICAgICAgICAgIHBsYWNlc0NvdW50OiBwbGFjZXNBcnJheS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWV0cmljc0NvdW50OiBtZXRyaWNzLnNhdmVkUGxhY2VzQ291bnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW3NhdmVkUGxhY2VzTWFuYWdlcl0gRXJyb3IgcGVyc2lzdGluZyBwbGFjZXM6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9ub3RpZnlDaGFuZ2UoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnc2F2ZWRQbGFjZXNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDogeyBcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VzOiBBcnJheS5mcm9tKHRoaXMucGxhY2VzLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMucGxhY2VzLnNpemUgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3NhdmVkUGxhY2VzTWFuYWdlcl0gTm90aWZpZWQgY2hhbmdlLCBjdXJyZW50IGNvdW50OicsIHRoaXMucGxhY2VzLnNpemUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW3NhdmVkUGxhY2VzTWFuYWdlcl0gRXJyb3Igbm90aWZ5aW5nIGNoYW5nZTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59IGFzIGNvbnN0O1xuXG4vLyBJbml0aWFsaXplIHdpbmRvdyBpbnRlcmZhY2UgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbc2F2ZWRQbGFjZXNNYW5hZ2VyXSBJbml0aWFsaXppbmcgd2luZG93IGludGVyZmFjZScpO1xuICAgICAgICB3aW5kb3cuc2F2ZWRQbGFjZXMgPSBBcnJheS5mcm9tKHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMudmFsdWVzKCkpO1xuICAgICAgICB3aW5kb3cuZ2V0U2F2ZWRQbGFjZXMgPSAoKSA9PiBBcnJheS5mcm9tKHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMudmFsdWVzKCkpO1xuICAgICAgICBjb25zb2xlLmxvZygnW3NhdmVkUGxhY2VzTWFuYWdlcl0gV2luZG93IGludGVyZmFjZSBpbml0aWFsaXplZCB3aXRoIHBsYWNlcyBjb3VudDonLCBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tzYXZlZFBsYWNlc01hbmFnZXJdIEVycm9yIGluaXRpYWxpemluZyB3aW5kb3cgaW50ZXJmYWNlOicsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBoYW5kbGUgZGlmZmVyZW50IHNlYXJjaCBzdHJhdGVnaWVzXG5hc3luYyBmdW5jdGlvbiBzZWFyY2hXaXRoU3RyYXRlZ3koXG4gICAgc2VhcmNoVGV4dDogc3RyaW5nLFxuICAgIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyIH0sXG4gICAgY2l0eU5hbWU6IHN0cmluZyxcbiAgICB1c2VBbHRlcm5hdGVTZWFyY2g6IGJvb2xlYW5cbik6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HT09HTEVfTUFQU19BUElfS0VZKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR29vZ2xlIE1hcHMgQVBJIGtleSBpcyBtaXNzaW5nJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ1gtR29vZy1BcGktS2V5JzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSxcbiAgICAgICAgJ1gtR29vZy1GaWVsZE1hc2snOiAncGxhY2VzLmlkLHBsYWNlcy5kaXNwbGF5TmFtZSxwbGFjZXMuZm9ybWF0dGVkQWRkcmVzcyxwbGFjZXMubG9jYXRpb24scGxhY2VzLnByaW1hcnlUeXBlLHBsYWNlcy5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLHBsYWNlcy5waG90b3MubmFtZSdcbiAgICB9IGFzIGNvbnN0O1xuXG4gICAgLy8gRXh0cmFjdCB0eXBlIGZyb20gc2VhcmNoIHRleHQgZm9yIGFsdGVybmF0ZSBzZWFyY2hlc1xuICAgIGNvbnN0IHR5cGVNYXRjaCA9IHNlYXJjaFRleHQubWF0Y2goLyg/OnNob3cgbWUgfGZpbmQgfGdldCApKD86YSB8YW4gfHNvbWUgKT8oXFx3KykvaSk7XG4gICAgY29uc3QgcGxhY2VUeXBlID0gdHlwZU1hdGNoID8gdHlwZU1hdGNoWzFdIDogc2VhcmNoVGV4dDtcblxuICAgIC8vIENob29zZSBxdWVyeSBiYXNlZCBvbiB3aGV0aGVyIHdlJ3JlIGRvaW5nIGFsdGVybmF0ZSBzZWFyY2hcbiAgICBjb25zdCBxdWVyeSA9IHVzZUFsdGVybmF0ZVNlYXJjaCBcbiAgICAgICAgPyBgZGlmZmVyZW50ICR7cGxhY2VUeXBlfSBpbiAke2NpdHlOYW1lfWBcbiAgICAgICAgOiBgJHtzZWFyY2hUZXh0fSAke2NpdHlOYW1lfWA7XG5cbiAgICBjb25zb2xlLmxvZyhgW3NlYXJjaFdpdGhTdHJhdGVneV0gVXNpbmcgJHt1c2VBbHRlcm5hdGVTZWFyY2ggPyAnYWx0ZXJuYXRlJyA6ICdvcmlnaW5hbCd9IHNlYXJjaDpgLCBxdWVyeSk7XG4gICAgXG4gICAgY29uc3QgcGxhY2UgPSBhd2FpdCB0cnlTZWFyY2gocXVlcnksIGhlYWRlcnMsIGxvY2F0aW9uKTtcbiAgICBpZiAoIXBsYWNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbc2VhcmNoV2l0aFN0cmF0ZWd5XSBObyBwbGFjZSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIHBsYWNlIGlzIGFscmVhZHkgc2F2ZWQgYW5kIHdlIGhhdmVuJ3QgdHJpZWQgYWx0ZXJuYXRlIHNlYXJjaCB5ZXRcbiAgICBpZiAoc2F2ZWRQbGFjZXNNYW5hZ2VyLmhhc1BsYWNlKHBsYWNlLmlkKSkge1xuICAgICAgICBpZiAoIXVzZUFsdGVybmF0ZVNlYXJjaCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hXaXRoU3RyYXRlZ3ldIFBsYWNlIGFscmVhZHkgc2F2ZWQsIHdpbGwgdHJ5IGFsdGVybmF0ZSBzZWFyY2gnKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hXaXRoU3RyYXRlZ3ldIFBsYWNlIGFscmVhZHkgc2F2ZWQgaW4gYWx0ZXJuYXRlIHNlYXJjaCcpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGxhY2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeVNlYXJjaChcbiAgICBxdWVyeTogc3RyaW5nLFxuICAgIGhlYWRlcnM6IGFueSxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9XG4pOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxL3BsYWNlczpzZWFyY2hUZXh0Jywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHRleHRRdWVyeTogcXVlcnksXG4gICAgICAgICAgICAgICAgbG9jYXRpb25CaWFzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9jYXRpb24ubG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMDAwMC4wXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbdHJ5U2VhcmNoXSBTZWFyY2ggZmFpbGVkOicsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgaWYgKCFkYXRhLnBsYWNlcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3RyeVNlYXJjaF0gTm8gcGxhY2VzIGZvdW5kIGZvciBxdWVyeTonLCBxdWVyeSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyeSBlYWNoIHBsYWNlIHVudGlsIHdlIGZpbmQgb25lIHRoYXQgaXNuJ3Qgc2F2ZWRcbiAgICAgICAgZm9yIChjb25zdCBwbGFjZSBvZiBkYXRhLnBsYWNlcykge1xuICAgICAgICAgICAgaWYgKCFzYXZlZFBsYWNlc01hbmFnZXIuaGFzUGxhY2UocGxhY2UuaWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1t0cnlTZWFyY2hdIEZvdW5kIG5ldyBwbGFjZTonLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgfHwgcGxhY2UubmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGFjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdHJ5U2VhcmNoXSBQbGFjZSBhbHJlYWR5IHNhdmVkLCB0cnlpbmcgbmV4dCByZXN1bHQ6JywgcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgfHwgcGxhY2UubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbdHJ5U2VhcmNoXSBFcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFBsYWNlQnlUZXh0KFxuICAgIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICAgIGRlc3RpbmF0aW9uOiBzdHJpbmdcbik6IFByb21pc2U8UGxhY2UgfCBudWxsPiB7XG4gICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gU3RhcnRpbmcgc2VhcmNoIHdpdGg6Jywge1xuICAgICAgICBzZWFyY2hUZXh0LFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVzdGluYXRpb25cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNpdHlOYW1lID0gZGVzdGluYXRpb247XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlYXJjaFdpdGhTdHJhdGVneShzZWFyY2hUZXh0LCBsb2NhdGlvbiwgY2l0eU5hbWUsIGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghcmVzdWx0Py5wbGFjZXM/LlswXSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwbGFjZSA9IHRyYW5zZm9ybVBsYWNlUmVzcG9uc2UocmVzdWx0LnBsYWNlc1swXSk7XG4gICAgICAgIGlmICghcGxhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgcGxhY2UgaXMgYWxyZWFkeSBzYXZlZCB1c2luZyBzYXZlZFBsYWNlc01hbmFnZXJcbiAgICAgICAgY29uc3QgaXNBbHJlYWR5U2F2ZWQgPSBzYXZlZFBsYWNlc01hbmFnZXIuaGFzUGxhY2UocGxhY2UuaWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFpc0FscmVhZHlTYXZlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gQWRkaW5nIG5ldyBwbGFjZTonLCB7XG4gICAgICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGdldERpc3BsYXlOYW1lKHBsYWNlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzYXZlZFBsYWNlc01hbmFnZXIuYWRkUGxhY2UocGxhY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gRm91bmQgcGxhY2U6Jywge1xuICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgbmFtZTogZ2V0RGlzcGxheU5hbWUocGxhY2UpLFxuICAgICAgICAgICAgaXNBbHJlYWR5U2F2ZWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHBsYWNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tzZWFyY2hQbGFjZUJ5VGV4dF0gRXJyb3Igc2VhcmNoaW5nIGZvciBwbGFjZTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSBHb29nbGUgUGxhY2VzIEFQSSByZXNwb25zZSB0byBvdXIgUGxhY2UgdHlwZVxuZnVuY3Rpb24gdHJhbnNmb3JtUGxhY2VSZXNwb25zZShwbGFjZTogR29vZ2xlUGxhY2VSZXNwb25zZSk6IFBsYWNlIHwgbnVsbCB7XG4gICAgaWYgKCFwbGFjZSkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IHBsYWNlLmRpc3BsYXlOYW1lPy50ZXh0IFxuICAgICAgICA/IHsgdGV4dDogcGxhY2UuZGlzcGxheU5hbWUudGV4dCwgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5kaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJyB9XG4gICAgICAgIDogcGxhY2UubmFtZSB8fCAnJztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgbmFtZTogcGxhY2UubmFtZSxcbiAgICAgICAgZGlzcGxheU5hbWUsXG4gICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSB8fCAncGxhY2UnLFxuICAgICAgICBwaG90b3M6IHBsYWNlLnBob3Rvcz8ubWFwKHBob3RvID0+ICh7IFxuICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZSxcbiAgICAgICAgICAgIHdpZHRoUHg6IHBob3RvLndpZHRoUHgsXG4gICAgICAgICAgICBoZWlnaHRQeDogcGhvdG8uaGVpZ2h0UHgsXG4gICAgICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM6IHBob3RvLmF1dGhvckF0dHJpYnV0aW9uc1xuICAgICAgICB9KSkgfHwgW10sXG4gICAgICAgIGZvcm1hdHRlZEFkZHJlc3M6IHBsYWNlLmZvcm1hdHRlZEFkZHJlc3MsXG4gICAgICAgIGxvY2F0aW9uOiBwbGFjZS5sb2NhdGlvbixcbiAgICAgICAgcHJpbWFyeVR5cGVEaXNwbGF5TmFtZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSBcbiAgICAgICAgICAgID8geyB0ZXh0OiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLnRleHQsIGxhbmd1YWdlQ29kZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJyB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBzZWFyY2hNdWx0aXBsZVBsYWNlc0J5VGV4dCA9IGFzeW5jIChcbiAgICBzZWFyY2hUZXh0OiBzdHJpbmcsXG4gICAgbG9jYXRpb246IHsgbGF0aXR1ZGU6IG51bWJlcjsgbG9uZ2l0dWRlOiBudW1iZXIgfSxcbiAgICBtYXhSZXN1bHRzOiBudW1iZXIgPSA1XG4pOiBQcm9taXNlPFBsYWNlW10+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dvb2dsZSBNYXBzIEFQSSBrZXkgaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0V4ZWN1dGluZyBzZWFyY2hNdWx0aXBsZVBsYWNlc0J5VGV4dCB3aXRoIHBhcmFtczonLCB7XG4gICAgICAgICAgICBzZWFyY2hUZXh0LFxuICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICBtYXhSZXN1bHRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xuICAgICAgICAgICAgdGV4dFF1ZXJ5OiBzZWFyY2hUZXh0LFxuICAgICAgICAgICAgbG9jYXRpb25CaWFzOiB7XG4gICAgICAgICAgICAgICAgY2lyY2xlOiB7XG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxvY2F0aW9uLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMDAwMC4wIC8vIDIwa20gcmFkaXVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heFJlc3VsdENvdW50OiBtYXhSZXN1bHRzXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnWC1Hb29nLUFwaS1LZXknOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HT09HTEVfTUFQU19BUElfS0VZLFxuICAgICAgICAgICAgJ1gtR29vZy1GaWVsZE1hc2snOiAncGxhY2VzLmlkLHBsYWNlcy5kaXNwbGF5TmFtZSxwbGFjZXMuZm9ybWF0dGVkQWRkcmVzcyxwbGFjZXMubG9jYXRpb24scGxhY2VzLnByaW1hcnlUeXBlLHBsYWNlcy5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLHBsYWNlcy5waG90b3MubmFtZSdcbiAgICAgICAgfSBhcyBjb25zdDtcblxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3BsYWNlcy5nb29nbGVhcGlzLmNvbS92MS9wbGFjZXM6c2VhcmNoVGV4dCcsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2VhcmNoIHBsYWNlczonLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JEYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWRhdGEucGxhY2VzIHx8ICFBcnJheS5pc0FycmF5KGRhdGEucGxhY2VzKSB8fCBkYXRhLnBsYWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBwbGFjZXMgZm91bmQgZm9yIHRleHQgc2VhcmNoOicsIHNlYXJjaFRleHQpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGEucGxhY2VzLm1hcCgocGxhY2U6IGFueSkgPT4gKHtcbiAgICAgICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCA/IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UuZGlzcGxheU5hbWUubGFuZ3VhZ2VDb2RlIHx8ICdlbidcbiAgICAgICAgICAgIH0gOiBwbGFjZS5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSB8fCAncGxhY2UnLFxuICAgICAgICAgICAgcGhvdG9zOiBwbGFjZS5waG90b3M/Lm1hcCgocGhvdG86IGFueSkgPT4gKHsgXG4gICAgICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZVxuICAgICAgICAgICAgfSkpIHx8IFtdLFxuICAgICAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcGxhY2UuZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBwbGFjZS5sb2NhdGlvbixcbiAgICAgICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUgPyB7XG4gICAgICAgICAgICAgICAgdGV4dDogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJ1xuICAgICAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIGZvciBwbGFjZXM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufTtcblxuLy8gRmV0Y2ggcGxhY2VzIGZyb20gR29vZ2xlIFBsYWNlcyBBUElcbmV4cG9ydCBjb25zdCBmZXRjaFBsYWNlcyA9IGFzeW5jIChcbiAgICBsYXRpdHVkZTogbnVtYmVyLFxuICAgIGxvbmdpdHVkZTogbnVtYmVyLFxuICAgIHByZWZlcmVuY2VzPzogVHJhdmVsUHJlZmVyZW5jZVtdLFxuICAgIG1heFJlc3VsdHM6IG51bWJlciA9IDUsXG4gICAgcGxhY2VUeXBlcz86IHN0cmluZ1tdXG4pOiBQcm9taXNlPFBsYWNlW10+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dvb2dsZSBNYXBzIEFQSSBrZXkgaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnJvbVByZWZlcmVuY2VzID0gISFwcmVmZXJlbmNlcyAmJiBwcmVmZXJlbmNlcy5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBmcm9tUGxhY2VUeXBlcyA9ICEhcGxhY2VUeXBlcyAmJiBwbGFjZVR5cGVzLmxlbmd0aCA+IDA7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWZyb21QcmVmZXJlbmNlcyAmJiAhZnJvbVBsYWNlVHlwZXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIHByZWZlcmVuY2VzIG9yIHBsYWNlIHR5cGVzIHByb3ZpZGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2UgcHJlZmVyZW5jZXMgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSB1c2UgcGxhY2VUeXBlcywgb3RoZXJ3aXNlIHVzZSBkZWZhdWx0c1xuICAgICAgICBsZXQgaW5jbHVkZWRUeXBlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgaWYgKGZyb21QcmVmZXJlbmNlcykge1xuICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyA9IGdldFBsYWNlVHlwZXNGcm9tUHJlZmVyZW5jZXMocHJlZmVyZW5jZXMhKTtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9tUGxhY2VUeXBlcykge1xuICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyA9IHBsYWNlVHlwZXMhO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0V4ZWN1dGluZyBmZXRjaHBsYWNlcyB3aXRoIHBhcmFtczonLCB7XG4gICAgICAgICAgICBsYXRpdHVkZSxcbiAgICAgICAgICAgIGxvbmdpdHVkZSxcbiAgICAgICAgICAgIGluY2x1ZGVkVHlwZXMsXG4gICAgICAgICAgICBtYXhSZXN1bHRzLFxuICAgICAgICAgICAgZnJvbVByZWZlcmVuY2VzOiAhIXByZWZlcmVuY2VzPy5sZW5ndGgsXG4gICAgICAgICAgICBmcm9tUGxhY2VUeXBlczogISFwbGFjZVR5cGVzPy5sZW5ndGhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRmlyc3QgdHJ5IG5lYXJieSBzZWFyY2hcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xuICAgICAgICAgICAgICAgIGluY2x1ZGVkVHlwZXMsXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0Q291bnQ6IG1heFJlc3VsdHMsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25SZXN0cmljdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBjaXJjbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBsYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAwMDAuMCAvLyAyMGttIHJhZGl1c1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdYLUdvb2ctQXBpLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVksXG4gICAgICAgICAgICAgICAgJ1gtR29vZy1GaWVsZE1hc2snOiAncGxhY2VzLmlkLHBsYWNlcy5kaXNwbGF5TmFtZSxwbGFjZXMuZm9ybWF0dGVkQWRkcmVzcyxwbGFjZXMubG9jYXRpb24scGxhY2VzLnByaW1hcnlUeXBlLHBsYWNlcy5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLHBsYWNlcy5waG90b3MubmFtZSdcbiAgICAgICAgICAgIH0gYXMgY29uc3Q7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxL3BsYWNlczpzZWFyY2hOZWFyYnknLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYWNlcyAmJiBBcnJheS5pc0FycmF5KGRhdGEucGxhY2VzKSAmJiBkYXRhLnBsYWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnBsYWNlcy5tYXAoKHBsYWNlOiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcGxhY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcGxhY2UuZGlzcGxheU5hbWUudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUNvZGU6IHBsYWNlLmRpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogcGxhY2UuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZTogcGxhY2UucHJpbWFyeVR5cGUgfHwgJ3BsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvczogcGxhY2UucGhvdG9zPy5tYXAoKHBob3RvOiBhbnkpID0+ICh7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHBob3RvLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZEFkZHJlc3M6IHBsYWNlLmZvcm1hdHRlZEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcGxhY2UubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUNvZGU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUubGFuZ3VhZ2VDb2RlIHx8ICdlbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIHBsYWNlczonLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JEYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIG5lYXJieSBzZWFyY2g6JywgZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbmVhcmJ5IHNlYXJjaCBmYWlscywgdHJ5IHRleHQgc2VhcmNoIGFzIGZhbGxiYWNrXG4gICAgICAgIGNvbnNvbGUubG9nKCdGYWxsaW5nIGJhY2sgdG8gdGV4dCBzZWFyY2guLi4nKTtcbiAgICAgICAgY29uc3Qgc2VhcmNoUXVlcnkgPSBmcm9tUGxhY2VUeXBlcyA/IHBsYWNlVHlwZXMhWzBdIDogcHJlZmVyZW5jZXMhWzBdO1xuICAgICAgICByZXR1cm4gYXdhaXQgc2VhcmNoTXVsdGlwbGVQbGFjZXNCeVRleHQoc2VhcmNoUXVlcnksIHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSB9LCBtYXhSZXN1bHRzKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHBsYWNlczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59OyJdLCJuYW1lcyI6WyJUcmF2ZWxQcmVmZXJlbmNlIiwiZ2V0U3RvcmVkTWV0cmljcyIsInByZWZlcmVuY2VUb1BsYWNlVHlwZXMiLCJDdWx0dXJlIiwiTmF0dXJlIiwiRm9vZCIsIlJlbGF4YXRpb24iLCJBZHZlbnR1cmUiLCJTaG9wcGluZyIsImdldFBsYWNlVHlwZXNGcm9tUHJlZmVyZW5jZXMiLCJwcmVmZXJlbmNlcyIsInVzZWRUeXBlcyIsIlNldCIsInJlc3VsdFR5cGVzIiwiZm9yRWFjaCIsInByZWYiLCJhdmFpbGFibGVUeXBlcyIsImZpbHRlciIsInR5cGUiLCJoYXMiLCJudW1UeXBlcyIsIk1hdGgiLCJtaW4iLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInNlbGVjdGVkVHlwZXMiLCJzb3J0Iiwic2xpY2UiLCJwdXNoIiwiYWRkIiwiZXJyb3IiLCJjb25zb2xlIiwiZm9ybWF0UHJpbWFyeVR5cGUiLCJzcGxpdCIsIm1hcCIsIndvcmQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImpvaW4iLCJnZXREaXNwbGF5TmFtZSIsInBsYWNlIiwiZGlzcGxheU5hbWUiLCJ0ZXh0IiwibmFtZSIsImZpbHRlclVuaXF1ZVBsYWNlcyIsInBsYWNlcyIsIkFycmF5IiwiaXNBcnJheSIsInNhdmVkUGxhY2VzIiwic2F2ZWRQbGFjZXNNYW5hZ2VyIiwiZ2V0UGxhY2VzIiwic2F2ZWRQbGFjZUlkcyIsImlkIiwic2F2ZWRQbGFjZU5hbWVzIiwidG9Mb3dlckNhc2UiLCJwbGFjZU5hbWUiLCJTVE9SQUdFX0tFWSIsIk1FVFJJQ1NfU1RPUkFHRV9LRVkiLCJpbml0aWFsaXplUGxhY2VzIiwibG9nIiwiTWFwIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInBhcnNlZFBsYWNlcyIsIkpTT04iLCJwYXJzZSIsInNldCIsImZyb20iLCJ2YWx1ZXMiLCJhZGRQbGFjZSIsImN1cnJlbnRQbGFjZXNDb3VudCIsInNpemUiLCJfcGVyc2lzdCIsIl9ub3RpZnlDaGFuZ2UiLCJyZW1vdmVQbGFjZSIsImRlbGV0ZSIsImhhc1BsYWNlIiwicGxhY2VzQXJyYXkiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwibWV0cmljcyIsInNhdmVkUGxhY2VzQ291bnQiLCJwbGFjZXNDb3VudCIsIm1ldHJpY3NDb3VudCIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJjb3VudCIsIndpbmRvdyIsImRpc3BhdGNoRXZlbnQiLCJnZXRTYXZlZFBsYWNlcyIsInNlYXJjaFdpdGhTdHJhdGVneSIsInNlYXJjaFRleHQiLCJsb2NhdGlvbiIsImNpdHlOYW1lIiwidXNlQWx0ZXJuYXRlU2VhcmNoIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVkiLCJFcnJvciIsImhlYWRlcnMiLCJ0eXBlTWF0Y2giLCJtYXRjaCIsInBsYWNlVHlwZSIsInF1ZXJ5IiwidHJ5U2VhcmNoIiwiZGF0YSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwidGV4dFF1ZXJ5IiwibG9jYXRpb25CaWFzIiwiY2lyY2xlIiwiY2VudGVyIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJyYWRpdXMiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwic2VhcmNoUGxhY2VCeVRleHQiLCJkZXN0aW5hdGlvbiIsInJlc3VsdCIsInRyYW5zZm9ybVBsYWNlUmVzcG9uc2UiLCJpc0FscmVhZHlTYXZlZCIsImxhbmd1YWdlQ29kZSIsInByaW1hcnlUeXBlIiwicGhvdG9zIiwicGhvdG8iLCJ3aWR0aFB4IiwiaGVpZ2h0UHgiLCJhdXRob3JBdHRyaWJ1dGlvbnMiLCJmb3JtYXR0ZWRBZGRyZXNzIiwicHJpbWFyeVR5cGVEaXNwbGF5TmFtZSIsInVuZGVmaW5lZCIsInNlYXJjaE11bHRpcGxlUGxhY2VzQnlUZXh0IiwibWF4UmVzdWx0cyIsInJlcXVlc3RCb2R5IiwibWF4UmVzdWx0Q291bnQiLCJlcnJvckRhdGEiLCJmZXRjaFBsYWNlcyIsInBsYWNlVHlwZXMiLCJmcm9tUHJlZmVyZW5jZXMiLCJmcm9tUGxhY2VUeXBlcyIsImluY2x1ZGVkVHlwZXMiLCJsb2NhdGlvblJlc3RyaWN0aW9uIiwic2VhcmNoUXVlcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n"));

/***/ }),

/***/ "./utils/session-manager.ts":
/*!**********************************!*\
  !*** ./utils/session-manager.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSessionValidity: function() { return /* binding */ checkSessionValidity; },\n/* harmony export */   checkSessionWithWarning: function() { return /* binding */ checkSessionWithWarning; },\n/* harmony export */   clearSession: function() { return /* binding */ clearSession; },\n/* harmony export */   getStoredMetricsWithSession: function() { return /* binding */ getStoredMetricsWithSession; },\n/* harmony export */   handleSessionExpiry: function() { return /* binding */ handleSessionExpiry; },\n/* harmony export */   initializeSession: function() { return /* binding */ initializeSession; },\n/* harmony export */   updateLastActive: function() { return /* binding */ updateLastActive; }\n/* harmony export */ });\nconst SESSION_CONFIG = {\n    INACTIVITY_TIMEOUT: 2 * 60 * 60 * 1000,\n    ABSOLUTE_TIMEOUT: 24 * 60 * 60 * 1000,\n    WARNING_BEFORE_TIMEOUT: 5 * 60 * 1000,\n    STORAGE_KEYS: {\n        SESSION: \"travel_session\",\n        METRICS: \"travel_interaction_metrics\"\n    }\n};\nfunction initializeSession() {\n    const now = Date.now();\n    const session = {\n        sessionId: generateSessionId(),\n        startTime: now,\n        lastActive: now,\n        expiresAt: now + SESSION_CONFIG.ABSOLUTE_TIMEOUT\n    };\n    localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n    return session;\n}\n// Add warning mechanism\nfunction checkSessionWithWarning() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return {\n        isValid: false,\n        shouldWarn: false\n    };\n    try {\n        const session = JSON.parse(sessionData);\n        const now = Date.now();\n        const timeUntilInactivity = session.lastActive + SESSION_CONFIG.INACTIVITY_TIMEOUT - now;\n        // Check if we should show warning\n        if (timeUntilInactivity > 0 && timeUntilInactivity <= SESSION_CONFIG.WARNING_BEFORE_TIMEOUT) {\n            return {\n                isValid: true,\n                shouldWarn: true\n            };\n        }\n        // Regular validity check\n        if (now >= session.expiresAt || now - session.lastActive >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            return {\n                isValid: false,\n                shouldWarn: false\n            };\n        }\n        return {\n            isValid: true,\n            shouldWarn: false\n        };\n    } catch (error) {\n        console.error(\"[SessionManager] Error checking session:\", error);\n        return {\n            isValid: false,\n            shouldWarn: false\n        };\n    }\n}\nfunction checkSessionValidity() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return false;\n    try {\n        const session = JSON.parse(sessionData);\n        const now = Date.now();\n        // Check absolute timeout\n        if (now >= session.expiresAt) {\n            clearSession();\n            return false;\n        }\n        // Check inactivity timeout\n        if (now - session.lastActive >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            clearSession();\n            return false;\n        }\n        // Update last active timestamp\n        session.lastActive = now;\n        localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n        return true;\n    } catch (error) {\n        console.error(\"[SessionManager] Error parsing session:\", error);\n        clearSession();\n        return false;\n    }\n}\n// ession expiry handler\nfunction handleSessionExpiry() {\n    var _window_getSavedPlaces, _window;\n    // Save current state if needed\n    const currentState = {\n        messages: ((_window_getSavedPlaces = (_window = window).getSavedPlaces) === null || _window_getSavedPlaces === void 0 ? void 0 : _window_getSavedPlaces.call(_window)) || [],\n        lastUrl: window.location.pathname\n    };\n    localStorage.setItem(\"expiredSessionState\", JSON.stringify(currentState));\n    // Clear session\n    clearSession();\n    // Redirect to landing page with return path\n    window.location.href = \"/?return=\".concat(encodeURIComponent(currentState.lastUrl));\n}\nfunction clearSession() {\n    localStorage.removeItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    localStorage.removeItem(SESSION_CONFIG.STORAGE_KEYS.METRICS);\n}\nfunction updateLastActive() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return;\n    try {\n        const session = JSON.parse(sessionData);\n        session.lastActive = Date.now();\n        localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n    } catch (error) {\n        console.error(\"[SessionManager] Error updating last active:\", error);\n    }\n}\nfunction generateSessionId() {\n    return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n}\n// Hook this into metrics management\nfunction getStoredMetricsWithSession() {\n    if (!checkSessionValidity()) {\n        clearSession();\n        return null;\n    }\n    const metricsData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.METRICS);\n    if (!metricsData) return null;\n    try {\n        return JSON.parse(metricsData);\n    } catch (error) {\n        console.error(\"[SessionManager] Error parsing metrics:\", error);\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/session-manager.ts\n"));

/***/ })

});