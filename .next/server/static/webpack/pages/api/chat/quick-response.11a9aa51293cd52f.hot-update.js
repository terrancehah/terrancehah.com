"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat/quick-response",{

/***/ "(middleware)/./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: () => (/* binding */ fetchPlaces),\n/* harmony export */   filterUniquePlaces: () => (/* binding */ filterUniquePlaces),\n/* harmony export */   formatPrimaryType: () => (/* binding */ formatPrimaryType),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getPlaceTypesFromPreferences: () => (/* binding */ getPlaceTypesFromPreferences),\n/* harmony export */   preferenceToPlaceTypes: () => (/* binding */ preferenceToPlaceTypes),\n/* harmony export */   savedPlacesManager: () => (/* binding */ savedPlacesManager),\n/* harmony export */   searchMultiplePlacesByText: () => (/* binding */ searchMultiplePlacesByText),\n/* harmony export */   searchPlaceByText: () => (/* binding */ searchPlaceByText)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"(middleware)/./managers/types.ts\");\n/* harmony import */ var _local_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-metrics */ \"(middleware)/./utils/local-metrics.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            const availableTypes = preferenceToPlaceTypes[pref]?.filter((type)=>!usedTypes.has(type)) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return place.displayName?.text || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// Initialize from localStorage if available\nfunction initializePlaces() {\n    if (true) {\n        console.log(\"[SavedPlacesManager] Server-side, returning empty map\");\n        return new Map();\n    }\n    try {\n        const savedPlaces = localStorage.getItem(STORAGE_KEY);\n        console.log(\"[SavedPlacesManager] Loading from storage:\", savedPlaces);\n        if (savedPlaces) {\n            const parsedPlaces = JSON.parse(savedPlaces);\n            console.log(\"[SavedPlacesManager] Parsed places:\", parsedPlaces);\n            // Handle array format\n            const places = new Map();\n            if (Array.isArray(parsedPlaces)) {\n                parsedPlaces.forEach((place)=>{\n                    if (place?.id) {\n                        places.set(place.id, place);\n                    }\n                });\n            }\n            console.log(\"[SavedPlacesManager] Initialized with places:\", Array.from(places.values()));\n            return places;\n        }\n    } catch (error) {\n        console.error(\"[SavedPlacesManager] Error loading from storage:\", error);\n    }\n    console.log(\"[SavedPlacesManager] No saved places found, returning empty map\");\n    return new Map();\n}\n// Create the singleton manager\nconst savedPlacesManager = {\n    places: initializePlaces(),\n    addPlace (place) {\n        console.log(\"[savedPlacesManager] Adding place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            currentPlacesCount: this.places.size\n        });\n        this.places.set(place.id, place);\n        this._persist();\n        this._notifyChange();\n        // Update metrics using the utility function\n        try {\n            if (false) {}\n        } catch (error) {\n            console.error(\"[savedPlacesManager] Error updating metrics:\", error);\n        }\n        console.log(\"[savedPlacesManager] Place added, new count:\", this.places.size);\n    },\n    removePlace (id) {\n        console.log(\"[savedPlacesManager] Removing place:\", {\n            id,\n            currentPlacesCount: this.places.size\n        });\n        this.places.delete(id);\n        this._persist();\n        this._notifyChange();\n        console.log(\"[savedPlacesManager] Place removed, new count:\", this.places.size);\n    },\n    getPlaces () {\n        console.log(\"[savedPlacesManager] Getting places, count:\", this.places.size);\n        return Array.from(this.places.values());\n    },\n    hasPlace (id) {\n        // Print full state for debugging\n        console.log(\"[savedPlacesManager] Checking place:\", {\n            id,\n            has: this.places.has(id),\n            isServerSide: \"undefined\" === \"undefined\",\n            currentPlaces: Array.from(this.places.entries()).map(([id, place])=>({\n                    id,\n                    name: getDisplayName(place)\n                }))\n        });\n        return this.places.has(id);\n    },\n    _persist () {\n        if (true) return;\n        try {\n            const placesArray = Array.from(this.places.values());\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(placesArray));\n            console.log(\"[savedPlacesManager] Persisted places to localStorage, count:\", placesArray.length);\n        } catch (error) {\n            console.error(\"[savedPlacesManager] Error persisting places:\", error);\n        }\n    },\n    _notifyChange () {\n        if (true) return;\n        try {\n            const event = new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(this.places.values())\n                }\n            });\n            window.dispatchEvent(event);\n            console.log(\"[savedPlacesManager] Notified change, current count:\", this.places.size);\n        } catch (error) {\n            console.error(\"[savedPlacesManager] Error notifying change:\", error);\n        }\n    }\n};\n// Initialize window interface for backward compatibility\nif (false) {}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n    };\n    // Extract type from search text for alternate searches\n    const typeMatch = searchText.match(/(?:show me |find |get )(?:a |an |some )?(\\w+)/i);\n    const placeType = typeMatch ? typeMatch[1] : searchText;\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? `different ${placeType} in ${cityName}` : `${searchText} ${cityName}`;\n    console.log(`[searchWithStrategy] Using ${useAlternateSearch ? \"alternate\" : \"original\"} search:`, query);\n    const place = await trySearch(query, headers, location);\n    if (!place) {\n        console.log(\"[searchWithStrategy] No place found\");\n        return null;\n    }\n    // If this place is already saved and we haven't tried alternate search yet\n    if (savedPlacesManager.hasPlace(place.id)) {\n        if (!useAlternateSearch) {\n            console.log(\"[searchWithStrategy] Place already saved, will try alternate search\");\n            return null;\n        } else {\n            console.log(\"[searchWithStrategy] Place already saved in alternate search\");\n            return null;\n        }\n    }\n    return place;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                }\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.places?.length) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        // Try each place until we find one that isn't saved\n        for (const place of data.places){\n            if (!savedPlacesManager.hasPlace(place.id)) {\n                console.log(\"[trySearch] Found new place:\", {\n                    id: place.id,\n                    name: place.displayName?.text || place.name\n                });\n                return place;\n            }\n            console.log(\"[trySearch] Place already saved, trying next result:\", place.displayName?.text || place.name);\n        }\n        return null;\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination,\n        currentSavedPlaces: Array.from(savedPlacesManager.places.entries()).map(([id, place])=>({\n                id,\n                name: getDisplayName(place)\n            }))\n    });\n    try {\n        // First try with original search\n        let place = await searchWithStrategy(searchText, location, destination, false);\n        // If we got a place that's already saved, try alternate search\n        if (place?.places?.[0] && savedPlacesManager.hasPlace(place.places[0].id)) {\n            console.log(\"[searchPlaceByText] Got already saved place, trying alternate search\");\n            place = await searchWithStrategy(searchText, location, destination, true);\n        }\n        if (!place?.places?.[0]) {\n            console.log(\"[searchPlaceByText] No place found\");\n            return null;\n        }\n        // Transform the response\n        const transformedPlace = transformPlaceResponse(place.places[0]);\n        if (!transformedPlace) {\n            console.log(\"[searchPlaceByText] Failed to transform place\");\n            return null;\n        }\n        // Add the place to savedPlacesManager if it's not already saved\n        if (!savedPlacesManager.hasPlace(transformedPlace.id)) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: transformedPlace.id,\n                name: getDisplayName(transformedPlace)\n            });\n            savedPlacesManager.addPlace(transformedPlace);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: transformedPlace.id,\n            name: getDisplayName(transformedPlace),\n            isAlreadySaved: savedPlacesManager.hasPlace(transformedPlace.id)\n        });\n        return transformedPlace;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error:\", error);\n        return null;\n    }\n}\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    if (!place) return null;\n    const displayName = place.displayName?.text ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    return {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos: place.photos?.map((photo)=>({\n                name: photo.name,\n                widthPx: photo.widthPx,\n                heightPx: photo.heightPx,\n                authorAttributions: photo.authorAttributions\n            })) || [],\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n}\nconst searchMultiplePlacesByText = async (searchText, location, maxResults = 5)=>{\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>({\n                id: place.id,\n                displayName: place.displayName?.text ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: place.photos?.map((photo)=>({\n                        name: photo.name\n                    })) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            }));\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async (latitude, longitude, preferences, maxResults = 5, placeTypes)=>{\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!preferences?.length,\n            fromPlaceTypes: !!placeTypes?.length\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>({\n                            id: place.id,\n                            displayName: place.displayName?.text ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: place.photos?.map((photo)=>({\n                                    name: photo.name\n                                })) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        }));\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./utils/places-utils.ts\n");

/***/ })

});