"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat/quick-response",{

/***/ "(middleware)/./managers/stage-manager.ts":
/*!***********************************!*\
  !*** ./managers/stage-manager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STAGE_LIMITS: () => (/* binding */ STAGE_LIMITS),\n/* harmony export */   validateStageProgression: () => (/* binding */ validateStageProgression)\n/* harmony export */ });\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/session-manager */ \"(middleware)/./utils/session-manager.ts\");\n\n// Validation functions for each stage\nconst STAGE_LIMITS = {\n    3: {\n        maxPrompts: 5,\n        upgradeMessage: `I'm sorry to tell you that you have reached the prompts limit in the free version. \n    Would you like to upgrade to unlock unlimited places browsing and premium features? \n    This will give you access to personalized recommendations, detailed scheduling, and local insights.`\n    }\n};\nconst STAGE_VALIDATORS = {\n    // Stage 1: Initial Parameter Check\n    1: {\n        validate: (details)=>{\n            const missingRequirements = [];\n            if (!details.destination) missingRequirements.push(\"destination\");\n            if (!details.startDate) missingRequirements.push(\"start date\");\n            if (!details.endDate) missingRequirements.push(\"end date\");\n            if (!details.preferences?.length) missingRequirements.push(\"preferences\");\n            if (!details.language) missingRequirements.push(\"language\");\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 2: City Introduction\n    2: {\n        validate: (details, session)=>{\n            return {\n                isValid: true,\n                missingRequirements: []\n            };\n        }\n    },\n    // Stage 3: Places Introduction\n    3: {\n        validate: (details, session)=>{\n            const { totalPrompts, stagePrompts, savedPlaces } = session;\n            const stagePromptCount = stagePrompts?.[3] || 0;\n            const upgradeRequired = !session.isPaid && stagePromptCount >= STAGE_LIMITS[3].maxPrompts;\n            // Check if we have enough places saved\n            const minPlacesRequired = 3;\n            const hasEnoughPlaces = savedPlaces.length >= minPlacesRequired;\n            // Check if we have diverse place types based on preferences\n            const placeTypes = new Set(savedPlaces.map((p)=>p.primaryType));\n            const hasGoodCoverage = placeTypes.size >= Math.min(2, details.preferences.length);\n            const missingRequirements = [];\n            if (!hasEnoughPlaces) {\n                missingRequirements.push(`at least ${minPlacesRequired} places`);\n            }\n            if (!hasGoodCoverage) {\n                missingRequirements.push(\"more diverse place types\");\n            }\n            return {\n                isValid: !upgradeRequired && hasEnoughPlaces && hasGoodCoverage,\n                missingRequirements,\n                upgradeRequired\n            };\n        }\n    },\n    // Stage 4: Itinerary Review (with payment check)\n    4: {\n        validate: (details, session)=>{\n            const { isPaid, savedPlaces } = session;\n            const missingRequirements = [];\n            // Check payment status\n            if (!isPaid) {\n                missingRequirements.push(\"premium subscription\");\n            }\n            // Check minimum places for a good itinerary\n            const minPlacesForItinerary = 5;\n            if (savedPlaces.length < minPlacesForItinerary) {\n                missingRequirements.push(`at least ${minPlacesForItinerary} places`);\n            }\n            // Check place type distribution\n            const placeTypes = new Set(savedPlaces.map((p)=>p.primaryType));\n            const minPlaceTypes = Math.min(3, details.preferences.length);\n            if (placeTypes.size < minPlaceTypes) {\n                missingRequirements.push(\"more diverse place types\");\n            }\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements,\n                upgradeRequired: !isPaid\n            };\n        }\n    },\n    // Stage 5: Final Confirmation (keeping it open as requested)\n    5: {\n        validate: (_, session)=>{\n            const isPaid = session.isPaid;\n            return {\n                isValid: isPaid,\n                missingRequirements: isPaid ? [] : [\n                    \"premium subscription\"\n                ],\n                upgradeRequired: !isPaid\n            };\n        }\n    }\n};\n// Main validation function to be used in the chat component\nfunction validateStageProgression(currentStage, nextStage, travelDetails) {\n    let session = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_0__.getStoredSession)();\n    // If no session exists but we have travel details, initialize one\n    if (!session && travelDetails.destination) {\n        session = (0,_utils_session_manager__WEBPACK_IMPORTED_MODULE_0__.initializeSession)();\n        session.destination = travelDetails.destination;\n        session.startDate = travelDetails.startDate || \"\";\n        session.endDate = travelDetails.endDate || \"\";\n        session.preferences = travelDetails.preferences || [];\n        session.budget = travelDetails.budget || \"\";\n        session.language = travelDetails.language || \"\";\n        session.transport = travelDetails.transport || [];\n        session.currentStage = currentStage;\n    }\n    if (!session) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"valid session\"\n            ]\n        };\n    }\n    // Ensure stage progression is sequential\n    if (nextStage !== currentStage + 1) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage progression\"\n            ]\n        };\n    }\n    // Get validator for next stage\n    const validator = STAGE_VALIDATORS[nextStage];\n    if (!validator) {\n        return {\n            canProgress: true,\n            missingRequirements: []\n        };\n    }\n    // Check if we can move to next stage\n    const { isValid, missingRequirements, upgradeRequired } = validator.validate(travelDetails, session);\n    return {\n        canProgress: isValid,\n        missingRequirements,\n        upgradeRequired\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./managers/stage-manager.ts\n");

/***/ })

});