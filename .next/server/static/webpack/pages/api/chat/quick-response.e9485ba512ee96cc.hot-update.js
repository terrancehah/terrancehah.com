"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat/quick-response",{

/***/ "(middleware)/./pages/api/chat/quick-response.ts":
/*!******************************************!*\
  !*** ./pages/api/chat/quick-response.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/openai */ \"(middleware)/./node_modules/@ai-sdk/openai/dist/index.mjs\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ai */ \"(middleware)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var _ai_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../ai/tools */ \"(middleware)/./ai/tools.ts\");\n\n\n\nconst config = {\n    runtime: \"edge\"\n};\nasync function handler(req) {\n    if (req.method !== \"POST\") {\n        return new Response(\"Method not allowed\", {\n            status: 405\n        });\n    }\n    try {\n        const { messages, currentDetails, savedPlaces, currentStage, metrics } = await req.json();\n        console.log(\"[quick-response] API received:\", {\n            messageCount: messages?.length,\n            lastMessage: {\n                id: messages?.[messages.length - 1]?.id,\n                role: messages?.[messages.length - 1]?.role,\n                content: messages?.[messages.length - 1]?.content?.substring(0, 100) + \"...\"\n            },\n            currentStage,\n            destination: currentDetails?.destination,\n            hasMetrics: !!metrics\n        });\n        // // Add artificial delay for loading state to create a sense of AI generated responses\n        // await new Promise(resolve => setTimeout(resolve, 2000));\n        if (!messages || !Array.isArray(messages) || messages.length === 0) {\n            console.log(\"[quick-response] No messages received\");\n            return new Response(JSON.stringify({\n                error: \"No messages provided\"\n            }), {\n                status: 400\n            });\n        }\n        // Only process complete messages (not streaming)\n        const lastMessage = messages[messages.length - 1];\n        if (!lastMessage?.content?.trim()) {\n            console.log(\"[quick-response] Skipping incomplete message\");\n            return new Response(JSON.stringify({\n                error: \"Message not complete\"\n            }), {\n                status: 400\n            });\n        }\n        // Add artificial delay for loading state to create a sense of AI generated responses\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Validate request\n        // console.log('[quick-response] Processing message:', {\n        //   content: lastMessage.content,\n        //   role: lastMessage.role,\n        //   hasToolInvocations: !!lastMessage.toolInvocations,\n        //   toolInvocations: lastMessage.toolInvocations?.map(t => ({\n        //     name: t.toolName,\n        //     state: t.state,\n        //     hasResult: !!t.result\n        //   }))\n        // });\n        // console.log('[quick-response] Processing message with context:', {\n        //   destination: currentDetails?.destination,\n        //   stage: currentStage,\n        //   messageContent: lastMessage.content\n        // });\n        // Specialized system prompt focused on quick response generation\n        const systemPrompt = `You are Quick-Rizz, a specialized quick response generator that works alongside Travel-Rizz.\n    Your role is to assist Travel-Rizz by providing contextually relevant quick response options to users.\n\n    CRITICAL INSTRUCTIONS:\n    1. You are a SECONDARY AI that supports Travel-Rizz (the main AI). \n    Your job is to study the messages from Travel-Rizz and provide quick response options that help users interact with Travel-Rizz more effectively.\n\n    2. There are 5 stages in the conversation:\n      - INITIAL PARAMETER CHECK (Stage 1)\n      - CITY INTRODUCTION (Stage 2)\n      - PLACES BROWSING AND INTRODUCTION (Stage 3)\n      - ITINERARY REVIEW (Stage 4)\n      - FINAL CONFIRMATION (Stage 5)\n    You MUST ALWAYS trigger the quickResponse tool to generate quick response options, no exceptions.\n\n    3. ALWAYS provide exactly 3 contextually relevant options that:\n      - Help users respond to Travel-Rizz's questions\n      - Provide natural follow-up actions to Travel-Rizz's responses\n      - Keep the conversation flowing towards the next stage when appropriate\n\n    4. STAGE ADVANCEMENT DETECTION:\n      Provide stage advancement options when Travel-Rizz:\n      - Explicitly suggests moving to the next stage\n      - Lists current parameters and asks if user wants to proceed\n      - Asks if user wants to update anything or continue\n      - Shows a summary and waits for confirmation\n      - Uses phrases like:\n        - \"Let me know if you want to proceed\"\n        - \"Let me know if these need to be updated\"\n        - \"Would you like to continue\"\n        - \"Shall we move on\"\n        - \"Are you ready to\"\n\n    5. If Travel-Rizz asks an open-ended question, provide options that represent common or helpful responses.\n\n    EXAMPLES:\n    Example 1:\n    User: \"I need to adjust my travel dates\"\n    Assistant: Sure what do you need to adjust?\n    You: quickResponse({ responses: [\"Update my travel dates\", \"Modify my budget\", \"Change my preferences\"] })\n\n    Example 2:\n    User: \"I want to see more places\"\n    Assistant: Sure, what kind of places do you want to see?\n    You: quickResponse({ responses: [\"Show me some museums\", \"Find me local restaurants\", \"Continue to itinerary review\"] })\n    \n    STAGE-SPECIFIC GUIDELINES:\n\n    You have to check which stage the conversation is in and provide quick response options that are relevant to that stage.\n\n    Stage 1 (Initial Parameters Check):\n      - Only if Travel-Rizz suggesting stage advancement: Use suitable stage transition options\n      - Otherwise: Focus on parameter update options\n      - When Travel-Rizz asks which parameters to update or modify, provide options related to updating parameter\n      - Only provide options related to yes, no, and parameter updates\n      - Available options are like \"Update my travel dates\", \"Modify my budget\", \"Change my preferences\", \"Update my language\", \n      \"No, I need to modify something\", \"Let me review the details\", \"Yes, let's proceed\", \"Yes, let's move on\"\n\n    Stage 2 (City Introduction):\n      - Only if Travel-Rizz suggesting stage advancement: Use suitable stage transition options\n      - Otherwise: Focus on city information options \n      - Only provide options related to yes, no, currency, local customs, weather, culture and local tips\n      - Never provide options related to introducing or finding places\n      - Available options are like \"Tell me about the weather\", \"What's the currency conversion rate?\", \"Local customs and tips\", \"Tell me about the culture\", \n      \"No, I want to know more about the city\", \"Tell me more about the destination\", \"Yes, let's proceed to places introduction\", \"Yes, let's move on\"\n\n    Stage 3 (Places Browsing and Introduction):\n      - Only if Travel-Rizz suggesting stage advancement: Use suitable stage transition options\n      - Otherwise: Focus on place discovery options\n      - Only provide options related to yes, no, and place discovery\n      - Provide options that prompts AI to introduce places related to preferences\n      - Never provide options related to saving or adding places (e.g., \"Save Louvre Museum\", \"Add Changi Airport\")\n      - Never provide options related to wanting to know more of a single specific place\n      - Available options are like \"Show me museums\", \"Find me some restaurants\", \"Popular landmarks\", \"Add some cafes\", \"Explore some famous attractions\",\n      \"No, I want to see more places\", \"Show me national parks\", \"Find me some theaters\", \"Popular eateries\", \"Explore some famous tourist spots\",\n      \"No, I want to add more places\", \"Continue to itinerary review\", \"Yes, let's proceed\", \"Yes, let's move on\", \"View pricing\"\n\n    Stage 4 (Itinerary Review):\n      - Only if Travel-Rizz suggesting stage advancement: Use suitable stage transition options\n      - Otherwise: Focus on itinerary refinement options \n      - Available options are like \"Add more activities\", \"Adjust the schedule\", \"Review the plan\", \"No, I want to review the plan\", \"No, I want to change my itinerary\", \"Yes, let's proceed\", \"Yes, let's move on\"\n\n    Stage 5 (Final Confirmation):\n      - Focus on final preparations options (\"Download itinerary\", \"Share with friends\", \"Make a copy\")\n      \n    IMPORTANT: Carefully analyze Travel-Rizz's last message. \n    You should also study the conversation history to avoid repeating the same options.\n    `;\n        const dynamicContext = `Current Context for Quick Response Generation:\n    - Destination: ${currentDetails?.destination || \"Not set\"}\n    - Current Stage: ${currentStage || 1}\n    - Dates: ${currentDetails?.startDate || \"Not set\"} to ${currentDetails?.endDate || \"Not set\"}\n    - Budget: ${currentDetails?.budget || \"Not set\"}\n    - Preferences: ${currentDetails?.preferences?.join(\", \") || \"Not set\"}\n    - Saved Places Count: ${savedPlaces?.length || 0}\n    - Payment Status: ${metrics?.isPaid ? \"Paid\" : \"Not Paid\"}\n\n    STRICT STAGE ENFORCEMENT:\n    Current Stage: ${currentStage || 1}\n    Stage Rules:\n    ${currentStage === 1 ? \"- ONLY provide parameter update and stage advancement options\" : currentStage === 2 ? \"- ONLY provide city information and stage advancement options. NO place exploration options allowed.\" : currentStage === 3 ? \"- ONLY provide place discovery and stage advancement options\" : currentStage === 4 ? \"- ONLY provide itinerary refinement and stage advancement options\" : \"- ONLY provide final preparation options\"}\n\n    Last Travel-Rizz Message Analysis:\n    ${messages[messages.length - 1]?.content || \"\"}\n    \n    Key Indicators to Check:\n    1. Does it ask about proceeding? ${messages[messages.length - 1]?.content?.toLowerCase().includes(\"proceed\") ? \"YES\" : \"NO\"}\n    2. Does it suggest moving to the next stage? ${messages[messages.length - 1]?.content?.toLowerCase().includes(\"move on\") ? \"YES\" : \"NO\"}\n    3. Is message about place exploration? ${messages[messages.length - 1]?.content?.toLowerCase().includes(\"place\") || messages[messages.length - 1]?.content?.toLowerCase().includes(\"attraction\") ? \"YES\" : \"NO\"}\n\n    IMPORTANT: Due to current stage (${currentStage || 1}), ${currentStage === 1 ? \"only parameter updates and stage advancement are allowed\" : currentStage === 2 ? \"place exploration options are NOT allowed\" : currentStage === 3 ? \"only place discovery and stage advancement are allowed\" : currentStage === 4 ? \"only itinerary refinement and stage advancement are allowed\" : \"only final preparation options are allowed\"}\n\n    If ANY of these indicators are YES, consider providing stage advancement options.`;\n        const result = await (0,ai__WEBPACK_IMPORTED_MODULE_1__.streamText)({\n            // model: openai('gpt-4o'),\n            model: (0,_ai_sdk_openai__WEBPACK_IMPORTED_MODULE_2__.openai)(\"gpt-4o-mini\"),\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"system\",\n                    content: dynamicContext\n                },\n                ...messages.map((m)=>({\n                        ...m,\n                        role: m.role === \"user\" ? \"user\" : \"assistant\"\n                    }))\n            ],\n            temperature: 0.3,\n            maxTokens: 200,\n            tools: {\n                quickResponse: _ai_tools__WEBPACK_IMPORTED_MODULE_0__.tools.quickResponse\n            },\n            toolChoice: {\n                type: \"tool\",\n                toolName: \"quickResponse\"\n            },\n            maxSteps: 1 // Ensure quick response is generated immediately\n        });\n        // console.log('[quick-response] Stream created, sending response');\n        return result.toDataStreamResponse();\n    } catch (error) {\n        console.error(\"[quick-response] Error:\", error);\n        return new Response(JSON.stringify({\n            error: \"Internal server error\",\n            details: error.message\n        }), {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./pages/api/chat/quick-response.ts\n");

/***/ })

});