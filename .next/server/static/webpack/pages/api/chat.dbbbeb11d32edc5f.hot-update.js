"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat",{

/***/ "(middleware)/./utils/session-manager.ts":
/*!**********************************!*\
  !*** ./utils/session-manager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SESSION_CONFIG: () => (/* binding */ SESSION_CONFIG),\n/* harmony export */   checkInputLimits: () => (/* binding */ checkInputLimits),\n/* harmony export */   checkSession: () => (/* binding */ checkSession),\n/* harmony export */   checkSessionValidity: () => (/* binding */ checkSessionValidity),\n/* harmony export */   checkSessionWithWarning: () => (/* binding */ checkSessionWithWarning),\n/* harmony export */   clearPaymentReference: () => (/* binding */ clearPaymentReference),\n/* harmony export */   clearSession: () => (/* binding */ clearSession),\n/* harmony export */   generateSessionId: () => (/* binding */ generateSessionId),\n/* harmony export */   getPaymentReference: () => (/* binding */ getPaymentReference),\n/* harmony export */   getPaymentReferenceId: () => (/* binding */ getPaymentReferenceId),\n/* harmony export */   getPaymentStatus: () => (/* binding */ getPaymentStatus),\n/* harmony export */   getStorage: () => (/* binding */ getStorage),\n/* harmony export */   getStoredMetrics: () => (/* binding */ getStoredMetrics),\n/* harmony export */   getStoredSession: () => (/* binding */ getStoredSession),\n/* harmony export */   handleSessionExpiry: () => (/* binding */ handleSessionExpiry),\n/* harmony export */   initializeSession: () => (/* binding */ initializeSession),\n/* harmony export */   safeStorageOp: () => (/* binding */ safeStorageOp),\n/* harmony export */   setPaymentReference: () => (/* binding */ setPaymentReference),\n/* harmony export */   setPaymentReferenceId: () => (/* binding */ setPaymentReferenceId),\n/* harmony export */   setPaymentStatus: () => (/* binding */ setPaymentStatus),\n/* harmony export */   storage: () => (/* binding */ storage),\n/* harmony export */   updateLastActive: () => (/* binding */ updateLastActive),\n/* harmony export */   updateStoredMetrics: () => (/* binding */ updateStoredMetrics)\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"(middleware)/./managers/stage-manager.ts\");\n\nconst SESSION_CONFIG = {\n    STORAGE_KEY: \"travel_rizz_session\",\n    ABSOLUTE_TIMEOUT: 24 * 60 * 60 * 1000,\n    INACTIVITY_TIMEOUT: 2 * 60 * 60 * 1000,\n    WARNING_BEFORE_TIMEOUT: 5 * 60 * 1000,\n    MAX_TOTAL_INPUTS: 15,\n    PAYMENT_REF_KEY: \"payment_reference_id\"\n};\n// Safe storage access\nconst getStorage = ()=>{\n    if (false) {}\n    return null;\n};\nconst storage = getStorage();\n// Add atomic operation lock\nlet isSessionLocked = false;\nconst sessionLockTimeout = 1000; // 1 second timeout\nfunction acquireSessionLock() {\n    if (isSessionLocked) return false;\n    isSessionLocked = true;\n    return true;\n}\nfunction releaseSessionLock() {\n    isSessionLocked = false;\n}\n// Helper function to safely access storage with atomic guarantees\nconst safeStorageOp = async (operation, defaultValue)=>{\n    try {\n        if (!storage) return defaultValue;\n        // Try to acquire lock\n        let lockAcquired = false;\n        let attempts = 0;\n        while(!lockAcquired && attempts < 5){\n            lockAcquired = acquireSessionLock();\n            if (!lockAcquired) {\n                attempts++;\n                // Wait a bit before trying again\n                await new Promise((resolve)=>setTimeout(resolve, 200));\n            }\n        }\n        if (!lockAcquired) {\n            console.error(\"[Session] Failed to acquire lock after 5 attempts\");\n            return defaultValue;\n        }\n        try {\n            return operation();\n        } finally{\n            releaseSessionLock();\n        }\n    } catch (error) {\n        console.error(\"[Session] Storage operation failed:\", error);\n        releaseSessionLock();\n        return defaultValue;\n    }\n};\n// Helper function to safely access storage\n// export const safeStorageOp = <T>(operation: () => T, defaultValue: T): T => {\n//   try {\n//     if (!storage) return defaultValue;\n//     return operation();\n//   } catch (error) {\n//     console.error('[Session] Storage operation failed:', error);\n//     return defaultValue;\n//   }\n// };\nasync function initializeSession() {\n    const now = Date.now();\n    // Try to get existing session first\n    const existingSession = await safeStorageOp(()=>{\n        const stored = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        return stored ? JSON.parse(stored) : null;\n    }, null);\n    if (existingSession) {\n        // Update both lastActive and expiresAt\n        existingSession.lastActive = now;\n        existingSession.expiresAt = now + SESSION_CONFIG.ABSOLUTE_TIMEOUT;\n        // Ensure all stages are initialized\n        existingSession.stagePrompts = existingSession.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0\n        };\n        await safeStorageOp(()=>{\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(existingSession));\n        }, undefined);\n        return existingSession;\n    }\n    // Create new session if none exists\n    const sessionId = generateSessionId();\n    const session = {\n        // Session info\n        sessionId,\n        startTime: now,\n        lastActive: now,\n        expiresAt: now + SESSION_CONFIG.ABSOLUTE_TIMEOUT,\n        // Travel details\n        destination: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        preferences: [],\n        budget: \"\",\n        language: \"\",\n        transport: [],\n        // Places\n        savedPlaces: [],\n        currentStage: 1,\n        // Metrics\n        totalPrompts: 0,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0\n        },\n        savedPlacesCount: 0,\n        // Payment\n        isPaid: false,\n        paymentReference: `session_${sessionId}`\n    };\n    await safeStorageOp(()=>{\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n    return session;\n}\nasync function getStoredSession() {\n    return await safeStorageOp(()=>{\n        console.log(\"[Session] Attempting to get stored session\");\n        const storedData = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No stored session data found\");\n            return null;\n        }\n        try {\n            const session = JSON.parse(storedData);\n            console.log(\"[Session] Successfully parsed session:\", {\n                sessionId: session.sessionId,\n                destination: session.destination,\n                startTime: new Date(session.startTime).toISOString(),\n                lastActive: new Date(session.lastActive).toISOString(),\n                expiresAt: new Date(session.expiresAt).toISOString()\n            });\n            return session;\n        } catch (error) {\n            console.error(\"[Session] Failed to parse session data:\", error);\n            return null;\n        }\n    }, null);\n}\nfunction getStoredMetrics() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        if (!session) return null;\n        return {\n            interaction: {\n                totalPrompts: session.totalPrompts,\n                stagePrompts: session.stagePrompts,\n                lastActive: session.lastActive\n            },\n            places: {\n                savedCount: session.savedPlacesCount\n            },\n            payment: {\n                status: session.isPaid,\n                reference: session.paymentReference,\n                timestamp: session.paymentTimestamp\n            },\n            parameters: {\n                destination: session.destination,\n                dates: {\n                    start: session.startDate,\n                    end: session.endDate\n                },\n                preferences: session.preferences,\n                budget: session.budget,\n                language: session.language,\n                transport: session.transport\n            }\n        };\n    }, null);\n}\nfunction updateStoredMetrics(currentStage, incrementPrompt = false, incrementSavedPlaces = false) {\n    return safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        if (incrementPrompt) {\n            const { withinStageLimit } = checkInputLimits(currentStage);\n            if (withinStageLimit) {\n                // Initialize stagePrompts with all stages if it doesn't exist\n                if (!session.stagePrompts) {\n                    session.stagePrompts = {\n                        1: 0,\n                        2: 0,\n                        3: 0,\n                        4: 0,\n                        5: 0\n                    };\n                }\n                // Ensure all stages exist\n                for(let stage = 1; stage <= 5; stage++){\n                    if (typeof session.stagePrompts[stage] !== \"number\") {\n                        session.stagePrompts[stage] = 0;\n                    }\n                }\n                session.totalPrompts = (session.totalPrompts || 0) + 1;\n                session.stagePrompts[currentStage] = (session.stagePrompts[currentStage] || 0) + 1;\n            }\n        }\n        if (incrementSavedPlaces) {\n            session.savedPlacesCount = (session.savedPlacesCount || 0) + 1;\n        }\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n        return session;\n    }, null) || initializeSession();\n}\nfunction checkInputLimits(currentStage) {\n    return safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        const stagePrompts = session.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        const totalPrompts = session.totalPrompts || 0;\n        return {\n            withinStageLimit: currentStage === 3 ? (stagePrompts[currentStage] || 0) < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n            withinTotalLimit: currentStage === 3 ? totalPrompts < SESSION_CONFIG.MAX_TOTAL_INPUTS : true,\n            stageInputCount: stagePrompts[currentStage] || 0,\n            totalInputCount: totalPrompts\n        };\n    }, {\n        withinStageLimit: true,\n        withinTotalLimit: true,\n        stageInputCount: 0,\n        totalInputCount: 0\n    });\n}\n// Payment related functions\nfunction setPaymentStatus(isPaid) {\n    safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.isPaid = isPaid;\n        session.paymentTimestamp = isPaid ? Date.now() : undefined;\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nfunction getPaymentStatus() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        return session?.isPaid || false;\n    }, false);\n}\nfunction setPaymentReference(reference) {\n    safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.paymentReference = reference;\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nfunction getPaymentReference() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        return session?.paymentReference;\n    }, undefined);\n}\nfunction clearPaymentReference() {\n    safeStorageOp(()=>{\n        const session = getStoredSession() || initializeSession();\n        session.paymentReference = \"\";\n        storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n    }, undefined);\n}\nfunction getPaymentReferenceId() {\n    return safeStorageOp(()=>{\n        const stored = storage?.getItem(SESSION_CONFIG.PAYMENT_REF_KEY);\n        return stored || null;\n    }, null);\n}\nfunction setPaymentReferenceId(referenceId) {\n    safeStorageOp(()=>{\n        storage?.setItem(SESSION_CONFIG.PAYMENT_REF_KEY, referenceId);\n        console.log(\"[Session] Stored payment reference ID:\", referenceId);\n    }, undefined);\n}\nfunction checkSession() {\n    return safeStorageOp(()=>{\n        const currentSession = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!currentSession) {\n            const newSession = Date.now().toString();\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, newSession);\n            return false;\n        }\n        return true;\n    }, false);\n}\n// Add warning mechanism\nfunction checkSessionWithWarning() {\n    return safeStorageOp(()=>{\n        const session = getStoredSession();\n        if (!session) {\n            return {\n                isValid: false,\n                shouldWarn: false\n            };\n        }\n        const now = Date.now();\n        const timeLeft = session.expiresAt - now;\n        const shouldWarn = timeLeft <= SESSION_CONFIG.WARNING_BEFORE_TIMEOUT;\n        const isValid = timeLeft > 0;\n        return {\n            isValid,\n            shouldWarn\n        };\n    }, {\n        isValid: false,\n        shouldWarn: false\n    });\n}\nfunction checkSessionValidity() {\n    return safeStorageOp(()=>{\n        console.log(\"[Session] Checking session validity\");\n        const storedData = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No session found during validity check\");\n            return false;\n        }\n        let session;\n        try {\n            session = JSON.parse(storedData);\n            console.log(\"[Session] Parsed session for validity check:\", {\n                sessionId: session.sessionId,\n                destination: session.destination,\n                startTime: new Date(session.startTime).toISOString(),\n                lastActive: new Date(session.lastActive).toISOString(),\n                expiresAt: new Date(session.expiresAt).toISOString()\n            });\n        } catch (error) {\n            console.error(\"[Session] Failed to parse session during validity check:\", error);\n            return false;\n        }\n        const now = Date.now();\n        console.log(\"[Session] Validity check times:\", {\n            now: new Date(now).toISOString(),\n            expiresAt: new Date(session.expiresAt).toISOString(),\n            lastActive: new Date(session.lastActive).toISOString(),\n            timeTillExpiry: session.expiresAt - now,\n            inactiveTime: now - session.lastActive,\n            absoluteTimeout: SESSION_CONFIG.ABSOLUTE_TIMEOUT,\n            inactivityTimeout: SESSION_CONFIG.INACTIVITY_TIMEOUT\n        });\n        // Check absolute timeout\n        if (now >= session.expiresAt) {\n            console.log(\"[Session] Session expired due to absolute timeout. Times:\", {\n                now,\n                expiresAt: session.expiresAt,\n                diff: now - session.expiresAt\n            });\n            clearSession();\n            return false;\n        }\n        // Check inactivity timeout\n        const inactiveTime = now - session.lastActive;\n        if (inactiveTime >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            console.log(\"[Session] Session expired due to inactivity. Times:\", {\n                now,\n                lastActive: session.lastActive,\n                inactiveTime,\n                inactivityTimeout: SESSION_CONFIG.INACTIVITY_TIMEOUT\n            });\n            clearSession();\n            return false;\n        }\n        // Only update lastActive if it's been more than 1 minute\n        if (inactiveTime > 60000) {\n            console.log(\"[Session] Updating lastActive time in validity check\");\n            session.lastActive = now;\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n        }\n        return true;\n    }, false);\n}\n// Session expiry handler\nfunction handleSessionExpiry() {\n    safeStorageOp(()=>{\n        // Don't handle expiry if we're already on the landing page\n        if (window.location.pathname === \"/\" || window.location.pathname === \"\") {\n            return;\n        }\n        // Save current state if needed\n        const currentState = {\n            messages: window.getSavedPlaces?.() || [],\n            lastUrl: window.location.pathname\n        };\n        storage?.setItem(\"expiredSessionState\", JSON.stringify(currentState));\n        // Clear session\n        clearSession();\n        // Only redirect if we're not already on the landing page\n        const currentUrl = new URL(window.location.href);\n        if (!currentUrl.searchParams.has(\"return\")) {\n            window.location.href = `/?return=${encodeURIComponent(currentState.lastUrl)}`;\n        }\n    }, undefined);\n}\nfunction clearSession() {\n    console.log(\"[Session] Clearing session storage\");\n    safeStorageOp(()=>{\n        storage?.removeItem(SESSION_CONFIG.STORAGE_KEY);\n    }, undefined);\n}\nfunction updateLastActive() {\n    return safeStorageOp(()=>{\n        const storedData = storage?.getItem(SESSION_CONFIG.STORAGE_KEY);\n        if (!storedData) {\n            console.log(\"[Session] No session to update lastActive\");\n            return false;\n        }\n        try {\n            const session = JSON.parse(storedData);\n            session.lastActive = Date.now();\n            storage?.setItem(SESSION_CONFIG.STORAGE_KEY, JSON.stringify(session));\n            console.log(\"[Session] Successfully updated lastActive\");\n            return true;\n        } catch (error) {\n            console.error(\"[Session] Failed to update lastActive:\", error);\n            return false;\n        }\n    }, false);\n}\nfunction generateSessionId() {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vdXRpbHMvc2Vzc2lvbi1tYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUN5RDtBQUVsRCxNQUFNQyxpQkFBaUI7SUFDNUJDLGFBQWE7SUFDYkMsa0JBQWtCLEtBQUssS0FBSyxLQUFLO0lBQ2pDQyxvQkFBb0IsSUFBSSxLQUFLLEtBQUs7SUFDbENDLHdCQUF3QixJQUFJLEtBQUs7SUFDakNDLGtCQUFrQjtJQUNsQkMsaUJBQWlCO0FBQ25CLEVBQUU7QUFFRixzQkFBc0I7QUFDZixNQUFNQyxhQUFhO0lBQ3hCLElBQUksS0FBa0IsRUFBYSxFQUVsQztJQUNELE9BQU87QUFDVCxFQUFFO0FBRUssTUFBTUcsVUFBVUgsYUFBYTtBQUVwQyw0QkFBNEI7QUFDNUIsSUFBSUksa0JBQWtCO0FBQ3RCLE1BQU1DLHFCQUFxQixNQUFNLG1CQUFtQjtBQUVwRCxTQUFTQztJQUNQLElBQUlGLGlCQUFpQixPQUFPO0lBQzVCQSxrQkFBa0I7SUFDbEIsT0FBTztBQUNUO0FBRUEsU0FBU0c7SUFDUEgsa0JBQWtCO0FBQ3BCO0FBRUEsa0VBQWtFO0FBQzNELE1BQU1JLGdCQUFnQixPQUFVQyxXQUFvQkM7SUFDekQsSUFBSTtRQUNGLElBQUksQ0FBQ1AsU0FBUyxPQUFPTztRQUVyQixzQkFBc0I7UUFDdEIsSUFBSUMsZUFBZTtRQUNuQixJQUFJQyxXQUFXO1FBQ2YsTUFBTyxDQUFDRCxnQkFBZ0JDLFdBQVcsRUFBRztZQUNwQ0QsZUFBZUw7WUFDZixJQUFJLENBQUNLLGNBQWM7Z0JBQ2pCQztnQkFDQSxpQ0FBaUM7Z0JBQ2pDLE1BQU0sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV0MsV0FBV0QsU0FBUztZQUNuRDtRQUNGO1FBRUEsSUFBSSxDQUFDSCxjQUFjO1lBQ2pCSyxRQUFRQyxLQUFLLENBQUM7WUFDZCxPQUFPUDtRQUNUO1FBRUEsSUFBSTtZQUNGLE9BQU9EO1FBQ1QsU0FBVTtZQUNSRjtRQUNGO0lBQ0YsRUFB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UTlCLGVBQWVDLFdBQVc7UUFDOUQsSUFBSSxDQUFDeUQsWUFBWTtZQUNmbkMsUUFBUWtDLEdBQUcsQ0FBQztZQUNaLE9BQU87UUFDVDtRQUVBLElBQUk7WUFDRixNQUFNaEIsVUFBVVYsS0FBS0MsS0FBSyxDQUFDMEI7WUFDM0JqQixRQUFRUixVQUFVLEdBQUdOLEtBQUtELEdBQUc7WUFDN0JoQixTQUFTMEIsUUFBUXBDLGVBQWVDLFdBQVcsRUFBRThCLEtBQUtNLFNBQVMsQ0FBQ0k7WUFDNURsQixRQUFRa0MsR0FBRyxDQUFDO1lBQ1osT0FBTztRQUNULEVBQUUsT0FBT2pDLE9BQU87WUFDZEQsUUFBUUMsS0FBSyxDQUFDLDBDQUEwQ0E7WUFDeEQsT0FBTztRQUNUO0lBQ0YsR0FBRztBQUNMO0FBRU8sU0FBU2dCO0lBQ2QsT0FBTyxDQUFDLEVBQUViLEtBQUtELEdBQUcsR0FBRyxDQUFDLEVBQUUrRixLQUFLQyxNQUFNLEdBQUc1QixRQUFRLENBQUMsSUFBSTZCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNuRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9zZXNzaW9uLW1hbmFnZXIudHM/MTMzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmF2ZWxTZXNzaW9uIH0gZnJvbSAnLi4vbWFuYWdlcnMvdHlwZXMnO1xuaW1wb3J0IHsgU1RBR0VfTElNSVRTIH0gZnJvbSAnLi4vbWFuYWdlcnMvc3RhZ2UtbWFuYWdlcic7XG5cbmV4cG9ydCBjb25zdCBTRVNTSU9OX0NPTkZJRyA9IHtcbiAgU1RPUkFHRV9LRVk6ICd0cmF2ZWxfcml6el9zZXNzaW9uJyxcbiAgQUJTT0xVVEVfVElNRU9VVDogMjQgKiA2MCAqIDYwICogMTAwMCwgLy8gMjQgaG91cnNcbiAgSU5BQ1RJVklUWV9USU1FT1VUOiAyICogNjAgKiA2MCAqIDEwMDAsIC8vIDIgaG91cnNcbiAgV0FSTklOR19CRUZPUkVfVElNRU9VVDogNSAqIDYwICogMTAwMCwgLy8gNSBtaW51dGVzIHdhcm5pbmdcbiAgTUFYX1RPVEFMX0lOUFVUUzogMTUsXG4gIFBBWU1FTlRfUkVGX0tFWTogJ3BheW1lbnRfcmVmZXJlbmNlX2lkJ1xufTtcblxuLy8gU2FmZSBzdG9yYWdlIGFjY2Vzc1xuZXhwb3J0IGNvbnN0IGdldFN0b3JhZ2UgPSAoKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3Qgc3RvcmFnZSA9IGdldFN0b3JhZ2UoKTtcblxuLy8gQWRkIGF0b21pYyBvcGVyYXRpb24gbG9ja1xubGV0IGlzU2Vzc2lvbkxvY2tlZCA9IGZhbHNlO1xuY29uc3Qgc2Vzc2lvbkxvY2tUaW1lb3V0ID0gMTAwMDsgLy8gMSBzZWNvbmQgdGltZW91dFxuXG5mdW5jdGlvbiBhY3F1aXJlU2Vzc2lvbkxvY2soKTogYm9vbGVhbiB7XG4gIGlmIChpc1Nlc3Npb25Mb2NrZWQpIHJldHVybiBmYWxzZTtcbiAgaXNTZXNzaW9uTG9ja2VkID0gdHJ1ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VTZXNzaW9uTG9jaygpIHtcbiAgaXNTZXNzaW9uTG9ja2VkID0gZmFsc2U7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBzYWZlbHkgYWNjZXNzIHN0b3JhZ2Ugd2l0aCBhdG9taWMgZ3VhcmFudGVlc1xuZXhwb3J0IGNvbnN0IHNhZmVTdG9yYWdlT3AgPSBhc3luYyA8VD4ob3BlcmF0aW9uOiAoKSA9PiBULCBkZWZhdWx0VmFsdWU6IFQpOiBQcm9taXNlPFQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIXN0b3JhZ2UpIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgXG4gICAgLy8gVHJ5IHRvIGFjcXVpcmUgbG9ja1xuICAgIGxldCBsb2NrQWNxdWlyZWQgPSBmYWxzZTtcbiAgICBsZXQgYXR0ZW1wdHMgPSAwO1xuICAgIHdoaWxlICghbG9ja0FjcXVpcmVkICYmIGF0dGVtcHRzIDwgNSkge1xuICAgICAgbG9ja0FjcXVpcmVkID0gYWNxdWlyZVNlc3Npb25Mb2NrKCk7XG4gICAgICBpZiAoIWxvY2tBY3F1aXJlZCkge1xuICAgICAgICBhdHRlbXB0cysrO1xuICAgICAgICAvLyBXYWl0IGEgYml0IGJlZm9yZSB0cnlpbmcgYWdhaW5cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAoIWxvY2tBY3F1aXJlZCkge1xuICAgICAgY29uc29sZS5lcnJvcignW1Nlc3Npb25dIEZhaWxlZCB0byBhY3F1aXJlIGxvY2sgYWZ0ZXIgNSBhdHRlbXB0cycpO1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBvcGVyYXRpb24oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgcmVsZWFzZVNlc3Npb25Mb2NrKCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTZXNzaW9uXSBTdG9yYWdlIG9wZXJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgIHJlbGVhc2VTZXNzaW9uTG9jaygpO1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBzYWZlbHkgYWNjZXNzIHN0b3JhZ2Vcbi8vIGV4cG9ydCBjb25zdCBzYWZlU3RvcmFnZU9wID0gPFQ+KG9wZXJhdGlvbjogKCkgPT4gVCwgZGVmYXVsdFZhbHVlOiBUKTogVCA9PiB7XG4vLyAgIHRyeSB7XG4vLyAgICAgaWYgKCFzdG9yYWdlKSByZXR1cm4gZGVmYXVsdFZhbHVlO1xuLy8gICAgIHJldHVybiBvcGVyYXRpb24oKTtcbi8vICAgfSBjYXRjaCAoZXJyb3IpIHtcbi8vICAgICBjb25zb2xlLmVycm9yKCdbU2Vzc2lvbl0gU3RvcmFnZSBvcGVyYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbi8vICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuLy8gICB9XG4vLyB9O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVNlc3Npb24oKTogUHJvbWlzZTxUcmF2ZWxTZXNzaW9uPiB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIFxuICAvLyBUcnkgdG8gZ2V0IGV4aXN0aW5nIHNlc3Npb24gZmlyc3RcbiAgY29uc3QgZXhpc3RpbmdTZXNzaW9uID0gYXdhaXQgc2FmZVN0b3JhZ2VPcCgoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmVkID0gc3RvcmFnZT8uZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG4gICAgcmV0dXJuIHN0b3JlZCA/IEpTT04ucGFyc2Uoc3RvcmVkKSBhcyBUcmF2ZWxTZXNzaW9uIDogbnVsbDtcbiAgfSwgbnVsbCk7XG5cbiAgaWYgKGV4aXN0aW5nU2Vzc2lvbikge1xuICAgIC8vIFVwZGF0ZSBib3RoIGxhc3RBY3RpdmUgYW5kIGV4cGlyZXNBdFxuICAgIGV4aXN0aW5nU2Vzc2lvbi5sYXN0QWN0aXZlID0gbm93O1xuICAgIGV4aXN0aW5nU2Vzc2lvbi5leHBpcmVzQXQgPSBub3cgKyBTRVNTSU9OX0NPTkZJRy5BQlNPTFVURV9USU1FT1VUO1xuICAgIC8vIEVuc3VyZSBhbGwgc3RhZ2VzIGFyZSBpbml0aWFsaXplZFxuICAgIGV4aXN0aW5nU2Vzc2lvbi5zdGFnZVByb21wdHMgPSBleGlzdGluZ1Nlc3Npb24uc3RhZ2VQcm9tcHRzIHx8IHsgMTogMCwgMjogMCwgMzogMCwgNDogMCwgNTogMCB9O1xuICAgIGF3YWl0IHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgICAgc3RvcmFnZT8uc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoZXhpc3RpbmdTZXNzaW9uKSk7XG4gICAgfSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gZXhpc3RpbmdTZXNzaW9uO1xuICB9XG5cbiAgLy8gQ3JlYXRlIG5ldyBzZXNzaW9uIGlmIG5vbmUgZXhpc3RzXG4gIGNvbnN0IHNlc3Npb25JZCA9IGdlbmVyYXRlU2Vzc2lvbklkKCk7XG4gIGNvbnN0IHNlc3Npb246IFRyYXZlbFNlc3Npb24gPSB7XG4gICAgLy8gU2Vzc2lvbiBpbmZvXG4gICAgc2Vzc2lvbklkLFxuICAgIHN0YXJ0VGltZTogbm93LFxuICAgIGxhc3RBY3RpdmU6IG5vdyxcbiAgICBleHBpcmVzQXQ6IG5vdyArIFNFU1NJT05fQ09ORklHLkFCU09MVVRFX1RJTUVPVVQsXG5cbiAgICAvLyBUcmF2ZWwgZGV0YWlsc1xuICAgIGRlc3RpbmF0aW9uOiAnJyxcbiAgICBzdGFydERhdGU6ICcnLFxuICAgIGVuZERhdGU6ICcnLFxuICAgIHByZWZlcmVuY2VzOiBbXSxcbiAgICBidWRnZXQ6ICcnLFxuICAgIGxhbmd1YWdlOiAnJyxcbiAgICB0cmFuc3BvcnQ6IFtdLFxuXG4gICAgLy8gUGxhY2VzXG4gICAgc2F2ZWRQbGFjZXM6IFtdLFxuICAgIGN1cnJlbnRTdGFnZTogMSxcblxuICAgIC8vIE1ldHJpY3NcbiAgICB0b3RhbFByb21wdHM6IDAsXG4gICAgc3RhZ2VQcm9tcHRzOiB7IDE6IDAsIDI6IDAsIDM6IDAsIDQ6IDAsIDU6IDAgfSxcbiAgICBzYXZlZFBsYWNlc0NvdW50OiAwLFxuXG4gICAgLy8gUGF5bWVudFxuICAgIGlzUGFpZDogZmFsc2UsXG4gICAgcGF5bWVudFJlZmVyZW5jZTogYHNlc3Npb25fJHtzZXNzaW9uSWR9YFxuICB9O1xuXG4gIGF3YWl0IHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgIHN0b3JhZ2U/LnNldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pKTtcbiAgfSwgdW5kZWZpbmVkKTtcbiAgcmV0dXJuIHNlc3Npb247XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdG9yZWRTZXNzaW9uKCk6IFByb21pc2U8VHJhdmVsU2Vzc2lvbiB8IG51bGw+IHtcbiAgcmV0dXJuIGF3YWl0IHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gQXR0ZW1wdGluZyB0byBnZXQgc3RvcmVkIHNlc3Npb24nKTtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gc3RvcmFnZT8uZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG4gICAgaWYgKCFzdG9yZWREYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1Nlc3Npb25dIE5vIHN0b3JlZCBzZXNzaW9uIGRhdGEgZm91bmQnKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZXNzaW9uID0gSlNPTi5wYXJzZShzdG9yZWREYXRhKTtcbiAgICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gU3VjY2Vzc2Z1bGx5IHBhcnNlZCBzZXNzaW9uOicsIHtcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLnNlc3Npb25JZCxcbiAgICAgICAgZGVzdGluYXRpb246IHNlc3Npb24uZGVzdGluYXRpb24sXG4gICAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoc2Vzc2lvbi5zdGFydFRpbWUpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGxhc3RBY3RpdmU6IG5ldyBEYXRlKHNlc3Npb24ubGFzdEFjdGl2ZSkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShzZXNzaW9uLmV4cGlyZXNBdCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1Nlc3Npb25dIEZhaWxlZCB0byBwYXJzZSBzZXNzaW9uIGRhdGE6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JlZE1ldHJpY3MoKSB7XG4gIHJldHVybiBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gZ2V0U3RvcmVkU2Vzc2lvbigpO1xuICAgIGlmICghc2Vzc2lvbikgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJhY3Rpb246IHtcbiAgICAgICAgdG90YWxQcm9tcHRzOiBzZXNzaW9uLnRvdGFsUHJvbXB0cyxcbiAgICAgICAgc3RhZ2VQcm9tcHRzOiBzZXNzaW9uLnN0YWdlUHJvbXB0cyxcbiAgICAgICAgbGFzdEFjdGl2ZTogc2Vzc2lvbi5sYXN0QWN0aXZlXG4gICAgICB9LFxuICAgICAgcGxhY2VzOiB7XG4gICAgICAgIHNhdmVkQ291bnQ6IHNlc3Npb24uc2F2ZWRQbGFjZXNDb3VudFxuICAgICAgfSxcbiAgICAgIHBheW1lbnQ6IHtcbiAgICAgICAgc3RhdHVzOiBzZXNzaW9uLmlzUGFpZCxcbiAgICAgICAgcmVmZXJlbmNlOiBzZXNzaW9uLnBheW1lbnRSZWZlcmVuY2UsXG4gICAgICAgIHRpbWVzdGFtcDogc2Vzc2lvbi5wYXltZW50VGltZXN0YW1wXG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBkZXN0aW5hdGlvbjogc2Vzc2lvbi5kZXN0aW5hdGlvbixcbiAgICAgICAgZGF0ZXM6IHtcbiAgICAgICAgICBzdGFydDogc2Vzc2lvbi5zdGFydERhdGUsXG4gICAgICAgICAgZW5kOiBzZXNzaW9uLmVuZERhdGVcbiAgICAgICAgfSxcbiAgICAgICAgcHJlZmVyZW5jZXM6IHNlc3Npb24ucHJlZmVyZW5jZXMsXG4gICAgICAgIGJ1ZGdldDogc2Vzc2lvbi5idWRnZXQsXG4gICAgICAgIGxhbmd1YWdlOiBzZXNzaW9uLmxhbmd1YWdlLFxuICAgICAgICB0cmFuc3BvcnQ6IHNlc3Npb24udHJhbnNwb3J0XG4gICAgICB9XG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTdG9yZWRNZXRyaWNzKFxuICBjdXJyZW50U3RhZ2U6IG51bWJlcixcbiAgaW5jcmVtZW50UHJvbXB0OiBib29sZWFuID0gZmFsc2UsXG4gIGluY3JlbWVudFNhdmVkUGxhY2VzOiBib29sZWFuID0gZmFsc2Vcbik6IFRyYXZlbFNlc3Npb24ge1xuICByZXR1cm4gc2FmZVN0b3JhZ2VPcCgoKSA9PiB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGdldFN0b3JlZFNlc3Npb24oKSB8fCBpbml0aWFsaXplU2Vzc2lvbigpO1xuXG4gICAgaWYgKGluY3JlbWVudFByb21wdCkge1xuICAgICAgY29uc3QgeyB3aXRoaW5TdGFnZUxpbWl0IH0gPSBjaGVja0lucHV0TGltaXRzKGN1cnJlbnRTdGFnZSk7XG4gICAgICBpZiAod2l0aGluU3RhZ2VMaW1pdCkge1xuICAgICAgICAvLyBJbml0aWFsaXplIHN0YWdlUHJvbXB0cyB3aXRoIGFsbCBzdGFnZXMgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgICAgICBpZiAoIXNlc3Npb24uc3RhZ2VQcm9tcHRzKSB7XG4gICAgICAgICAgc2Vzc2lvbi5zdGFnZVByb21wdHMgPSB7IDE6IDAsIDI6IDAsIDM6IDAsIDQ6IDAsIDU6IDAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRW5zdXJlIGFsbCBzdGFnZXMgZXhpc3RcbiAgICAgICAgZm9yIChsZXQgc3RhZ2UgPSAxOyBzdGFnZSA8PSA1OyBzdGFnZSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzZXNzaW9uLnN0YWdlUHJvbXB0c1tzdGFnZV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBzZXNzaW9uLnN0YWdlUHJvbXB0c1tzdGFnZV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlc3Npb24udG90YWxQcm9tcHRzID0gKHNlc3Npb24udG90YWxQcm9tcHRzIHx8IDApICsgMTtcbiAgICAgICAgc2Vzc2lvbi5zdGFnZVByb21wdHNbY3VycmVudFN0YWdlXSA9IChzZXNzaW9uLnN0YWdlUHJvbXB0c1tjdXJyZW50U3RhZ2VdIHx8IDApICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5jcmVtZW50U2F2ZWRQbGFjZXMpIHtcbiAgICAgIHNlc3Npb24uc2F2ZWRQbGFjZXNDb3VudCA9IChzZXNzaW9uLnNhdmVkUGxhY2VzQ291bnQgfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIHN0b3JhZ2U/LnNldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pKTtcbiAgICByZXR1cm4gc2Vzc2lvbjtcbiAgfSwgbnVsbCkgfHwgaW5pdGlhbGl6ZVNlc3Npb24oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSW5wdXRMaW1pdHMoY3VycmVudFN0YWdlOiBudW1iZXIpOiB7XG4gIHdpdGhpblN0YWdlTGltaXQ6IGJvb2xlYW47XG4gIHdpdGhpblRvdGFsTGltaXQ6IGJvb2xlYW47XG4gIHN0YWdlSW5wdXRDb3VudDogbnVtYmVyO1xuICB0b3RhbElucHV0Q291bnQ6IG51bWJlcjtcbn0ge1xuICByZXR1cm4gc2FmZVN0b3JhZ2VPcCgoKSA9PiB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGdldFN0b3JlZFNlc3Npb24oKSB8fCBpbml0aWFsaXplU2Vzc2lvbigpO1xuICAgIGNvbnN0IHN0YWdlUHJvbXB0cyA9IHNlc3Npb24uc3RhZ2VQcm9tcHRzIHx8IHsgMTogMCwgMjogMCwgMzogMCB9O1xuICAgIGNvbnN0IHRvdGFsUHJvbXB0cyA9IHNlc3Npb24udG90YWxQcm9tcHRzIHx8IDA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgd2l0aGluU3RhZ2VMaW1pdDogY3VycmVudFN0YWdlID09PSAzXG4gICAgICAgID8gKHN0YWdlUHJvbXB0c1tjdXJyZW50U3RhZ2VdIHx8IDApIDwgU1RBR0VfTElNSVRTWzNdLm1heFByb21wdHNcbiAgICAgICAgOiB0cnVlLFxuICAgICAgd2l0aGluVG90YWxMaW1pdDogY3VycmVudFN0YWdlID09PSAzXG4gICAgICAgID8gdG90YWxQcm9tcHRzIDwgU0VTU0lPTl9DT05GSUcuTUFYX1RPVEFMX0lOUFVUU1xuICAgICAgICA6IHRydWUsXG4gICAgICBzdGFnZUlucHV0Q291bnQ6IHN0YWdlUHJvbXB0c1tjdXJyZW50U3RhZ2VdIHx8IDAsXG4gICAgICB0b3RhbElucHV0Q291bnQ6IHRvdGFsUHJvbXB0c1xuICAgIH07XG4gIH0sIHtcbiAgICB3aXRoaW5TdGFnZUxpbWl0OiB0cnVlLFxuICAgIHdpdGhpblRvdGFsTGltaXQ6IHRydWUsXG4gICAgc3RhZ2VJbnB1dENvdW50OiAwLFxuICAgIHRvdGFsSW5wdXRDb3VudDogMFxuICB9KTtcbn1cblxuLy8gUGF5bWVudCByZWxhdGVkIGZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIHNldFBheW1lbnRTdGF0dXMoaXNQYWlkOiBib29sZWFuKTogdm9pZCB7XG4gIHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgIGNvbnN0IHNlc3Npb24gPSBnZXRTdG9yZWRTZXNzaW9uKCkgfHwgaW5pdGlhbGl6ZVNlc3Npb24oKTtcbiAgICBzZXNzaW9uLmlzUGFpZCA9IGlzUGFpZDtcbiAgICBzZXNzaW9uLnBheW1lbnRUaW1lc3RhbXAgPSBpc1BhaWQgPyBEYXRlLm5vdygpIDogdW5kZWZpbmVkO1xuICAgIHN0b3JhZ2U/LnNldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pKTtcbiAgfSwgdW5kZWZpbmVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBheW1lbnRTdGF0dXMoKTogYm9vbGVhbiB7XG4gIHJldHVybiBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gZ2V0U3RvcmVkU2Vzc2lvbigpO1xuICAgIHJldHVybiBzZXNzaW9uPy5pc1BhaWQgfHwgZmFsc2U7XG4gIH0sIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFBheW1lbnRSZWZlcmVuY2UocmVmZXJlbmNlOiBzdHJpbmcpOiB2b2lkIHtcbiAgc2FmZVN0b3JhZ2VPcCgoKSA9PiB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGdldFN0b3JlZFNlc3Npb24oKSB8fCBpbml0aWFsaXplU2Vzc2lvbigpO1xuICAgIHNlc3Npb24ucGF5bWVudFJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICBzdG9yYWdlPy5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzZXNzaW9uKSk7XG4gIH0sIHVuZGVmaW5lZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXltZW50UmVmZXJlbmNlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gZ2V0U3RvcmVkU2Vzc2lvbigpO1xuICAgIHJldHVybiBzZXNzaW9uPy5wYXltZW50UmVmZXJlbmNlO1xuICB9LCB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJQYXltZW50UmVmZXJlbmNlKCk6IHZvaWQge1xuICBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gZ2V0U3RvcmVkU2Vzc2lvbigpIHx8IGluaXRpYWxpemVTZXNzaW9uKCk7XG4gICAgc2Vzc2lvbi5wYXltZW50UmVmZXJlbmNlID0gJyc7XG4gICAgc3RvcmFnZT8uc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICB9LCB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF5bWVudFJlZmVyZW5jZUlkKCk6IHN0cmluZyB8IG51bGwge1xuICByZXR1cm4gc2FmZVN0b3JhZ2VPcCgoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmVkID0gc3RvcmFnZT8uZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5QQVlNRU5UX1JFRl9LRVkpO1xuICAgIHJldHVybiBzdG9yZWQgfHwgbnVsbDtcbiAgfSwgbnVsbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQYXltZW50UmVmZXJlbmNlSWQocmVmZXJlbmNlSWQ6IHN0cmluZykge1xuICBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBzdG9yYWdlPy5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlBBWU1FTlRfUkVGX0tFWSwgcmVmZXJlbmNlSWQpO1xuICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gU3RvcmVkIHBheW1lbnQgcmVmZXJlbmNlIElEOicsIHJlZmVyZW5jZUlkKTtcbiAgfSwgdW5kZWZpbmVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU2Vzc2lvbigpOiBib29sZWFuIHtcbiAgcmV0dXJuIHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRTZXNzaW9uID0gc3RvcmFnZT8uZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG5cbiAgICBpZiAoIWN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICBjb25zdCBuZXdTZXNzaW9uID0gRGF0ZS5ub3coKS50b1N0cmluZygpO1xuICAgICAgc3RvcmFnZT8uc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSwgbmV3U2Vzc2lvbik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCBmYWxzZSk7XG59XG5cbi8vIEFkZCB3YXJuaW5nIG1lY2hhbmlzbVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU2Vzc2lvbldpdGhXYXJuaW5nKCk6IHsgaXNWYWxpZDogYm9vbGVhbjsgc2hvdWxkV2FybjogYm9vbGVhbiB9IHtcbiAgcmV0dXJuIHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgIGNvbnN0IHNlc3Npb24gPSBnZXRTdG9yZWRTZXNzaW9uKCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgc2hvdWxkV2FybjogZmFsc2UgfTtcbiAgICB9XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHRpbWVMZWZ0ID0gc2Vzc2lvbi5leHBpcmVzQXQgLSBub3c7XG4gICAgY29uc3Qgc2hvdWxkV2FybiA9IHRpbWVMZWZ0IDw9IFNFU1NJT05fQ09ORklHLldBUk5JTkdfQkVGT1JFX1RJTUVPVVQ7XG4gICAgY29uc3QgaXNWYWxpZCA9IHRpbWVMZWZ0ID4gMDtcblxuICAgIHJldHVybiB7IGlzVmFsaWQsIHNob3VsZFdhcm4gfTtcbiAgfSwgeyBpc1ZhbGlkOiBmYWxzZSwgc2hvdWxkV2FybjogZmFsc2UgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1Nlc3Npb25WYWxpZGl0eSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gQ2hlY2tpbmcgc2Vzc2lvbiB2YWxpZGl0eScpO1xuICAgIGNvbnN0IHN0b3JlZERhdGEgPSBzdG9yYWdlPy5nZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZKTtcbiAgICBpZiAoIXN0b3JlZERhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gTm8gc2Vzc2lvbiBmb3VuZCBkdXJpbmcgdmFsaWRpdHkgY2hlY2snKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgc2Vzc2lvbjtcbiAgICB0cnkge1xuICAgICAgc2Vzc2lvbiA9IEpTT04ucGFyc2Uoc3RvcmVkRGF0YSk7XG4gICAgICBjb25zb2xlLmxvZygnW1Nlc3Npb25dIFBhcnNlZCBzZXNzaW9uIGZvciB2YWxpZGl0eSBjaGVjazonLCB7XG4gICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbi5zZXNzaW9uSWQsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBzZXNzaW9uLmRlc3RpbmF0aW9uLFxuICAgICAgICBzdGFydFRpbWU6IG5ldyBEYXRlKHNlc3Npb24uc3RhcnRUaW1lKS50b0lTT1N0cmluZygpLFxuICAgICAgICBsYXN0QWN0aXZlOiBuZXcgRGF0ZShzZXNzaW9uLmxhc3RBY3RpdmUpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoc2Vzc2lvbi5leHBpcmVzQXQpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU2Vzc2lvbl0gRmFpbGVkIHRvIHBhcnNlIHNlc3Npb24gZHVyaW5nIHZhbGlkaXR5IGNoZWNrOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gVmFsaWRpdHkgY2hlY2sgdGltZXM6Jywge1xuICAgICAgbm93OiBuZXcgRGF0ZShub3cpLnRvSVNPU3RyaW5nKCksXG4gICAgICBleHBpcmVzQXQ6IG5ldyBEYXRlKHNlc3Npb24uZXhwaXJlc0F0KS50b0lTT1N0cmluZygpLFxuICAgICAgbGFzdEFjdGl2ZTogbmV3IERhdGUoc2Vzc2lvbi5sYXN0QWN0aXZlKS50b0lTT1N0cmluZygpLFxuICAgICAgdGltZVRpbGxFeHBpcnk6IHNlc3Npb24uZXhwaXJlc0F0IC0gbm93LFxuICAgICAgaW5hY3RpdmVUaW1lOiBub3cgLSBzZXNzaW9uLmxhc3RBY3RpdmUsXG4gICAgICBhYnNvbHV0ZVRpbWVvdXQ6IFNFU1NJT05fQ09ORklHLkFCU09MVVRFX1RJTUVPVVQsXG4gICAgICBpbmFjdGl2aXR5VGltZW91dDogU0VTU0lPTl9DT05GSUcuSU5BQ1RJVklUWV9USU1FT1VUXG4gICAgfSk7XG5cbiAgICAvLyBDaGVjayBhYnNvbHV0ZSB0aW1lb3V0XG4gICAgaWYgKG5vdyA+PSBzZXNzaW9uLmV4cGlyZXNBdCkge1xuICAgICAgY29uc29sZS5sb2coJ1tTZXNzaW9uXSBTZXNzaW9uIGV4cGlyZWQgZHVlIHRvIGFic29sdXRlIHRpbWVvdXQuIFRpbWVzOicsIHtcbiAgICAgICAgbm93LFxuICAgICAgICBleHBpcmVzQXQ6IHNlc3Npb24uZXhwaXJlc0F0LFxuICAgICAgICBkaWZmOiBub3cgLSBzZXNzaW9uLmV4cGlyZXNBdFxuICAgICAgfSk7XG4gICAgICBjbGVhclNlc3Npb24oKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpbmFjdGl2aXR5IHRpbWVvdXRcbiAgICBjb25zdCBpbmFjdGl2ZVRpbWUgPSBub3cgLSBzZXNzaW9uLmxhc3RBY3RpdmU7XG4gICAgaWYgKGluYWN0aXZlVGltZSA+PSBTRVNTSU9OX0NPTkZJRy5JTkFDVElWSVRZX1RJTUVPVVQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbU2Vzc2lvbl0gU2Vzc2lvbiBleHBpcmVkIGR1ZSB0byBpbmFjdGl2aXR5LiBUaW1lczonLCB7XG4gICAgICAgIG5vdyxcbiAgICAgICAgbGFzdEFjdGl2ZTogc2Vzc2lvbi5sYXN0QWN0aXZlLFxuICAgICAgICBpbmFjdGl2ZVRpbWUsXG4gICAgICAgIGluYWN0aXZpdHlUaW1lb3V0OiBTRVNTSU9OX0NPTkZJRy5JTkFDVElWSVRZX1RJTUVPVVRcbiAgICAgIH0pO1xuICAgICAgY2xlYXJTZXNzaW9uKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gT25seSB1cGRhdGUgbGFzdEFjdGl2ZSBpZiBpdCdzIGJlZW4gbW9yZSB0aGFuIDEgbWludXRlXG4gICAgaWYgKGluYWN0aXZlVGltZSA+IDYwMDAwKSB7IC8vIDEgbWludXRlXG4gICAgICBjb25zb2xlLmxvZygnW1Nlc3Npb25dIFVwZGF0aW5nIGxhc3RBY3RpdmUgdGltZSBpbiB2YWxpZGl0eSBjaGVjaycpO1xuICAgICAgc2Vzc2lvbi5sYXN0QWN0aXZlID0gbm93O1xuICAgICAgc3RvcmFnZT8uc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgZmFsc2UpO1xufVxuXG4vLyBTZXNzaW9uIGV4cGlyeSBoYW5kbGVyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlU2Vzc2lvbkV4cGlyeSgpIHtcbiAgc2FmZVN0b3JhZ2VPcCgoKSA9PiB7XG4gICAgLy8gRG9uJ3QgaGFuZGxlIGV4cGlyeSBpZiB3ZSdyZSBhbHJlYWR5IG9uIHRoZSBsYW5kaW5nIHBhZ2VcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAnLycgfHwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAnJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNhdmUgY3VycmVudCBzdGF0ZSBpZiBuZWVkZWRcbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB7XG4gICAgICBtZXNzYWdlczogd2luZG93LmdldFNhdmVkUGxhY2VzPy4oKSB8fCBbXSxcbiAgICAgIGxhc3RVcmw6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH07XG4gICAgc3RvcmFnZT8uc2V0SXRlbSgnZXhwaXJlZFNlc3Npb25TdGF0ZScsIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRTdGF0ZSkpO1xuXG4gICAgLy8gQ2xlYXIgc2Vzc2lvblxuICAgIGNsZWFyU2Vzc2lvbigpO1xuXG4gICAgLy8gT25seSByZWRpcmVjdCBpZiB3ZSdyZSBub3QgYWxyZWFkeSBvbiB0aGUgbGFuZGluZyBwYWdlXG4gICAgY29uc3QgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGlmICghY3VycmVudFVybC5zZWFyY2hQYXJhbXMuaGFzKCdyZXR1cm4nKSkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgLz9yZXR1cm49JHtlbmNvZGVVUklDb21wb25lbnQoY3VycmVudFN0YXRlLmxhc3RVcmwpfWA7XG4gICAgfVxuICB9LCB1bmRlZmluZWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTZXNzaW9uKCkge1xuICBjb25zb2xlLmxvZygnW1Nlc3Npb25dIENsZWFyaW5nIHNlc3Npb24gc3RvcmFnZScpO1xuICBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBzdG9yYWdlPy5yZW1vdmVJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZKTtcbiAgfSwgdW5kZWZpbmVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUxhc3RBY3RpdmUoKSB7XG4gIHJldHVybiBzYWZlU3RvcmFnZU9wKCgpID0+IHtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gc3RvcmFnZT8uZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG4gICAgaWYgKCFzdG9yZWREYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1Nlc3Npb25dIE5vIHNlc3Npb24gdG8gdXBkYXRlIGxhc3RBY3RpdmUnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2Vzc2lvbiA9IEpTT04ucGFyc2Uoc3RvcmVkRGF0YSk7XG4gICAgICBzZXNzaW9uLmxhc3RBY3RpdmUgPSBEYXRlLm5vdygpO1xuICAgICAgc3RvcmFnZT8uc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICAgICAgY29uc29sZS5sb2coJ1tTZXNzaW9uXSBTdWNjZXNzZnVsbHkgdXBkYXRlZCBsYXN0QWN0aXZlJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1Nlc3Npb25dIEZhaWxlZCB0byB1cGRhdGUgbGFzdEFjdGl2ZTonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNlc3Npb25JZCgpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YDtcbn1cbiJdLCJuYW1lcyI6WyJTVEFHRV9MSU1JVFMiLCJTRVNTSU9OX0NPTkZJRyIsIlNUT1JBR0VfS0VZIiwiQUJTT0xVVEVfVElNRU9VVCIsIklOQUNUSVZJVFlfVElNRU9VVCIsIldBUk5JTkdfQkVGT1JFX1RJTUVPVVQiLCJNQVhfVE9UQUxfSU5QVVRTIiwiUEFZTUVOVF9SRUZfS0VZIiwiZ2V0U3RvcmFnZSIsIndpbmRvdyIsInNlc3Npb25TdG9yYWdlIiwic3RvcmFnZSIsImlzU2Vzc2lvbkxvY2tlZCIsInNlc3Npb25Mb2NrVGltZW91dCIsImFjcXVpcmVTZXNzaW9uTG9jayIsInJlbGVhc2VTZXNzaW9uTG9jayIsInNhZmVTdG9yYWdlT3AiLCJvcGVyYXRpb24iLCJkZWZhdWx0VmFsdWUiLCJsb2NrQWNxdWlyZWQiLCJhdHRlbXB0cyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImNvbnNvbGUiLCJlcnJvciIsImluaXRpYWxpemVTZXNzaW9uIiwibm93IiwiRGF0ZSIsImV4aXN0aW5nU2Vzc2lvbiIsInN0b3JlZCIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJsYXN0QWN0aXZlIiwiZXhwaXJlc0F0Iiwic3RhZ2VQcm9tcHRzIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCIsInNlc3Npb25JZCIsImdlbmVyYXRlU2Vzc2lvbklkIiwic2Vzc2lvbiIsInN0YXJ0VGltZSIsImRlc3RpbmF0aW9uIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInByZWZlcmVuY2VzIiwiYnVkZ2V0IiwibGFuZ3VhZ2UiLCJ0cmFuc3BvcnQiLCJzYXZlZFBsYWNlcyIsImN1cnJlbnRTdGFnZSIsInRvdGFsUHJvbXB0cyIsInNhdmVkUGxhY2VzQ291bnQiLCJpc1BhaWQiLCJwYXltZW50UmVmZXJlbmNlIiwiZ2V0U3RvcmVkU2Vzc2lvbiIsImxvZyIsInN0b3JlZERhdGEiLCJ0b0lTT1N0cmluZyIsImdldFN0b3JlZE1ldHJpY3MiLCJpbnRlcmFjdGlvbiIsInBsYWNlcyIsInNhdmVkQ291bnQiLCJwYXltZW50Iiwic3RhdHVzIiwicmVmZXJlbmNlIiwidGltZXN0YW1wIiwicGF5bWVudFRpbWVzdGFtcCIsInBhcmFtZXRlcnMiLCJkYXRlcyIsInN0YXJ0IiwiZW5kIiwidXBkYXRlU3RvcmVkTWV0cmljcyIsImluY3JlbWVudFByb21wdCIsImluY3JlbWVudFNhdmVkUGxhY2VzIiwid2l0aGluU3RhZ2VMaW1pdCIsImNoZWNrSW5wdXRMaW1pdHMiLCJzdGFnZSIsIm1heFByb21wdHMiLCJ3aXRoaW5Ub3RhbExpbWl0Iiwic3RhZ2VJbnB1dENvdW50IiwidG90YWxJbnB1dENvdW50Iiwic2V0UGF5bWVudFN0YXR1cyIsImdldFBheW1lbnRTdGF0dXMiLCJzZXRQYXltZW50UmVmZXJlbmNlIiwiZ2V0UGF5bWVudFJlZmVyZW5jZSIsImNsZWFyUGF5bWVudFJlZmVyZW5jZSIsImdldFBheW1lbnRSZWZlcmVuY2VJZCIsInNldFBheW1lbnRSZWZlcmVuY2VJZCIsInJlZmVyZW5jZUlkIiwiY2hlY2tTZXNzaW9uIiwiY3VycmVudFNlc3Npb24iLCJuZXdTZXNzaW9uIiwidG9TdHJpbmciLCJjaGVja1Nlc3Npb25XaXRoV2FybmluZyIsImlzVmFsaWQiLCJzaG91bGRXYXJuIiwidGltZUxlZnQiLCJjaGVja1Nlc3Npb25WYWxpZGl0eSIsInRpbWVUaWxsRXhwaXJ5IiwiaW5hY3RpdmVUaW1lIiwiYWJzb2x1dGVUaW1lb3V0IiwiaW5hY3Rpdml0eVRpbWVvdXQiLCJkaWZmIiwiY2xlYXJTZXNzaW9uIiwiaGFuZGxlU2Vzc2lvbkV4cGlyeSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJjdXJyZW50U3RhdGUiLCJtZXNzYWdlcyIsImdldFNhdmVkUGxhY2VzIiwibGFzdFVybCIsImN1cnJlbnRVcmwiLCJVUkwiLCJocmVmIiwic2VhcmNoUGFyYW1zIiwiaGFzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlSXRlbSIsInVwZGF0ZUxhc3RBY3RpdmUiLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./utils/session-manager.ts\n");

/***/ })

});