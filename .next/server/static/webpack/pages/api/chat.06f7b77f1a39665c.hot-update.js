"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat",{

/***/ "(middleware)/./ai/tools.ts":
/*!*********************!*\
  !*** ./ai/tools.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   budgetSelectorTool: () => (/* binding */ budgetSelectorTool),\n/* harmony export */   carouselTool: () => (/* binding */ carouselTool),\n/* harmony export */   datePickerTool: () => (/* binding */ datePickerTool),\n/* harmony export */   detailsCardTool: () => (/* binding */ detailsCardTool),\n/* harmony export */   languageSelectorTool: () => (/* binding */ languageSelectorTool),\n/* harmony export */   placeCardTool: () => (/* binding */ placeCardTool),\n/* harmony export */   preferenceSelectorTool: () => (/* binding */ preferenceSelectorTool),\n/* harmony export */   tools: () => (/* binding */ tools),\n/* harmony export */   transportSelectorTool: () => (/* binding */ transportSelectorTool),\n/* harmony export */   weatherChartTool: () => (/* binding */ weatherChartTool)\n/* harmony export */ });\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ai */ \"(middleware)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(middleware)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/places-utils */ \"(middleware)/./utils/places-utils.ts\");\n\n\n\n// Tool for Budget Selection\nconst budgetSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display budget level options for the trip. Use this when discussing trip costs or when the user wants to set their budget preference.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        currentBudget: zod__WEBPACK_IMPORTED_MODULE_2__.z.enum([\n            \"$\",\n            \"$$\",\n            \"$$$\",\n            \"$$$$\"\n        ]).optional()\n    }),\n    execute: async function({ currentBudget }) {\n        return {\n            type: \"budgetSelector\",\n            props: {\n                currentBudget\n            }\n        };\n    }\n});\n// Tool for Travel Preferences\nconst preferenceSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display options for selecting travel preferences and interests.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        currentPreferences: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.enum([\n            \"Culture and Heritage\",\n            \"Nature\",\n            \"Foodie\",\n            \"Leisure\",\n            \"Adventure\",\n            \"Arts and Museums\"\n        ])).optional()\n    }),\n    execute: async function({ currentPreferences }) {\n        return {\n            type: \"preferenceSelector\",\n            props: {\n                currentPreferences\n            }\n        };\n    }\n});\n// Tool for Date Selection\nconst datePickerTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display a date picker for selecting travel dates.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        startDate: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n    }),\n    execute: async function({ startDate, endDate }) {\n        return {\n            type: \"datePicker\",\n            props: {\n                dates: {\n                    startDate,\n                    endDate\n                }\n            }\n        };\n    }\n});\n// Tool for Language Selection\nconst languageSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display language selection options.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        currentLanguage: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n    }),\n    execute: async function({ currentLanguage }) {\n        return {\n            type: \"languageSelector\",\n            props: {\n                currentLanguage: currentLanguage\n            }\n        };\n    }\n});\n// Tool for Transport Selection\nconst transportSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display transport method selection options. Use this when discussing transportation options for the trip, such as flights, trains, or car rentals.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        selectedMethod: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional()\n    }),\n    execute: async function({ selectedMethod }) {\n        return {\n            type: \"transportSelector\",\n            props: {\n                selectedMethod\n            }\n        };\n    }\n});\n// Tool for Place Display\nconst placeCardTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: 'Display information about one specific place. Use this whenever the user explicitly asks for ONE place, whether by name or type (e.g., \"show me one theatre\", \"show me one restaurant\", \"show me The Little Mermaid statue\").',\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        searchText: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(\"The name or description of the place to search for\"),\n        location: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            latitude: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n            longitude: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n        })\n    }),\n    execute: async function({ searchText, location }) {\n        try {\n            const place = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_0__.searchPlaceByText)(searchText, location);\n            if (!place) {\n                console.error(\"No place found for search text:\", searchText);\n                return {\n                    type: \"placeCard\",\n                    props: {\n                        place: null,\n                        showActions: false\n                    }\n                };\n            }\n            return {\n                type: \"placeCard\",\n                props: {\n                    place,\n                    showActions: false\n                }\n            };\n        } catch (error) {\n            console.error(\"Error searching for place:\", error);\n            return {\n                type: \"placeCard\",\n                props: {\n                    place: null,\n                    showActions: false\n                }\n            };\n        }\n    }\n});\n// Tool for Place Carousel\nconst carouselTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: 'Display multiple places in a carousel. Use this when the user wants to search for multiple places (e.g., \"show me cafes\", \"show me museums near me\", \"find restaurants\").',\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        searchText: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe('The search query for places (e.g., \"cafes\", \"museums\", \"restaurants\")'),\n        location: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            latitude: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n            longitude: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n        }),\n        maxResults: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().optional().default(5)\n    }),\n    execute: async function({ searchText, location, maxResults }) {\n        try {\n            const places = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_0__.searchMultiplePlacesByText)(searchText, location, maxResults);\n            if (!places || places.length === 0) {\n                console.error(\"No places found for search:\", {\n                    searchText\n                });\n                return {\n                    type: \"carousel\",\n                    props: {\n                        places: []\n                    }\n                };\n            }\n            return {\n                type: \"carousel\",\n                props: {\n                    places\n                }\n            };\n        } catch (error) {\n            console.error(\"Error searching places for carousel:\", error);\n            return {\n                type: \"carousel\",\n                props: {\n                    places: []\n                }\n            };\n        }\n    }\n});\n// Tool for Details Card\nconst detailsCardTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display travel details summary. Use this when the user wants to view a summary of their trip details, including destination, dates, preferences, budget, and more.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        content: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            dates: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                startDate: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                endDate: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n            }).optional(),\n            preferences: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n            budget: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n            language: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n            transport: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional(),\n            dining: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional()\n        })\n    }),\n    execute: async function({ content }) {\n        return {\n            type: \"detailsCard\",\n            props: {\n                content\n            }\n        };\n    }\n});\n// Tool for Weather Chart\nconst weatherChartTool = (0,ai__WEBPACK_IMPORTED_MODULE_1__.tool)({\n    description: \"Display historical weather data including temperature and precipitation for a location. Since we cannot provide future weather data, we will show historical data from the same month last year. For example, if a user asks about December 2024, we will show data from December 2023. Use this when discussing weather patterns or climate for a destination.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        lat: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().min(-90).max(90).describe(\"Latitude of the location\"),\n        lon: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().min(-180).max(180).describe(\"Longitude of the location\"),\n        targetMonth: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().min(1).max(12).describe(\"Target month (1-12)\"),\n        units: zod__WEBPACK_IMPORTED_MODULE_2__.z.enum([\n            \"standard\",\n            \"metric\",\n            \"imperial\"\n        ]).optional().default(\"metric\")\n    }),\n    execute: async function({ lat, lon, targetMonth, units = \"metric\" }) {\n        // Calculate date range for the same month last year\n        const now = new Date(\"2024-12-11T03:04:40+08:00\"); // Use provided time\n        const lastYear = now.getFullYear() - 1;\n        const startDate = new Date(lastYear, targetMonth - 1, 1);\n        const endDate = new Date(lastYear, targetMonth, 0); // Last day of the month\n        console.log(\"[weatherChartTool] Fetching weather data:\", {\n            lat,\n            lon,\n            targetMonth,\n            units,\n            startDate: startDate.toISOString(),\n            endDate: endDate.toISOString()\n        });\n        // Format dates in YYYY-MM-DD format as required by the API\n        const formattedStartDate = startDate.toISOString().split(\"T\")[0];\n        const formattedEndDate = endDate.toISOString().split(\"T\")[0];\n        // Fetch weather data\n        const baseUrl =  true ? process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\" : 0;\n        const url = `${baseUrl}/api/weather/historical?lat=${lat.toFixed(6)}&lon=${lon.toFixed(6)}&startDate=${formattedStartDate}&endDate=${formattedEndDate}&units=${units}`;\n        console.log(\"[weatherChartTool] API URL:\", url);\n        try {\n            const response = await fetch(url);\n            console.log(\"[weatherChartTool] API response status:\", response.status);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"[weatherChartTool] API error:\", errorText);\n                throw new Error(`Failed to fetch weather data: ${response.statusText}`);\n            }\n            const weatherData = await response.json();\n            console.log(\"[weatherChartTool] Weather data:\", weatherData);\n            return {\n                type: \"weatherChart\",\n                props: {\n                    lat,\n                    lon,\n                    units,\n                    initialData: weatherData\n                }\n            };\n        } catch (error) {\n            console.error(\"[weatherChartTool] Error:\", error);\n            throw error;\n        }\n    }\n});\n// Export all tools with their names\nconst tools = {\n    budgetSelector: budgetSelectorTool,\n    preferenceSelector: preferenceSelectorTool,\n    datePicker: datePickerTool,\n    languageSelector: languageSelectorTool,\n    transportSelector: transportSelectorTool,\n    placeCard: placeCardTool,\n    carousel: carouselTool,\n    detailsCard: detailsCardTool,\n    weatherChart: weatherChartTool\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./ai/tools.ts\n");

/***/ })

});