"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/chat",{

/***/ "(middleware)/./ai/tools.ts":
/*!*********************!*\
  !*** ./ai/tools.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   budgetSelectorTool: () => (/* binding */ budgetSelectorTool),\n/* harmony export */   carouselTool: () => (/* binding */ carouselTool),\n/* harmony export */   currencyConverterTool: () => (/* binding */ currencyConverterTool),\n/* harmony export */   datePickerTool: () => (/* binding */ datePickerTool),\n/* harmony export */   detailsCardTool: () => (/* binding */ detailsCardTool),\n/* harmony export */   languageSelectorTool: () => (/* binding */ languageSelectorTool),\n/* harmony export */   placeCardTool: () => (/* binding */ placeCardTool),\n/* harmony export */   preferenceSelectorTool: () => (/* binding */ preferenceSelectorTool),\n/* harmony export */   quickResponseTool: () => (/* binding */ quickResponseTool),\n/* harmony export */   savedPlacesListTool: () => (/* binding */ savedPlacesListTool),\n/* harmony export */   stageProgressTool: () => (/* binding */ stageProgressTool),\n/* harmony export */   tools: () => (/* binding */ tools),\n/* harmony export */   transportSelectorTool: () => (/* binding */ transportSelectorTool),\n/* harmony export */   weatherChartTool: () => (/* binding */ weatherChartTool)\n/* harmony export */ });\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ai */ \"(middleware)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(middleware)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"(middleware)/./managers/types.ts\");\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/places-utils */ \"(middleware)/./utils/places-utils.ts\");\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/stage-manager */ \"(middleware)/./managers/stage-manager.ts\");\n/* harmony import */ var _utils_currency_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/currency-utils */ \"(middleware)/./utils/currency-utils.ts\");\n\n\n\n\n\n\n// Tool for Budget Selection\nconst budgetSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display budget level options for the trip. Use this when discussing trip costs or when the user wants to set their budget preference.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        currentBudget: zod__WEBPACK_IMPORTED_MODULE_5__.z.enum([\n            \"$\",\n            \"$$\",\n            \"$$$\",\n            \"$$$$\"\n        ]).optional()\n    }),\n    execute: async function({ currentBudget }) {\n        return {\n            type: \"budgetSelector\",\n            props: {\n                currentBudget: currentBudget\n            }\n        };\n    }\n});\n// Tool for Travel Preferences\nconst preferenceSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display options for selecting travel preferences and interests.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        currentPreferences: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.nativeEnum(_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference)).optional()\n    }),\n    execute: async function({ currentPreferences }) {\n        return {\n            type: \"preferenceSelector\",\n            props: {\n                currentPreferences: currentPreferences\n            }\n        };\n    }\n});\n// Tool for Date Selection\nconst datePickerTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display a date picker for selecting travel dates. Only provide dates in the parameters if you want to confirm a change. Otherwise, call without parameters to just show the picker.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        startDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    }),\n    execute: async function({ startDate, endDate }) {\n        return {\n            type: \"datePicker\",\n            props: {\n                startDate,\n                endDate\n            }\n        };\n    }\n});\n// Tool for Language Selection\nconst languageSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display language selection options.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        currentLanguage: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    }),\n    execute: async function({ currentLanguage }) {\n        return {\n            type: \"languageSelector\",\n            props: {\n                currentLanguage: currentLanguage\n            }\n        };\n    }\n});\n// Tool for Transport Selection\nconst transportSelectorTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display transport method selection options. Use this when discussing transportation options for the trip, such as flights, trains, or car rentals.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        selectedMethod: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    }),\n    execute: async function({ selectedMethod }) {\n        return {\n            type: \"transportSelector\",\n            props: {\n                selectedMethod\n            }\n        };\n    }\n});\n// Tool for Place Display\nconst placeCardTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: 'Display information about one specific place. Use this whenever the user explicitly asks for ONE place, whether by name or type (e.g., \"show me one theatre\", \"show me one restaurant\", \"show me The Little Mermaid statue\").',\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        searchText: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().describe(\"The name or description of the place to search for\"),\n        location: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            latitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),\n            longitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number()\n        }),\n        destination: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().describe(\"Name of the destination city\")\n    }),\n    execute: async function({ searchText, location, destination }) {\n        try {\n            const place = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_1__.searchPlaceByText)(searchText, location, destination);\n            if (!place) {\n                console.error(\"No place found for search text:\", searchText);\n                return {\n                    type: \"placeCard\",\n                    props: {\n                        place: null\n                    },\n                    error: \"Could not find a unique place. Try searching for something else.\"\n                };\n            }\n            return {\n                type: \"placeCard\",\n                props: {\n                    place\n                }\n            };\n        } catch (error) {\n            console.error(\"Error searching for place:\", error);\n            return {\n                type: \"placeCard\",\n                props: {\n                    place: null\n                }\n            };\n        }\n    }\n});\n// Tool for Place Carousel\nconst carouselTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display multiple places in a carousel based on preferences or specific place types and automatically save them into savedPlaces.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        preferences: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.nativeEnum(_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference)).optional(),\n        placeType: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional().describe(\"Specific place type to search for\"),\n        location: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            latitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),\n            longitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number()\n        }),\n        maxResults: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional().default(5)\n    }),\n    execute: async function({ preferences, placeType, location, maxResults }) {\n        try {\n            let places = [];\n            if (preferences && preferences.length > 0) {\n                // Use our existing function to get places by preference\n                places = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_1__.fetchPlaces)(location.latitude, location.longitude, preferences, maxResults);\n            } else if (placeType) {\n                // Search by specific place type\n                places = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_1__.fetchPlaces)(location.latitude, location.longitude, undefined, maxResults, [\n                    placeType\n                ]);\n            }\n            return {\n                type: \"carousel\",\n                props: {\n                    places\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in carousel tool:\", error);\n            return {\n                type: \"carousel\",\n                props: {\n                    places: []\n                }\n            };\n        }\n    }\n});\n// Tool for Details Card\nconst detailsCardTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display travel details summary. Use this when the user wants to view a summary of their trip details, including destination, dates, preferences, budget, and more.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        content: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            dates: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                startDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n                endDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string()\n            }).optional(),\n            preferences: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional(),\n            budget: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            language: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            transport: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional(),\n            dining: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional()\n        })\n    }),\n    execute: async function({ content }) {\n        return {\n            type: \"detailsCard\",\n            props: {\n                content\n            }\n        };\n    }\n});\nconst weatherChartTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display historical weather data including temperature and precipitation for a location.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        lat: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().min(-90).max(90).describe(\"Latitude of the location\"),\n        lon: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().min(-180).max(180).describe(\"Longitude of the location\"),\n        city: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().describe(\"City name for display\"),\n        startDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().describe(\"Trip start date in DD/MM/YYYY format\"),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().describe(\"Trip end date in DD/MM/YYYY format\"),\n        units: zod__WEBPACK_IMPORTED_MODULE_5__.z.enum([\n            \"us\",\n            \"uk\",\n            \"metric\"\n        ]).optional().default(\"metric\")\n    }),\n    execute: async function({ lat, lon, city, startDate, endDate, units = \"metric\" }) {\n        // Parse DD/MM/YYYY dates\n        const [startDay, startMonth, startYear] = startDate.split(\"/\").map(Number);\n        const [endDay, endMonth, endYear] = endDate.split(\"/\").map(Number);\n        // Format dates for API (YYYY-MM-DD)\n        const formattedStartDate = `${startYear}-${String(startMonth).padStart(2, \"0\")}-${String(startDay).padStart(2, \"0\")}`;\n        const formattedEndDate = `${endYear}-${String(endMonth).padStart(2, \"0\")}-${String(endDay).padStart(2, \"0\")}`;\n        // Calculate number of days in the range\n        const start = new Date(formattedStartDate);\n        const end = new Date(formattedEndDate);\n        const daysDiff = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n        // Calculate how many extra days we need for 30 days total\n        const extraDays = Math.max(0, 30 - daysDiff);\n        const daysToAddBefore = Math.floor(extraDays / 2);\n        const daysToAddAfter = extraDays - daysToAddBefore;\n        // Extend dates to get 30 days\n        start.setDate(start.getDate() - daysToAddBefore);\n        end.setDate(end.getDate() + daysToAddAfter);\n        // Format extended dates for API\n        const extendedStartDate = start.toISOString().split(\"T\")[0];\n        const extendedEndDate = end.toISOString().split(\"T\")[0];\n        console.log(\"[weatherChartTool] Date conversion:\", {\n            originalDate: startDate,\n            originalEndDate: endDate,\n            formattedStartDate: extendedStartDate,\n            formattedEndDate: extendedEndDate,\n            totalDays: 30,\n            originalRange: daysDiff,\n            addedBefore: daysToAddBefore,\n            addedAfter: daysToAddAfter\n        });\n        return {\n            type: \"weatherChart\",\n            props: {\n                lat,\n                lon,\n                city,\n                startDate: extendedStartDate,\n                endDate: extendedEndDate,\n                units\n            }\n        };\n    }\n});\nconst savedPlacesListTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: 'Display all currently saved places in a list view. When user asks to see saved places (e.g. \"show me my saved places\", \"what places have I saved\", etc), pass ALL places from the savedPlaces parameter to this tool.',\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        savedPlaces: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            id: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            displayName: zod__WEBPACK_IMPORTED_MODULE_5__.z.union([\n                zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                    text: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n                    languageCode: zod__WEBPACK_IMPORTED_MODULE_5__.z.string()\n                }),\n                zod__WEBPACK_IMPORTED_MODULE_5__.z.string()\n            ]).optional(),\n            primaryType: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            location: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                latitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),\n                longitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number()\n            }).optional(),\n            formattedAddress: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            photos: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                name: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n                widthPx: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n                heightPx: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n                authorAttributions: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                    displayName: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n                    uri: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n                    photoUri: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n                })).optional() // Make optional\n            })).optional().default([]),\n            primaryTypeDisplayName: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                text: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n                languageCode: zod__WEBPACK_IMPORTED_MODULE_5__.z.string()\n            }).optional() // Already optional\n        }))\n    }),\n    execute: async function({ savedPlaces }) {\n        console.log(\"[savedPlacesListTool] Executing with places:\", savedPlaces?.map((p)=>({\n                id: p.id,\n                hasPhotos: Boolean(p.photos?.length),\n                photoCount: p.photos?.length,\n                firstPhoto: p.photos?.[0],\n                primaryTypeDisplayName: p.primaryTypeDisplayName\n            })));\n        // Ensure we're passing the full array of places\n        if (!Array.isArray(savedPlaces)) {\n            console.error(\"[savedPlacesListTool] savedPlaces is not an array:\", savedPlaces);\n            return {\n                type: \"savedPlacesList\",\n                props: {\n                    places: []\n                }\n            };\n        }\n        // Make sure we pass the complete place objects\n        return {\n            type: \"savedPlacesList\",\n            props: {\n                places: savedPlaces.map((place)=>({\n                        ...place,\n                        photos: place.photos || [],\n                        primaryTypeDisplayName: place.primaryTypeDisplayName || {\n                            text: \"\",\n                            languageCode: \"en\"\n                        }\n                    })),\n                onRemove: undefined // Make it explicit that we're not handling removal here\n            }\n        };\n    }\n});\n// Simplify the stage progress tool to only include nextStage\nconst stageProgressTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Update the current planning stage only when certain criteria are met.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        nextStage: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().min(1).max(5),\n        currentStage: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().min(1).max(5),\n        travelDetails: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            location: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n                latitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),\n                longitude: zod__WEBPACK_IMPORTED_MODULE_5__.z.number()\n            }),\n            startDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            endDate: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            preferences: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()),\n            budget: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            language: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            transport: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string())\n        }),\n        metrics: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            totalPrompts: zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),\n            savedPlacesCount: zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),\n            isPaid: zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean(),\n            paymentReference: zod__WEBPACK_IMPORTED_MODULE_5__.z.string()\n        })\n    }),\n    execute: async function({ nextStage, currentStage, travelDetails, metrics }) {\n        // console.log('[StageProgressTool] Executing:', { nextStage, currentStage, metrics });\n        const validationResult = (0,_managers_stage_manager__WEBPACK_IMPORTED_MODULE_2__.validateStageProgression)(currentStage, nextStage, travelDetails);\n        if (!validationResult.canProgress) {\n            console.log(\"[StageProgressTool] Validation failed:\", validationResult.missingRequirements);\n            return {\n                type: \"stageProgress\",\n                status: \"error\",\n                props: {\n                    nextStage: currentStage,\n                    error: `Cannot progress to stage ${nextStage}. Missing requirements: ${validationResult.missingRequirements.join(\", \")}`\n                }\n            };\n        }\n        return {\n            type: \"stageProgress\",\n            status: \"success\",\n            props: {\n                nextStage\n            }\n        };\n    }\n});\n// Tool for Quick Response\nconst quickResponseTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: `Present users with exactly 3 contextually relevant quick response options.\n    \n    CRITICAL RULES:\n    1. YOU MUST ALWAYS RETURN EXACTLY 3 OPTIONS - NO EXCEPTIONS\n    2. Keep options concise and action-oriented\n    3. Options must make sense as natural chat responses\n    4. Each option should be 2-6 words\n    \n    Stage-specific guidelines:\n    Stage 1: Focus on parameter updates (e.g., \\\"Update my travel dates\\\", \\\"Change my budget\\\")\n    Stage 2: Focus on city info (e.g., \\\"Check the weather\\\", \\\"See currency rates\\\")\n    Stage 3: Focus on places (e.g., \\\"Show me museums\\\", \\\"Find restaurants\\\")\n    Stage 4: Focus on itinerary (e.g., \\\"Add more activities\\\", \\\"Review the plan\\\")\n    Stage 5: Focus on completion (e.g., \\\"Download itinerary\\\", \\\"Share with friends\\\")`,\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        responses: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).length(3).describe(\"Exactly 3 quick response options\")\n    }),\n    execute: async function({ responses }) {\n        // console.log('[QuickResponse Tool] Executing with responses:', responses);\n        if (!Array.isArray(responses) || responses.length !== 3) {\n            console.error(\"[QuickResponse Tool] Invalid responses:\", responses);\n            throw new Error(\"Must provide exactly 3 responses\");\n        }\n        // Validate each response\n        responses.forEach((response, index)=>{\n            if (!response || typeof response !== \"string\" || response.trim().length === 0) {\n                throw new Error(`Invalid response at index ${index}`);\n            }\n        });\n        console.log(\"[QuickResponse Tool] Returning valid responses\");\n        return {\n            type: \"quickResponse\",\n            props: {\n                responses\n            }\n        };\n    }\n});\n// Tool for Currency Conversion\nconst currencyConverterTool = (0,ai__WEBPACK_IMPORTED_MODULE_4__.tool)({\n    description: \"Display currency conversion rates for the destination country. Use this when discussing costs, budgets, or when the user wants to understand currency exchange rates.\",\n    parameters: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        amount: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional().describe(\"Amount to convert in the destination currency\"),\n        destination: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().describe(\"Destination country or city\")\n    }),\n    execute: async function({ amount = 100, destination }) {\n        if (!destination) {\n            throw new Error(\"Destination is required for currency conversion\");\n        }\n        const baseCurrency = (0,_utils_currency_utils__WEBPACK_IMPORTED_MODULE_3__.getCurrencyFromCountry)(destination);\n        return {\n            type: \"currencyConverter\",\n            props: {\n                baseCurrency,\n                baseAmount: amount,\n                defaultCurrencies: [\n                    \"USD\",\n                    \"EUR\",\n                    \"GBP\",\n                    \"CNY\",\n                    \"JPY\"\n                ]\n            }\n        };\n    }\n});\n// Export all tools with their names\nconst tools = {\n    budgetSelector: budgetSelectorTool,\n    preferenceSelector: preferenceSelectorTool,\n    datePicker: datePickerTool,\n    languageSelector: languageSelectorTool,\n    transportSelector: transportSelectorTool,\n    placeCard: placeCardTool,\n    carousel: carouselTool,\n    detailsCard: detailsCardTool,\n    weatherChart: weatherChartTool,\n    savedPlacesList: savedPlacesListTool,\n    stageProgress: stageProgressTool,\n    quickResponse: quickResponseTool,\n    currencyConverter: currencyConverterTool\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./ai/tools.ts\n");

/***/ })

});