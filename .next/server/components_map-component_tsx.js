"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_map-component_tsx";
exports.ids = ["components_map-component_tsx"];
exports.modules = {

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/travel-info-utils */ \"./utils/travel-info-utils.ts\");\n\n\n\n\n\nconst MapComponent = ({ city, apiKey })=>{\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scriptLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const geometryLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Track active routes by fromId-toId\n    const activeRoutesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!apiKey) return;\n        const loadGoogleMapsScript = ()=>{\n            if (window.google?.maps) {\n                setupMapInstance();\n            } else if (!scriptLoadedRef.current && !document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]')) {\n                const script = document.createElement(\"script\");\n                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,marker,geometry&v=beta&callback=setupMapInstance`;\n                script.async = true;\n                script.defer = true;\n                document.head.appendChild(script);\n                scriptLoadedRef.current = true;\n            }\n        };\n        // Initial map setup and geometry library check\n        async function setupMapInstance() {\n            if (!mapRef.current || mapInstanceRef.current) return;\n            try {\n                // Use the city prop directly, fallback to session storage if needed\n                let targetCity = city;\n                if (!targetCity) {\n                    const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n                    if (sessionData) {\n                        const parsed = JSON.parse(sessionData);\n                        targetCity = parsed.city;\n                    }\n                }\n                if (!targetCity) {\n                    console.error(\"No city specified\");\n                    setIsLoading(false);\n                    return;\n                }\n                const location = await getLocation(targetCity);\n                const map = new window.google.maps.Map(mapRef.current, {\n                    zoom: 12,\n                    center: location,\n                    mapId: \"2d604af04a7c7fa8\"\n                });\n                mapInstanceRef.current = map;\n                setMap(map);\n                markersRef.current = new Map();\n                // Initialize the InfoWindow\n                infoWindowRef.current = new window.google.maps.InfoWindow({\n                    maxWidth: 300,\n                    pixelOffset: new window.google.maps.Size(0, -30)\n                });\n                setIsLoading(false);\n                // Check if geometry library is loaded\n                if (isGeometryReady()) {\n                    geometryLoadedRef.current = true;\n                } else {\n                    // Poll for geometry library\n                    const checkGeometry = setInterval(()=>{\n                        if (isGeometryReady()) {\n                            geometryLoadedRef.current = true;\n                            clearInterval(checkGeometry);\n                        }\n                    }, 100);\n                    // Clear interval after 10 seconds to prevent infinite polling\n                    setTimeout(()=>clearInterval(checkGeometry), 10000);\n                }\n            } catch (error) {\n                console.error(\"Error setting up map:\", error);\n                setIsLoading(false);\n            }\n        }\n        window.setupMapInstance = setupMapInstance;\n        loadGoogleMapsScript();\n        return ()=>{\n            delete window.setupMapInstance;\n        };\n    }, [\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const setupMapFeatures = async ()=>{\n            if (!mapInstanceRef.current) return;\n            try {\n                const location = await getLocation(city);\n                // Update existing map instead of creating new one\n                mapInstanceRef.current.setCenter(location);\n                mapInstanceRef.current.setZoom(12);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error updating map features:\", error);\n                setIsLoading(false);\n            }\n        };\n        setupMapFeatures();\n    }, [\n        city\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const initializeMap = async ()=>{\n            // Wait for map to be idle before restoring markers\n            await new Promise((resolve)=>{\n                google.maps.event.addListenerOnce(map, \"idle\", ()=>{\n                    resolve();\n                });\n            });\n            const savedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            console.log(\"Restoring markers for saved places:\", savedPlaces.length);\n            savedPlaces.forEach((place)=>{\n                if (place.location) {\n                    window.addPlaceToMap?.({\n                        latitude: place.location.latitude,\n                        longitude: place.location.longitude,\n                        title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n                        place: place\n                    });\n                }\n            });\n        };\n        initializeMap();\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    marker.map = null;\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    google.maps.event.clearInstanceListeners(marker);\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                const markerId = data.place?.id || data.title || String(Date.now());\n                const pinElement = new window.google.maps.marker.PinElement({\n                    background: \"#FF4444\",\n                    borderColor: \"#CC0000\",\n                    glyphColor: \"#FFFFFF\"\n                });\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(data.place);\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places));\n                }\n                // Ensure the marker is properly added to the map\n                marker.map = mapInstanceRef.current;\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        // Close any existing InfoWindow\n                        infoWindowRef.current?.close();\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current && mapInstanceRef.current) {\n                            const position = marker.position;\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.setPosition(position);\n                            infoWindowRef.current.open(mapInstanceRef.current);\n                        }\n                    }\n                });\n                markersRef.current.set(markerId, marker);\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        mapInstanceRef.current\n    ]); // Only depend on the map instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                window.google?.maps?.event?.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const handlePlacesChanged = async (event)=>{\n            const e = event;\n            console.log(\"[MapComponent] Places changed:\", e.detail);\n            // Clear existing markers\n            markersRef.current.forEach((marker)=>{\n                marker.map = null;\n            });\n            markersRef.current.clear();\n            // Add new markers\n            const places = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            places.forEach((place)=>{\n                if (place.location) {\n                    const marker = createMarker(place);\n                    if (marker) {\n                        marker.map = map;\n                        markersRef.current.set(place.id, marker);\n                    }\n                }\n            });\n        };\n        window.addEventListener(\"places-changed\", handlePlacesChanged);\n        return ()=>{\n            window.removeEventListener(\"places-changed\", handlePlacesChanged);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const handleTravelInfoDisplay = async (event)=>{\n            const e = event;\n            const { fromId, toId } = e.detail;\n            const routeKey = `${fromId}-${toId}`;\n            // Clear existing route if any\n            const existingRoute = activeRoutesRef.current.get(routeKey);\n            if (existingRoute) {\n                existingRoute.setMap(null);\n                activeRoutesRef.current.delete(routeKey);\n            }\n            const fromPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(fromId);\n            const toPlace = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaceById(toId);\n            if (fromPlace?.dayIndex !== undefined && toPlace) {\n                const color = getRouteColor(fromPlace.dayIndex);\n                const polyline = await drawRoute([\n                    fromPlace,\n                    toPlace\n                ], routeKey, color);\n                if (polyline) {\n                    activeRoutesRef.current.set(routeKey, polyline);\n                }\n            }\n        };\n        const handleTravelInfoHide = (event)=>{\n            const e = event;\n            const { fromId, toId } = e.detail;\n            const routeKey = `${fromId}-${toId}`;\n            // Remove route from map and tracking\n            const route = activeRoutesRef.current.get(routeKey);\n            if (route) {\n                route.setMap(null);\n                activeRoutesRef.current.delete(routeKey);\n            }\n        };\n        window.addEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n        window.addEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        return ()=>{\n            // Clean up all routes when component unmounts\n            activeRoutesRef.current.forEach((route)=>route.setMap(null));\n            activeRoutesRef.current.clear();\n            window.removeEventListener(\"travelinfo-displayed\", handleTravelInfoDisplay);\n            window.removeEventListener(\"travelinfo-hidden\", handleTravelInfoHide);\n        };\n    }, [\n        mapInstanceRef.current\n    ]);\n    const drawRoute = async (places, routeKey, color)=>{\n        console.log(`[MapComponent] Drawing route between:`, {\n            from: places[0]?.displayName,\n            to: places[1]?.displayName\n        });\n        if (!places || places.length !== 2 || !mapInstanceRef.current || !isGeometryReady()) {\n            console.log(\"[MapComponent] Not ready to draw route:\", {\n                places: places?.length,\n                mapReady: !!mapInstanceRef.current,\n                geometryReady: isGeometryReady()\n            });\n            return;\n        }\n        const [place1, place2] = places;\n        if (!place1.location || !place2.location) {\n            console.warn(\"[MapComponent] Missing location for place:\", {\n                place1Name: place1.name,\n                place2Name: place2.name\n            });\n            return;\n        }\n        try {\n            const info = await _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.getTravelInfo(place1, place2);\n            if (!info || !info.legPolyline) {\n                console.warn(\"[MapComponent] No route info available between places\");\n                return;\n            }\n            const path = google.maps.geometry.encoding.decodePath(info.legPolyline);\n            const polyline = new google.maps.Polyline({\n                path,\n                strokeColor: color,\n                strokeOpacity: 1.0,\n                strokeWeight: 3,\n                map: mapInstanceRef.current\n            });\n            return polyline;\n        } catch (error) {\n            console.error(\"[MapComponent] Error drawing route:\", error);\n        }\n    };\n    const getPhotoUrl = (photo, index)=>{\n        return photo.getURI?.() || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? `https://places.googleapis.com/v1/${place.photos[0].name}/media?maxHeightPx=200&maxWidthPx=300&key=${apiKey}` : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return `\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\n                ${photoUrl ? `\n                    <div style=\"height: 150px; width: 100%;\">\n                        <img src=\"${photoUrl}\" \n                            alt=\"${placeTitle}\"\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\n                        />\n                    </div>\n                ` : \"\"}\n\n                <div class=\"p-3\">\n                    <div class=\"flex justify-between items-start\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\n                            ${placeTitle}\n                        </h3>\n                    </div>\n                    ${place.primaryTypeDisplayName ? `<div class=\"text-sm text-gray-600 mb-1\">${place.primaryTypeDisplayName.text}</div>` : \"\"}\n                    ${place.formattedAddress ? `<p class=\"text-sm text-gray-500\">${place.formattedAddress}</p>` : \"\"}\n                </div>\n            </div>\n        `;\n    };\n    const isGeometryReady = ()=>{\n        return !!(window.google?.maps?.geometry?.encoding?.decodePath && typeof window.google.maps.geometry.encoding.decodePath === \"function\");\n    };\n    const getLocation = async (city)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject)=>{\n            geocoder.geocode({\n                address: city\n            }, (results, status)=>{\n                if (status !== \"OK\" || !results?.[0]?.geometry?.location) {\n                    console.error(\"Geocoding failed:\", status);\n                    reject(\"Could not find location for \" + city);\n                } else {\n                    resolve(results[0].geometry.location);\n                }\n            });\n        });\n    };\n    const getRouteColor = (dayIndex)=>{\n        const colors = [\n            \"#2196F3\",\n            \"#9C27B0\",\n            \"#795548\",\n            \"#FF9800\",\n            \"#009688\",\n            \"#E91E63\",\n            \"#673AB7\",\n            \"#3F51B5\",\n            \"#00BCD4\",\n            \"#4CAF50\" // Green\n        ];\n        return colors[dayIndex % colors.length];\n    };\n    const createMarker = (place)=>{\n        if (!place.location) {\n            console.warn(\"[MapComponent] Cannot create marker: place missing location\", place);\n            return null;\n        }\n        const pinElement = new window.google.maps.marker.PinElement({\n            background: \"#FF4444\",\n            borderColor: \"#CC0000\",\n            glyphColor: \"#FFFFFF\"\n        });\n        const marker = new google.maps.marker.AdvancedMarkerElement({\n            position: {\n                lat: place.location.latitude,\n                lng: place.location.longitude\n            },\n            title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n            content: pinElement.element,\n            gmpDraggable: false\n        });\n        marker.addListener(\"gmp-click\", ()=>{\n            // Close any existing InfoWindow\n            infoWindowRef.current?.close();\n            window.currentInfoWindowMarker = {\n                markerId: place.id,\n                marker: marker\n            };\n            const content = createPlaceInfoWindowContent(place, place.id);\n            if (content && infoWindowRef.current && mapInstanceRef.current) {\n                const position = marker.position;\n                infoWindowRef.current.setContent(content);\n                infoWindowRef.current.setPosition(position);\n                infoWindowRef.current.open(mapInstanceRef.current);\n            }\n        });\n        return marker;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 663,\n                columnNumber: 13\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 bg-red-500 text-white p-2 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 665,\n                columnNumber: 17\n            }, undefined),\n            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"\n                }, void 0, false, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 671,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 670,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 662,\n        columnNumber: 9\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapComponent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNEO29CQUFJQyxXQUFVOzs7Ozs7Ozs7Ozs7Ozs7OztBQUtuQztBQUVBLGlFQUFlek0sWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYXZlbC1yaXp6Ly4vY29tcG9uZW50cy9tYXAtY29tcG9uZW50LnRzeD8zNDBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGxhY2UsIHNhdmVkUGxhY2VzTWFuYWdlciwgc2VhcmNoUGxhY2VCeVRleHQgfSBmcm9tICdAL3V0aWxzL3BsYWNlcy11dGlscyc7XG5pbXBvcnQgeyBTRVNTSU9OX0NPTkZJRyB9IGZyb20gJy4uL3V0aWxzL3Nlc3Npb24tbWFuYWdlcic7XG5pbXBvcnQgeyB0cmF2ZWxJbmZvTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL3RyYXZlbC1pbmZvLXV0aWxzJztcblxuaW50ZXJmYWNlIE1hcENvbXBvbmVudFByb3BzIHtcbiAgICBjaXR5OiBzdHJpbmc7XG4gICAgYXBpS2V5OiBzdHJpbmc7XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgc2V0dXBNYXBJbnN0YW5jZTogKCkgPT4gdm9pZDtcbiAgICAgICAgY3VycmVudFNsaWRlOiBudW1iZXI7XG4gICAgICAgIGN1cnJlbnRJbmZvV2luZG93PzogZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdztcbiAgICAgICAgdXBkYXRlQ2Fyb3VzZWw6ICgpID0+IHZvaWQ7XG4gICAgICAgIG5leHRTbGlkZTogKCkgPT4gdm9pZDtcbiAgICAgICAgcHJldlNsaWRlOiAoKSA9PiB2b2lkO1xuICAgICAgICBnb1RvU2xpZGU6IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuICAgICAgICBnb29nbGU6IHR5cGVvZiBnb29nbGU7XG4gICAgICAgIHJlbW92ZVBsYWNlRnJvbU1hcD86ICh0aXRsZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgICAgICBjdXJyZW50SW5mb1dpbmRvd01hcmtlcj86IHtcbiAgICAgICAgICAgIG1hcmtlcklkOiBzdHJpbmc7XG4gICAgICAgICAgICBtYXJrZXI6IGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIGFkZFBsYWNlVG9NYXA/OiAocGxhY2U6IHsgXG4gICAgICAgICAgICBsYXRpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIGxvbmdpdHVkZTogbnVtYmVyOyBcbiAgICAgICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICAgICAgcGxhY2U/OiBQbGFjZTtcbiAgICAgICAgfSkgPT4gdm9pZDtcbiAgICAgICAgY2xlYXJQbGFjZU1hcmtlcnM/OiAoKSA9PiB2b2lkO1xuICAgICAgICBzYXZlZFBsYWNlczogUGxhY2VbXTtcbiAgICAgICAgZ2V0U2F2ZWRQbGFjZXM/OiAoKSA9PiBQbGFjZVtdO1xuICAgIH1cbn1cblxuLy8gTW9kaWZ5IG1hcC1jb21wb25lbnQudHN4IHRvIGV4cG9zZSBhIHByb3BlciBnbG9iYWwgaW50ZXJmYWNlXG4vLyBBdCB0aGUgdG9wIG9mIGZpbGVcbmludGVyZmFjZSBTYXZlZFBsYWNlc01hbmFnZXIge1xuICAgIGFkZFBsYWNlOiAocGxhY2U6IFBsYWNlKSA9PiB2b2lkO1xuICAgIHJlbW92ZVBsYWNlOiAocGxhY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGdldFBsYWNlczogKCkgPT4gUGxhY2VbXTtcbiAgICBoYXNQbGFjZTogKHBsYWNlSWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcbn1cblxuLy8gRXhwb3NlIHR5cGUtc2FmZSBnbG9iYWwgbWV0aG9kc1xuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBzYXZlZFBsYWNlc01hbmFnZXI6IFNhdmVkUGxhY2VzTWFuYWdlcjtcbiAgICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBuYW1lc3BhY2UgZ29vZ2xlLm1hcHMge1xuICAgICAgICBpbnRlcmZhY2UgTWFya2VyTGlicmFyeSB7XG4gICAgICAgICAgICBBZHZhbmNlZE1hcmtlckVsZW1lbnQ6IHR5cGVvZiBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50O1xuICAgICAgICAgICAgUGluRWxlbWVudDogdHlwZW9mIGdvb2dsZS5tYXBzLm1hcmtlci5QaW5FbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzcGFjZSBnZW9tZXRyeSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UgZW5jb2Rpbmcge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlY29kZVBhdGgoZW5jb2RlZFBhdGg6IHN0cmluZyk6IGdvb2dsZS5tYXBzLkxhdExuZ1tdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmNvbnN0IE1hcENvbXBvbmVudDogUmVhY3QuRkM8TWFwQ29tcG9uZW50UHJvcHM+ID0gKHsgY2l0eSwgYXBpS2V5IH0pID0+IHtcbiAgICBjb25zdCBtYXBSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICAgIGNvbnN0IG1hcEluc3RhbmNlUmVmID0gdXNlUmVmPGdvb2dsZS5tYXBzLk1hcCB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFttYXAsIHNldE1hcF0gPSB1c2VTdGF0ZTxnb29nbGUubWFwcy5NYXAgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCBzY3JpcHRMb2FkZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGdlb21ldHJ5TG9hZGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBbc2VsZWN0ZWRQbGFjZSwgc2V0U2VsZWN0ZWRQbGFjZV0gPSB1c2VTdGF0ZTxQbGFjZSB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtzYXZlZFBsYWNlcywgc2V0U2F2ZWRQbGFjZXNdID0gdXNlU3RhdGU8TWFwPHN0cmluZywgUGxhY2U+PihuZXcgTWFwKCkpO1xuICAgIGNvbnN0IG1hcmtlcnNSZWYgPSB1c2VSZWY8TWFwPHN0cmluZywgZ29vZ2xlLm1hcHMubWFya2VyLkFkdmFuY2VkTWFya2VyRWxlbWVudD4+KG5ldyBNYXAoKSk7XG4gICAgY29uc3QgaW5mb1dpbmRvd1JlZiA9IHVzZVJlZjxnb29nbGUubWFwcy5JbmZvV2luZG93IHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW21hcmtlckNvdW50LCBzZXRNYXJrZXJDb3VudF0gPSB1c2VTdGF0ZSgwKTtcbiAgICAvLyBUcmFjayBhY3RpdmUgcm91dGVzIGJ5IGZyb21JZC10b0lkXG4gICAgY29uc3QgYWN0aXZlUm91dGVzUmVmID0gdXNlUmVmPE1hcDxzdHJpbmcsIGdvb2dsZS5tYXBzLlBvbHlsaW5lPj4obmV3IE1hcCgpKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghYXBpS2V5KSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbG9hZEdvb2dsZU1hcHNTY3JpcHQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAod2luZG93Lmdvb2dsZT8ubWFwcykge1xuICAgICAgICAgICAgICAgIHNldHVwTWFwSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNjcmlwdExvYWRlZFJlZi5jdXJyZW50ICYmICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHRbc3JjKj1cIm1hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanNcIl0nKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBgaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT0ke2FwaUtleX0mbGlicmFyaWVzPXBsYWNlcyxtYXJrZXIsZ2VvbWV0cnkmdj1iZXRhJmNhbGxiYWNrPXNldHVwTWFwSW5zdGFuY2VgO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0TG9hZGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEluaXRpYWwgbWFwIHNldHVwIGFuZCBnZW9tZXRyeSBsaWJyYXJ5IGNoZWNrXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIHNldHVwTWFwSW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAoIW1hcFJlZi5jdXJyZW50IHx8IG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGNpdHkgcHJvcCBkaXJlY3RseSwgZmFsbGJhY2sgdG8gc2Vzc2lvbiBzdG9yYWdlIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRDaXR5ID0gY2l0eTtcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldENpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkRhdGEgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHNlc3Npb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENpdHkgPSBwYXJzZWQuY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0Q2l0eSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBjaXR5IHNwZWNpZmllZCcpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBhd2FpdCBnZXRMb2NhdGlvbih0YXJnZXRDaXR5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgd2luZG93Lmdvb2dsZS5tYXBzLk1hcChtYXBSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgICAgICB6b29tOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBsb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbWFwSWQ6ICcyZDYwNGFmMDRhN2M3ZmE4J1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFwSW5zdGFuY2VSZWYuY3VycmVudCA9IG1hcDtcbiAgICAgICAgICAgICAgICBzZXRNYXAobWFwKTtcbiAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBJbmZvV2luZG93XG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50ID0gbmV3IHdpbmRvdy5nb29nbGUubWFwcy5JbmZvV2luZG93KHtcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxPZmZzZXQ6IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMuU2l6ZSgwLCAtMzApXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZ2VvbWV0cnkgbGlicmFyeSBpcyBsb2FkZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNHZW9tZXRyeVJlYWR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnlMb2FkZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9sbCBmb3IgZ2VvbWV0cnkgbGlicmFyeVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGVja0dlb21ldHJ5ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzR2VvbWV0cnlSZWFkeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnlMb2FkZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0dlb21ldHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgaW50ZXJ2YWwgYWZ0ZXIgMTAgc2Vjb25kcyB0byBwcmV2ZW50IGluZmluaXRlIHBvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjbGVhckludGVydmFsKGNoZWNrR2VvbWV0cnkpLCAxMDAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nIHVwIG1hcDonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5zZXR1cE1hcEluc3RhbmNlID0gc2V0dXBNYXBJbnN0YW5jZTtcbiAgICAgICAgbG9hZEdvb2dsZU1hcHNTY3JpcHQoKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5zZXR1cE1hcEluc3RhbmNlO1xuICAgICAgICB9O1xuICAgIH0sIFthcGlLZXldKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghbWFwSW5zdGFuY2VSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHNldHVwTWFwRmVhdHVyZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGF3YWl0IGdldExvY2F0aW9uKGNpdHkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBtYXAgaW5zdGVhZCBvZiBjcmVhdGluZyBuZXcgb25lXG4gICAgICAgICAgICAgICAgbWFwSW5zdGFuY2VSZWYuY3VycmVudC5zZXRDZW50ZXIobG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIG1hcEluc3RhbmNlUmVmLmN1cnJlbnQuc2V0Wm9vbSgxMik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgbWFwIGZlYXR1cmVzOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNldHVwTWFwRmVhdHVyZXMoKTtcbiAgICB9LCBbY2l0eV0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFtYXApIHJldHVybjtcblxuICAgICAgICBjb25zdCBpbml0aWFsaXplTWFwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gV2FpdCBmb3IgbWFwIHRvIGJlIGlkbGUgYmVmb3JlIHJlc3RvcmluZyBtYXJrZXJzXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyT25jZShtYXAsICdpZGxlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc2F2ZWRQbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVzdG9yaW5nIG1hcmtlcnMgZm9yIHNhdmVkIHBsYWNlczonLCBzYXZlZFBsYWNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzYXZlZFBsYWNlcy5mb3JFYWNoKHBsYWNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2UubG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZFBsYWNlVG9NYXA/Lih7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogcGxhY2UubG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHBsYWNlLmxvY2F0aW9uLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnID8gcGxhY2UuZGlzcGxheU5hbWUgOiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2U6IHBsYWNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemVNYXAoKTtcbiAgICB9LCBbbWFwXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIW1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICB3aW5kb3cucmVtb3ZlUGxhY2VGcm9tTWFwID0gKHBsYWNlSWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlYnVnIC0gU3RhcnRpbmcgcmVtb3ZhbCBwcm9jZXNzIGZvciBwbGFjZUlkOicsIHBsYWNlSWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG1hcmtlcnNSZWYuY3VycmVudC5nZXQocGxhY2VJZCk7XG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgLSBGb3VuZCBtYXJrZXI6JywgbWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9XaW5kb3dSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKG1hcmtlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc1JlZi5jdXJyZW50LmRlbGV0ZShwbGFjZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZWRQbGFjZXNNYW5hZ2VyLnJlbW92ZVBsYWNlKHBsYWNlSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWJ1ZyAtIEFmdGVyIHJlbW92YWwgbWFya2VyczonLCBbLi4ubWFya2Vyc1JlZi5jdXJyZW50LmVudHJpZXMoKV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgLSBTdWNjZXNzZnVsbHkgcmVtb3ZlZCBtYXJrZXIgYW5kIHBsYWNlOicsIHBsYWNlSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVidWcgLSBDb3VsZCBub3QgZmluZCBtYXJrZXIgZm9yIHBsYWNlSWQ6JywgcGxhY2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdEZWJ1ZyAtIEVycm9yIGR1cmluZyBtYXJrZXIgcmVtb3ZhbDonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZWRQbGFjZXNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZXM6IEFycmF5LmZyb20oc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy52YWx1ZXMoKSksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZFBsYWNlVG9NYXAgPSBhc3luYyAoZGF0YTogeyBcbiAgICAgICAgICAgIGxhdGl0dWRlOiBudW1iZXI7IFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7IFxuICAgICAgICAgICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgICAgICAgICBwbGFjZT86IFBsYWNlO1xuICAgICAgICB9KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlcklkID0gZGF0YS5wbGFjZT8uaWQgfHwgZGF0YS50aXRsZSB8fCBTdHJpbmcoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGluRWxlbWVudCA9IG5ldyB3aW5kb3cuZ29vZ2xlLm1hcHMubWFya2VyLlBpbkVsZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiNGRjQ0NDRcIiwgIC8vIEJyaWdodCByZWRcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiI0NDMDAwMFwiLCAvLyBEYXJrZXIgcmVkIGJvcmRlclxuICAgICAgICAgICAgICAgICAgICBnbHlwaENvbG9yOiBcIiNGRkZGRkZcIiwgIC8vIFdoaXRlIGdseXBoIGZvciBiZXR0ZXIgY29udHJhc3RcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBtYXJrZXIgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlcnNSZWYuY3VycmVudC5oYXMobWFya2VySWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya2VyID0gbWFya2Vyc1JlZi5jdXJyZW50LmdldChtYXJrZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ01hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdNYXJrZXIubWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ01hcmtlci5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdNYXJrZXIuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNSZWYuY3VycmVudC5kZWxldGUobWFya2VySWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBkYXRhLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBkYXRhLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcGluRWxlbWVudC5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBnbXBEcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEucGxhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZWRQbGFjZXNNYW5hZ2VyLmFkZFBsYWNlKGRhdGEucGxhY2UpO1xuICAgICAgICAgICAgICAgICAgICBzZXRNYXJrZXJDb3VudChwcmV2ID0+IHByZXYgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2F2ZWRQbGFjZXMobmV3IE1hcChzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBtYXJrZXIgaXMgcHJvcGVybHkgYWRkZWQgdG8gdGhlIG1hcFxuICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBtYXBJbnN0YW5jZVJlZi5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdnbXAtY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSBhbnkgZXhpc3RpbmcgSW5mb1dpbmRvd1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50Py5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3VycmVudEluZm9XaW5kb3dNYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VySWQ6IG1hcmtlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlUGxhY2VJbmZvV2luZG93Q29udGVudChkYXRhLnBsYWNlLCBtYXJrZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCAmJiBpbmZvV2luZG93UmVmLmN1cnJlbnQgJiYgbWFwSW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbWFya2VyLnBvc2l0aW9uIGFzIGdvb2dsZS5tYXBzLkxhdExuZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3dSZWYuY3VycmVudC5vcGVuKG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuc2V0KG1hcmtlcklkLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnc2F2ZWRQbGFjZXNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlczogQXJyYXkuZnJvbShzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBwbGFjZSBtYXJrZXI6JywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3cuZ2V0U2F2ZWRQbGFjZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2F2ZWRQbGFjZXNNYW5hZ2VyLmdldFBsYWNlcygpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICB9LCBbbWFwSW5zdGFuY2VSZWYuY3VycmVudF0pOyAvLyBPbmx5IGRlcGVuZCBvbiB0aGUgbWFwIGluc3RhbmNlXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShzZXNzaW9uRGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFBsYWNlcyA9IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXJzZWQsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBY3RpdmU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzOiB1cGRhdGVkUGxhY2VzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBwbGFjZXMgdG8gc2Vzc2lvbjonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbc2F2ZWRQbGFjZXNdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgbWFwKSB7XG4gICAgICAgICAgICAgICAgd2luZG93Lmdvb2dsZT8ubWFwcz8uZXZlbnQ/LnRyaWdnZXIobWFwLCAncmVzaXplJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICB9O1xuICAgIH0sIFttYXBdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XG4gICAgICAgIGlmIChzZXNzaW9uRGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHNlc3Npb25EYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnNhdmVkUGxhY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC5zYXZlZFBsYWNlcy5mb3JFYWNoKChwbGFjZTogUGxhY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkUGxhY2VzTWFuYWdlci5hZGRQbGFjZShwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NhdmVkUGxhY2VzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlczogQXJyYXkuZnJvbShzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogc2F2ZWRQbGFjZXNNYW5hZ2VyLnBsYWNlcy5zaXplXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgc2F2ZWQgcGxhY2VzIGZyb20gc2Vzc2lvbjonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIW1hcCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVBsYWNlc0NoYW5nZWQgPSBhc3luYyAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlID0gZXZlbnQgYXMgQ3VzdG9tRXZlbnQ8eyB0eXBlPzogc3RyaW5nOyBzb3VyY2VEYXlJZD86IHN0cmluZzsgfT47XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW01hcENvbXBvbmVudF0gUGxhY2VzIGNoYW5nZWQ6JywgZS5kZXRhaWwpO1xuXG4gICAgICAgICAgICAvLyBDbGVhciBleGlzdGluZyBtYXJrZXJzXG4gICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuY2xlYXIoKTtcblxuICAgICAgICAgICAgLy8gQWRkIG5ldyBtYXJrZXJzXG4gICAgICAgICAgICBjb25zdCBwbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG4gICAgICAgICAgICBwbGFjZXMuZm9yRWFjaChwbGFjZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IGNyZWF0ZU1hcmtlcihwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5tYXAgPSBtYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzUmVmLmN1cnJlbnQuc2V0KHBsYWNlLmlkLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BsYWNlcy1jaGFuZ2VkJywgaGFuZGxlUGxhY2VzQ2hhbmdlZCk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGFjZXMtY2hhbmdlZCcsIGhhbmRsZVBsYWNlc0NoYW5nZWQpO1xuICAgICAgICB9O1xuICAgIH0sIFttYXBdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghbWFwSW5zdGFuY2VSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVRyYXZlbEluZm9EaXNwbGF5ID0gYXN5bmMgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IGV2ZW50IGFzIEN1c3RvbUV2ZW50PHtmcm9tSWQ6IHN0cmluZywgdG9JZDogc3RyaW5nfT47XG4gICAgICAgICAgICBjb25zdCB7IGZyb21JZCwgdG9JZCB9ID0gZS5kZXRhaWw7XG4gICAgICAgICAgICBjb25zdCByb3V0ZUtleSA9IGAke2Zyb21JZH0tJHt0b0lkfWA7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIGV4aXN0aW5nIHJvdXRlIGlmIGFueVxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdSb3V0ZSA9IGFjdGl2ZVJvdXRlc1JlZi5jdXJyZW50LmdldChyb3V0ZUtleSk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdSb3V0ZSkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nUm91dGUuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlc1JlZi5jdXJyZW50LmRlbGV0ZShyb3V0ZUtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZyb21QbGFjZSA9IHNhdmVkUGxhY2VzTWFuYWdlci5nZXRQbGFjZUJ5SWQoZnJvbUlkKTtcbiAgICAgICAgICAgIGNvbnN0IHRvUGxhY2UgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VCeUlkKHRvSWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZnJvbVBsYWNlPy5kYXlJbmRleCAhPT0gdW5kZWZpbmVkICYmIHRvUGxhY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGdldFJvdXRlQ29sb3IoZnJvbVBsYWNlLmRheUluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IGF3YWl0IGRyYXdSb3V0ZShbZnJvbVBsYWNlLCB0b1BsYWNlXSwgcm91dGVLZXksIGNvbG9yKTtcbiAgICAgICAgICAgICAgICBpZiAocG9seWxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUm91dGVzUmVmLmN1cnJlbnQuc2V0KHJvdXRlS2V5LCBwb2x5bGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVRyYXZlbEluZm9IaWRlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZSA9IGV2ZW50IGFzIEN1c3RvbUV2ZW50PHtmcm9tSWQ6IHN0cmluZywgdG9JZDogc3RyaW5nfT47XG4gICAgICAgICAgICBjb25zdCB7IGZyb21JZCwgdG9JZCB9ID0gZS5kZXRhaWw7XG4gICAgICAgICAgICBjb25zdCByb3V0ZUtleSA9IGAke2Zyb21JZH0tJHt0b0lkfWA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlbW92ZSByb3V0ZSBmcm9tIG1hcCBhbmQgdHJhY2tpbmdcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gYWN0aXZlUm91dGVzUmVmLmN1cnJlbnQuZ2V0KHJvdXRlS2V5KTtcbiAgICAgICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgICAgICAgIHJvdXRlLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZXNSZWYuY3VycmVudC5kZWxldGUocm91dGVLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0cmF2ZWxpbmZvLWRpc3BsYXllZCcsIGhhbmRsZVRyYXZlbEluZm9EaXNwbGF5KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYXZlbGluZm8taGlkZGVuJywgaGFuZGxlVHJhdmVsSW5mb0hpZGUpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBhbGwgcm91dGVzIHdoZW4gY29tcG9uZW50IHVubW91bnRzXG4gICAgICAgICAgICBhY3RpdmVSb3V0ZXNSZWYuY3VycmVudC5mb3JFYWNoKHJvdXRlID0+IHJvdXRlLnNldE1hcChudWxsKSk7XG4gICAgICAgICAgICBhY3RpdmVSb3V0ZXNSZWYuY3VycmVudC5jbGVhcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhdmVsaW5mby1kaXNwbGF5ZWQnLCBoYW5kbGVUcmF2ZWxJbmZvRGlzcGxheSk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhdmVsaW5mby1oaWRkZW4nLCBoYW5kbGVUcmF2ZWxJbmZvSGlkZSk7XG4gICAgICAgIH07XG4gICAgfSwgW21hcEluc3RhbmNlUmVmLmN1cnJlbnRdKTtcblxuICAgIGNvbnN0IGRyYXdSb3V0ZSA9IGFzeW5jIChwbGFjZXM6IFBsYWNlW10sIHJvdXRlS2V5OiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFtNYXBDb21wb25lbnRdIERyYXdpbmcgcm91dGUgYmV0d2VlbjpgLCB7XG4gICAgICAgICAgICBmcm9tOiBwbGFjZXNbMF0/LmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgdG86IHBsYWNlc1sxXT8uZGlzcGxheU5hbWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFwbGFjZXMgfHwgcGxhY2VzLmxlbmd0aCAhPT0gMiB8fCAhbWFwSW5zdGFuY2VSZWYuY3VycmVudCB8fCAhaXNHZW9tZXRyeVJlYWR5KCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbTWFwQ29tcG9uZW50XSBOb3QgcmVhZHkgdG8gZHJhdyByb3V0ZTonLCB7XG4gICAgICAgICAgICAgICAgcGxhY2VzOiBwbGFjZXM/Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXBSZWFkeTogISFtYXBJbnN0YW5jZVJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5UmVhZHk6IGlzR2VvbWV0cnlSZWFkeSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtwbGFjZTEsIHBsYWNlMl0gPSBwbGFjZXM7XG4gICAgICAgIGlmICghcGxhY2UxLmxvY2F0aW9uIHx8ICFwbGFjZTIubG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW01hcENvbXBvbmVudF0gTWlzc2luZyBsb2NhdGlvbiBmb3IgcGxhY2U6JywgeyBcbiAgICAgICAgICAgICAgICBwbGFjZTFOYW1lOiBwbGFjZTEubmFtZSxcbiAgICAgICAgICAgICAgICBwbGFjZTJOYW1lOiBwbGFjZTIubmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRyYXZlbEluZm9NYW5hZ2VyLmdldFRyYXZlbEluZm8ocGxhY2UxLCBwbGFjZTIpO1xuICAgICAgICAgICAgaWYgKCFpbmZvIHx8ICFpbmZvLmxlZ1BvbHlsaW5lKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbTWFwQ29tcG9uZW50XSBObyByb3V0ZSBpbmZvIGF2YWlsYWJsZSBiZXR3ZWVuIHBsYWNlcycpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGdvb2dsZS5tYXBzLmdlb21ldHJ5LmVuY29kaW5nLmRlY29kZVBhdGgoaW5mby5sZWdQb2x5bGluZSk7XG4gICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IG5ldyBnb29nbGUubWFwcy5Qb2x5bGluZSh7XG4gICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eTogMS4wLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMyxcbiAgICAgICAgICAgICAgICBtYXA6IG1hcEluc3RhbmNlUmVmLmN1cnJlbnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcG9seWxpbmU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbTWFwQ29tcG9uZW50XSBFcnJvciBkcmF3aW5nIHJvdXRlOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBnZXRQaG90b1VybCA9IChwaG90bzogZ29vZ2xlLm1hcHMucGxhY2VzLlBob3RvLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBwaG90by5nZXRVUkk/LigpIHx8ICcnO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVTbGlkZUNoYW5nZSA9IChfOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKHdpbmRvdy5jdXJyZW50U2xpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luZG93LmN1cnJlbnRTbGlkZSA9IGluZGV4O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWF0ZVBsYWNlSW5mb1dpbmRvd0NvbnRlbnQgPSAocGxhY2U6IFBsYWNlLCBtYXJrZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdEZWJ1ZyAtIENyZWF0aW5nIGluZm8gd2luZG93IGNvbnRlbnQgZm9yIG1hcmtlcklkOicsIG1hcmtlcklkKTtcbiAgICAgICAgY29uc3QgcGhvdG9VcmwgPSBwbGFjZS5waG90b3MgJiYgcGxhY2UucGhvdG9zWzBdIFxuICAgICAgICAgICAgPyBgaHR0cHM6Ly9wbGFjZXMuZ29vZ2xlYXBpcy5jb20vdjEvJHtwbGFjZS5waG90b3NbMF0ubmFtZX0vbWVkaWE/bWF4SGVpZ2h0UHg9MjAwJm1heFdpZHRoUHg9MzAwJmtleT0ke2FwaUtleX1gXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGNvbnN0IHBsYWNlVGl0bGUgPSB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnID8gcGxhY2UuZGlzcGxheU5hbWUgOiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0O1xuXG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmctd2hpdGUgcm91bmRlZC1sZyBzaGFkb3ctc21cIiBzdHlsZT1cIm1heC13aWR0aDogMzAwcHg7XCI+XG4gICAgICAgICAgICAgICAgJHtwaG90b1VybCA/IGBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImhlaWdodDogMTUwcHg7IHdpZHRoOiAxMDAlO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3Bob3RvVXJsfVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIiR7cGxhY2VUaXRsZX1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgb2JqZWN0LWZpdDogY292ZXI7IGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuNXJlbTsgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuNXJlbTtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgYCA6ICcnfVxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInAtM1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtc3RhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktOTAwIG1iLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3BsYWNlVGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgJHtwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgPGRpdiBjbGFzcz1cInRleHQtc20gdGV4dC1ncmF5LTYwMCBtYi0xXCI+JHtwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLnRleHR9PC9kaXY+YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgJHtwbGFjZS5mb3JtYXR0ZWRBZGRyZXNzIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgPHAgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDBcIj4ke3BsYWNlLmZvcm1hdHRlZEFkZHJlc3N9PC9wPmBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJyd9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNHZW9tZXRyeVJlYWR5ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gISEoXG4gICAgICAgICAgICB3aW5kb3cuZ29vZ2xlPy5tYXBzPy5nZW9tZXRyeT8uZW5jb2Rpbmc/LmRlY29kZVBhdGggJiZcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cuZ29vZ2xlLm1hcHMuZ2VvbWV0cnkuZW5jb2RpbmcuZGVjb2RlUGF0aCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRMb2NhdGlvbiA9IGFzeW5jIChjaXR5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgZ2VvY29kZXIgPSBuZXcgd2luZG93Lmdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGdvb2dsZS5tYXBzLkxhdExuZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZShcbiAgICAgICAgICAgICAgICB7IGFkZHJlc3M6IGNpdHkgfSxcbiAgICAgICAgICAgICAgICAocmVzdWx0cywgc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgIT09ICdPSycgfHwgIXJlc3VsdHM/LlswXT8uZ2VvbWV0cnk/LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdHZW9jb2RpbmcgZmFpbGVkOicsIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ0NvdWxkIG5vdCBmaW5kIGxvY2F0aW9uIGZvciAnICsgY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldFJvdXRlQ29sb3IgPSAoZGF5SW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBbXG4gICAgICAgICAgICAnIzIxOTZGMycsIC8vIEJsdWVcbiAgICAgICAgICAgICcjOUMyN0IwJywgLy8gUHVycGxlXG4gICAgICAgICAgICAnIzc5NTU0OCcsIC8vIEJyb3duXG4gICAgICAgICAgICAnI0ZGOTgwMCcsIC8vIE9yYW5nZVxuICAgICAgICAgICAgJyMwMDk2ODgnLCAvLyBUZWFsXG4gICAgICAgICAgICAnI0U5MUU2MycsIC8vIFBpbmtcbiAgICAgICAgICAgICcjNjczQUI3JywgLy8gRGVlcCBQdXJwbGVcbiAgICAgICAgICAgICcjM0Y1MUI1JywgLy8gSW5kaWdvXG4gICAgICAgICAgICAnIzAwQkNENCcsIC8vIEN5YW5cbiAgICAgICAgICAgICcjNENBRjUwJyAgLy8gR3JlZW5cbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIGNvbG9yc1tkYXlJbmRleCAlIGNvbG9ycy5sZW5ndGhdO1xuICAgIH07XG5cbiAgICBjb25zdCBjcmVhdGVNYXJrZXIgPSAocGxhY2U6IFBsYWNlKSA9PiB7XG4gICAgICAgIGlmICghcGxhY2UubG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW01hcENvbXBvbmVudF0gQ2Fubm90IGNyZWF0ZSBtYXJrZXI6IHBsYWNlIG1pc3NpbmcgbG9jYXRpb24nLCBwbGFjZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBpbkVsZW1lbnQgPSBuZXcgd2luZG93Lmdvb2dsZS5tYXBzLm1hcmtlci5QaW5FbGVtZW50KHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiI0ZGNDQ0NFwiLCAgLy8gQnJpZ2h0IHJlZFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiI0NDMDAwMFwiLCAvLyBEYXJrZXIgcmVkIGJvcmRlclxuICAgICAgICAgICAgZ2x5cGhDb2xvcjogXCIjRkZGRkZGXCIsICAvLyBXaGl0ZSBnbHlwaCBmb3IgYmV0dGVyIGNvbnRyYXN0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50KHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgbGF0OiBwbGFjZS5sb2NhdGlvbi5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICBsbmc6IHBsYWNlLmxvY2F0aW9uLmxvbmdpdHVkZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpdGxlOiB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnID8gcGxhY2UuZGlzcGxheU5hbWUgOiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgY29udGVudDogcGluRWxlbWVudC5lbGVtZW50LFxuICAgICAgICAgICAgZ21wRHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdnbXAtY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBDbG9zZSBhbnkgZXhpc3RpbmcgSW5mb1dpbmRvd1xuICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50Py5jbG9zZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW5kb3cuY3VycmVudEluZm9XaW5kb3dNYXJrZXIgPSB7XG4gICAgICAgICAgICAgICAgbWFya2VySWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlUGxhY2VJbmZvV2luZG93Q29udGVudChwbGFjZSwgcGxhY2UuaWQpO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQgJiYgaW5mb1dpbmRvd1JlZi5jdXJyZW50ICYmIG1hcEluc3RhbmNlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG1hcmtlci5wb3NpdGlvbiBhcyBnb29nbGUubWFwcy5MYXRMbmc7XG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50LnNldENvbnRlbnQoY29udGVudCk7XG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd1JlZi5jdXJyZW50LnNldFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93UmVmLmN1cnJlbnQub3BlbihtYXBJbnN0YW5jZVJlZi5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsIHJlbGF0aXZlXCI+XG4gICAgICAgICAgICA8ZGl2IHJlZj17bWFwUmVmfSBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz5cbiAgICAgICAgICAgIHtlcnJvciAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMCBsZWZ0LTAgcmlnaHQtMCBiZy1yZWQtNTAwIHRleHQtd2hpdGUgcC0yIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIHtlcnJvcn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7aXNMb2FkaW5nICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgYmctZ3JheS0xMDAgYmctb3BhY2l0eS03NVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC04IHctOCBib3JkZXItYi0yIGJvcmRlci1ncmF5LTkwMFwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1hcENvbXBvbmVudDsiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInNhdmVkUGxhY2VzTWFuYWdlciIsIlNFU1NJT05fQ09ORklHIiwidHJhdmVsSW5mb01hbmFnZXIiLCJNYXBDb21wb25lbnQiLCJjaXR5IiwiYXBpS2V5IiwibWFwUmVmIiwibWFwSW5zdGFuY2VSZWYiLCJtYXAiLCJzZXRNYXAiLCJlcnJvciIsInNldEVycm9yIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwic2NyaXB0TG9hZGVkUmVmIiwiZ2VvbWV0cnlMb2FkZWRSZWYiLCJzZWxlY3RlZFBsYWNlIiwic2V0U2VsZWN0ZWRQbGFjZSIsInNhdmVkUGxhY2VzIiwic2V0U2F2ZWRQbGFjZXMiLCJNYXAiLCJtYXJrZXJzUmVmIiwiaW5mb1dpbmRvd1JlZiIsIm1hcmtlckNvdW50Iiwic2V0TWFya2VyQ291bnQiLCJhY3RpdmVSb3V0ZXNSZWYiLCJsb2FkR29vZ2xlTWFwc1NjcmlwdCIsIndpbmRvdyIsImdvb2dsZSIsIm1hcHMiLCJzZXR1cE1hcEluc3RhbmNlIiwiY3VycmVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJhc3luYyIsImRlZmVyIiwiaGVhZCIsImFwcGVuZENoaWxkIiwidGFyZ2V0Q2l0eSIsInNlc3Npb25EYXRhIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiU1RPUkFHRV9LRVkiLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJjb25zb2xlIiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsInpvb20iLCJjZW50ZXIiLCJtYXBJZCIsIkluZm9XaW5kb3ciLCJtYXhXaWR0aCIsInBpeGVsT2Zmc2V0IiwiU2l6ZSIsImlzR2VvbWV0cnlSZWFkeSIsImNoZWNrR2VvbWV0cnkiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0Iiwic2V0dXBNYXBGZWF0dXJlcyIsInNldENlbnRlciIsInNldFpvb20iLCJpbml0aWFsaXplTWFwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJldmVudCIsImFkZExpc3RlbmVyT25jZSIsImdldFBsYWNlcyIsImxvZyIsImxlbmd0aCIsImZvckVhY2giLCJwbGFjZSIsImFkZFBsYWNlVG9NYXAiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInRpdGxlIiwiZGlzcGxheU5hbWUiLCJ0ZXh0IiwicmVtb3ZlUGxhY2VGcm9tTWFwIiwicGxhY2VJZCIsIm1hcmtlciIsImdldCIsImNsb3NlIiwiY2xlYXJJbnN0YW5jZUxpc3RlbmVycyIsImRlbGV0ZSIsInJlbW92ZVBsYWNlIiwiZW50cmllcyIsIndhcm4iLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJwbGFjZXMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJjb3VudCIsInNpemUiLCJkYXRhIiwibWFya2VySWQiLCJpZCIsIlN0cmluZyIsIkRhdGUiLCJub3ciLCJwaW5FbGVtZW50IiwiUGluRWxlbWVudCIsImJhY2tncm91bmQiLCJib3JkZXJDb2xvciIsImdseXBoQ29sb3IiLCJoYXMiLCJleGlzdGluZ01hcmtlciIsImVsZW1lbnQiLCJyZW1vdmUiLCJBZHZhbmNlZE1hcmtlckVsZW1lbnQiLCJwb3NpdGlvbiIsImxhdCIsImxuZyIsImNvbnRlbnQiLCJnbXBEcmFnZ2FibGUiLCJhZGRQbGFjZSIsInByZXYiLCJhZGRMaXN0ZW5lciIsImN1cnJlbnRJbmZvV2luZG93TWFya2VyIiwiY3JlYXRlUGxhY2VJbmZvV2luZG93Q29udGVudCIsInNldENvbnRlbnQiLCJzZXRQb3NpdGlvbiIsIm9wZW4iLCJzZXQiLCJlcnIiLCJnZXRTYXZlZFBsYWNlcyIsInVwZGF0ZWRQbGFjZXMiLCJzZXNzaW9uRGF0YVdpdGhVcGRhdGVkUGxhY2VzIiwibGFzdEFjdGl2ZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwidHJpZ2dlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlUGxhY2VzQ2hhbmdlZCIsImUiLCJjbGVhciIsImNyZWF0ZU1hcmtlciIsImhhbmRsZVRyYXZlbEluZm9EaXNwbGF5IiwiZnJvbUlkIiwidG9JZCIsInJvdXRlS2V5IiwiZXhpc3RpbmdSb3V0ZSIsImZyb21QbGFjZSIsImdldFBsYWNlQnlJZCIsInRvUGxhY2UiLCJkYXlJbmRleCIsInVuZGVmaW5lZCIsImNvbG9yIiwiZ2V0Um91dGVDb2xvciIsInBvbHlsaW5lIiwiZHJhd1JvdXRlIiwiaGFuZGxlVHJhdmVsSW5mb0hpZGUiLCJyb3V0ZSIsInRvIiwibWFwUmVhZHkiLCJnZW9tZXRyeVJlYWR5IiwicGxhY2UxIiwicGxhY2UyIiwicGxhY2UxTmFtZSIsIm5hbWUiLCJwbGFjZTJOYW1lIiwiaW5mbyIsImdldFRyYXZlbEluZm8iLCJsZWdQb2x5bGluZSIsInBhdGgiLCJnZW9tZXRyeSIsImVuY29kaW5nIiwiZGVjb2RlUGF0aCIsIlBvbHlsaW5lIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2VpZ2h0IiwiZ2V0UGhvdG9VcmwiLCJwaG90byIsImluZGV4IiwiZ2V0VVJJIiwiaGFuZGxlU2xpZGVDaGFuZ2UiLCJfIiwiY3VycmVudFNsaWRlIiwicGhvdG9VcmwiLCJwaG90b3MiLCJwbGFjZVRpdGxlIiwicHJpbWFyeVR5cGVEaXNwbGF5TmFtZSIsImZvcm1hdHRlZEFkZHJlc3MiLCJnZW9jb2RlciIsIkdlb2NvZGVyIiwicmVqZWN0IiwiZ2VvY29kZSIsImFkZHJlc3MiLCJyZXN1bHRzIiwic3RhdHVzIiwiY29sb3JzIiwiZGl2IiwiY2xhc3NOYW1lIiwicmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n");

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: () => (/* binding */ BUDGET_DESCRIPTIONS),\n/* harmony export */   BUDGET_OPTIONS: () => (/* binding */ BUDGET_OPTIONS),\n/* harmony export */   BudgetLevel: () => (/* binding */ BudgetLevel),\n/* harmony export */   CURRENCY_INFO: () => (/* binding */ CURRENCY_INFO),\n/* harmony export */   ComponentType: () => (/* binding */ ComponentType),\n/* harmony export */   DEFAULT_CURRENCIES: () => (/* binding */ DEFAULT_CURRENCIES),\n/* harmony export */   LANGUAGE_LABELS: () => (/* binding */ LANGUAGE_LABELS),\n/* harmony export */   LANGUAGE_OPTIONS: () => (/* binding */ LANGUAGE_OPTIONS),\n/* harmony export */   PREFERENCE_ICONS: () => (/* binding */ PREFERENCE_ICONS),\n/* harmony export */   PREFERENCE_OPTIONS: () => (/* binding */ PREFERENCE_OPTIONS),\n/* harmony export */   SupportedLanguage: () => (/* binding */ SupportedLanguage),\n/* harmony export */   TravelPreference: () => (/* binding */ TravelPreference)\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map(([key, value])=>({\n        value,\n        label: LANGUAGE_LABELS[value]\n    }));\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/types.ts\n");

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: () => (/* binding */ fetchPlaces),\n/* harmony export */   filterUniquePlaces: () => (/* binding */ filterUniquePlaces),\n/* harmony export */   formatPrimaryType: () => (/* binding */ formatPrimaryType),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getPlaceTypesFromPreferences: () => (/* binding */ getPlaceTypesFromPreferences),\n/* harmony export */   metricsManager: () => (/* binding */ metricsManager),\n/* harmony export */   preferenceToPlaceTypes: () => (/* binding */ preferenceToPlaceTypes),\n/* harmony export */   savedPlacesManager: () => (/* binding */ savedPlacesManager),\n/* harmony export */   searchMultiplePlacesByText: () => (/* binding */ searchMultiplePlacesByText),\n/* harmony export */   searchPlaceByText: () => (/* binding */ searchPlaceByText)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            const availableTypes = preferenceToPlaceTypes[pref]?.filter((type)=>!usedTypes.has(type)) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return place.displayName?.text || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from sessionStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"undefined\" !== \"undefined\") {}\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place?.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        getPlaceById (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.get(id);\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        updatePlace (place) {\n            if (place?.id && places.has(place.id)) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        updatePlaces (updatedPlaces) {\n            loadFromStorage(); // Ensure places are loaded\n            updatedPlaces.forEach((place)=>{\n                if (place?.id) {\n                    places.set(place.id, place);\n                }\n            });\n            this._persist();\n            this._notifyChange();\n        },\n        _persist () {\n            if (false) {}\n        },\n        _notifyChange () {\n            if (false) {}\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (false) {}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? `different ${searchText} in ${cityName}` : `${searchText} ${cityName}`;\n    console.log(`[searchWithStrategy] Using ${useAlternateSearch ? \"alternate\" : \"original\"} search:`, query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.places?.[0]) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: data.places[0].displayName?.text || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!result?.places?.[0]) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (true) {\n        return {\n            sessionId: \"\",\n            startTime: Date.now(),\n            lastActive: Date.now(),\n            expiresAt: Date.now() + 24 * 60 * 60 * 1000,\n            destination: \"\",\n            startDate: \"\",\n            endDate: \"\",\n            preferences: [],\n            budget: \"\",\n            language: \"\",\n            transport: [],\n            savedPlaces: [],\n            currentStage: 1,\n            totalPrompts: 0,\n            stagePrompts: {\n                1: 0,\n                2: 0,\n                3: 0\n            },\n            savedPlacesCount: 0,\n            isPaid: false,\n            paymentReference: \"\"\n        };\n    }\n    const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n    if (!session) {\n        return initializeMetrics();\n    }\n    // Always ensure savedPlacesCount matches actual saved places\n    session.savedPlacesCount = savedPlacesManager.places.size;\n    return session;\n}\n// Update metrics in storage\nfunction updateMetrics(session) {\n    if (true) return;\n    try {\n        const storedSession = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!storedSession) return;\n        // Update only metrics-related fields\n        storedSession.totalPrompts = session.totalPrompts;\n        storedSession.stagePrompts = session.stagePrompts;\n        storedSession.savedPlacesCount = session.savedPlacesCount;\n        sessionStorage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(storedSession));\n    } catch (error) {\n        console.error(\"[Places] Error updating metrics:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: place.photos?.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = place.displayName?.text ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async (searchText, location, maxResults = 5)=>{\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>({\n                id: place.id,\n                displayName: place.displayName?.text ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: place.photos?.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    })) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            }));\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async (latitude, longitude, preferences, maxResults = 5, placeTypes)=>{\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!preferences?.length,\n            fromPlaceTypes: !!placeTypes?.length\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>({\n                            id: place.id,\n                            displayName: place.displayName?.text ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: place.photos?.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                })) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        }));\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9wbGFjZXMtdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkJBQTJCO0FBOER5QztBQUMyQztBQUUvRyxzRUFBc0U7QUFDL0QsTUFBTUsseUJBQTZEO0lBQ3RFLENBQUNMLDZEQUFnQkEsQ0FBQ00sT0FBTyxDQUFDLEVBQUU7UUFDeEI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELENBQUNOLDZEQUFnQkEsQ0FBQ08sTUFBTSxDQUFDLEVBQUU7UUFDdkI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELENBQUNQLDZEQUFnQkEsQ0FBQ1EsSUFBSSxDQUFDLEVBQUU7UUFDckI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELENBQUNSLDZEQUFnQkEsQ0FBQ1MsVUFBVSxDQUFDLEVBQUU7UUFDM0I7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELENBQUNULDZEQUFnQkEsQ0FBQ1UsU0FBUyxDQUFDLEVBQUU7UUFDMUI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELENBQUNWLDZEQUFnQkEsQ0FBQ1csUUFBUSxDQUFDLEVBQUU7UUFDekI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtBQUNMLEVBQUU7QUFFRiwwREFBMEQ7QUFDbkQsU0FBU0MsNkJBQTZCQyxXQUErQjtJQUN4RSxJQUFJO1FBQ0Esb0NBQW9DO1FBQ3BDLE1BQU1DLFlBQVksSUFBSUM7UUFDdEIsTUFBTUMsY0FBd0IsRUFBRTtRQUVoQywwQkFBMEI7UUFDMUJILFlBQVlJLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDaEIsTUFBTUMsaUJBQWlCZCxzQkFBc0IsQ0FBQ2EsS0FBSyxFQUFFRSxPQUNqREMsQ0FBQUEsT0FBUSxDQUFDUCxVQUFVUSxHQUFHLENBQUNELFVBQ3RCLEVBQUU7WUFFUCw2Q0FBNkM7WUFDN0MsTUFBTUUsV0FBV0MsS0FBS0MsR0FBRyxDQUFDRCxLQUFLRSxLQUFLLENBQUNGLEtBQUtHLE1BQU0sS0FBSyxLQUFLLEdBQUdSLGVBQWVTLE1BQU07WUFDbEYsTUFBTUMsZ0JBQWdCVixlQUNqQlcsSUFBSSxDQUFDLElBQU1OLEtBQUtHLE1BQU0sS0FBSyxLQUMzQkksS0FBSyxDQUFDLEdBQUdSO1lBRWQsa0NBQWtDO1lBQ2xDTSxjQUFjWixPQUFPLENBQUNJLENBQUFBO2dCQUNsQkwsWUFBWWdCLElBQUksQ0FBQ1g7Z0JBQ2pCUCxVQUFVbUIsR0FBRyxDQUFDWjtZQUNsQjtRQUNKO1FBRUEsT0FBT0w7SUFDWCxFQUFFLE9BQU9rQixPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQywrQ0FBK0NBO1FBQzdELE9BQU87WUFBQztTQUFxQixFQUFFLG1CQUFtQjtJQUN0RDtBQUNKO0FBRUEseUNBQXlDO0FBQ2xDLE1BQU1FLG9CQUFvQixDQUFDZjtJQUM5QixPQUFPQSxLQUFLZ0IsS0FBSyxDQUFDLEtBQ2JDLEdBQUcsQ0FBQ0MsQ0FBQUEsT0FBUUEsS0FBS0MsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0YsS0FBS1IsS0FBSyxDQUFDLElBQ3REVyxJQUFJLENBQUM7QUFDZCxFQUFFO0FBRUYscURBQXFEO0FBQzlDLE1BQU1DLGlCQUFpQixDQUFDQztJQUMzQixJQUFJLE9BQU9BLE1BQU1DLFdBQVcsS0FBSyxVQUFVO1FBQ3ZDLE9BQU9ELE1BQU1DLFdBQVc7SUFDNUI7SUFDQSxPQUFPRCxNQUFNQyxXQUFXLEVBQUVDLFFBQVFGLE1BQU1HLElBQUksSUFBSTtBQUNwRCxFQUFFO0FBRUYsMENBQTBDO0FBQ25DLFNBQVNDLG1CQUFtQkMsTUFBZTtJQUM5QyxJQUFJLENBQUNBLFVBQVUsQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTLE9BQU8sRUFBRTtJQUVoRCxrREFBa0Q7SUFDbEQsTUFBTUcsY0FBY0MsbUJBQW1CQyxTQUFTO0lBRWhELE1BQU1DLGdCQUFnQixJQUFJeEMsSUFBSXFDLFlBQVlkLEdBQUcsQ0FBQ00sQ0FBQUEsUUFBU0EsTUFBTVksRUFBRTtJQUMvRCxNQUFNQyxrQkFBa0IsSUFBSTFDLElBQUlxQyxZQUFZZCxHQUFHLENBQUNNLENBQUFBLFFBQzVDLE9BQU9BLE1BQU1DLFdBQVcsS0FBSyxXQUN2QkQsTUFBTUMsV0FBVyxDQUFDYSxXQUFXLEtBQzdCZCxNQUFNQyxXQUFXLENBQUNDLElBQUksQ0FBQ1ksV0FBVztJQUczQywwQkFBMEI7SUFDM0IsaUNBQWlDO0lBQ2pDLG1DQUFtQztJQUNuQyxPQUFPVCxPQUFPN0IsTUFBTSxDQUFDd0IsQ0FBQUE7UUFDakIsSUFBSSxDQUFDQSxNQUFNWSxFQUFFLEVBQUUsT0FBTztRQUN0QixJQUFJRCxjQUFjakMsR0FBRyxDQUFDc0IsTUFBTVksRUFBRSxHQUFHLE9BQU87UUFFeEMsTUFBTUcsWUFBWSxPQUFPZixNQUFNQyxXQUFXLEtBQUssV0FDekNELE1BQU1DLFdBQVcsQ0FBQ2EsV0FBVyxLQUM3QmQsTUFBTUMsV0FBVyxDQUFDQyxJQUFJLENBQUNZLFdBQVc7UUFFeEMsSUFBSUQsZ0JBQWdCbkMsR0FBRyxDQUFDcUMsWUFBWSxPQUFPO1FBRTNDLE9BQU87SUFDWDtBQUNKO0FBaUJBLE1BQU1DLGNBQWM7QUFFcEIsK0JBQStCO0FBQy9CLE1BQU1DLDJCQUEyQjtJQUM3QixNQUFNWixTQUFTLElBQUlhO0lBQ25CLElBQUlDLGNBQWM7SUFFbEIsa0NBQWtDO0lBQ2xDLE1BQU1DLGtCQUFrQjtRQUNwQixJQUFJLENBQUNELGVBQWUsZ0JBQWtCLGFBQWEsRUFpQmxEO0lBQ0w7SUFFQSxPQUFPO1FBQ0hkO1FBQ0FtQixVQUFTeEIsS0FBWTtZQUNqQm9CLG1CQUFtQiwyQkFBMkI7WUFDOUMsSUFBSXBCLE9BQU9ZLElBQUk7Z0JBQ1hQLE9BQU9rQixHQUFHLENBQUN2QixNQUFNWSxFQUFFLEVBQUVaO2dCQUNyQixJQUFJLENBQUN5QixRQUFRO2dCQUNiLElBQUksQ0FBQ0MsYUFBYTtZQUN0QjtRQUNKO1FBQ0FDLGFBQVlmLEVBQVU7WUFDbEJRLG1CQUFtQiwyQkFBMkI7WUFDOUNmLE9BQU91QixNQUFNLENBQUNoQjtZQUNkLElBQUksQ0FBQ2EsUUFBUTtZQUNiLElBQUksQ0FBQ0MsYUFBYTtRQUN0QjtRQUNBaEI7WUFDSVUsbUJBQW1CLDJCQUEyQjtZQUM5QyxPQUFPZCxNQUFNdUIsSUFBSSxDQUFDeEIsT0FBT3lCLE1BQU07UUFDbkM7UUFDQUMsY0FBYW5CLEVBQVU7WUFDbkJRLG1CQUFtQiwyQkFBMkI7WUFDOUMsT0FBT2YsT0FBTzJCLEdBQUcsQ0FBQ3BCO1FBQ3RCO1FBQ0FxQixVQUFTckIsRUFBVTtZQUNmUSxtQkFBbUIsMkJBQTJCO1lBQzlDLE9BQU9mLE9BQU8zQixHQUFHLENBQUNrQztRQUN0QjtRQUNBc0IsYUFBWWxDLEtBQVk7WUFDcEIsSUFBSUEsT0FBT1ksTUFBTVAsT0FBTzNCLEdBQUcsQ0FBQ3NCLE1BQU1ZLEVBQUUsR0FBRztnQkFDbkNQLE9BQU9rQixHQUFHLENBQUN2QixNQUFNWSxFQUFFLEVBQUVaO2dCQUNyQixJQUFJLENBQUN5QixRQUFRO2dCQUNiLElBQUksQ0FBQ0MsYUFBYTtZQUN0QjtRQUNKO1FBQ0FTLGNBQWFDLGFBQXNCO1lBQy9CaEIsbUJBQW1CLDJCQUEyQjtZQUM5Q2dCLGNBQWMvRCxPQUFPLENBQUMyQixDQUFBQTtnQkFDbEIsSUFBSUEsT0FBT1ksSUFBSTtvQkFDWFAsT0FBT2tCLEdBQUcsQ0FBQ3ZCLE1BQU1ZLEVBQUUsRUFBRVo7Z0JBQ3pCO1lBQ0o7WUFDQSxJQUFJLENBQUN5QixRQUFRO1lBQ2IsSUFBSSxDQUFDQyxhQUFhO1FBQ3RCO1FBQ0FEO1lBQ0ksSUFBSSxLQUFrQixFQUFhLEVBWWxDO1FBQ0w7UUFDQUM7WUFDSSxJQUFJLEtBQWtCLEVBQWEsRUFVbEM7UUFDTDtRQUNBdUI7WUFDSSxPQUFPUixLQUFLQyxTQUFTLENBQUNwQyxNQUFNdUIsSUFBSSxDQUFDeEIsT0FBT3lCLE1BQU07UUFDbEQ7SUFDSjtBQUNKO0FBRU8sTUFBTXJCLHFCQUFxQlEsMkJBQTJCO0FBRTdELDRCQUE0QjtBQUM1QixJQUFJLEtBQWtCLEVBQWEsRUFFbEM7QUFnQkQsd0RBQXdEO0FBQ3hELGVBQWVpQyxtQkFDWEMsVUFBa0IsRUFDbEJDLFFBQWlELEVBQ2pEQyxRQUFnQixFQUNoQkMsa0JBQTJCO0lBRTNCLElBQUksS0FBNEMsRUFBRSxFQUVqRDtJQUVELE1BQU1LLFVBQVU7UUFDWixnQkFBZ0I7UUFDaEIsa0JBQWtCSix5Q0FBMkM7UUFDN0Qsb0JBQW9CO0lBQ3hCO0lBRUEsNkRBQTZEO0lBQzdELE1BQU1LLFFBQVFOLHFCQUNSLENBQUMsVUFBVSxFQUFFSCxXQUFXLElBQUksRUFBRUUsU0FBUyxDQUFDLEdBQ3hDLENBQUMsRUFBRUYsV0FBVyxDQUFDLEVBQUVFLFNBQVMsQ0FBQztJQUVqQzlELFFBQVFzRSxHQUFHLENBQUMsQ0FBQywyQkFBMkIsRUFBRVAscUJBQXFCLGNBQWMsV0FBVyxRQUFRLENBQUMsRUFBRU07SUFFbkcsTUFBTUUsU0FBUyxNQUFNQyxVQUFVSCxPQUFPRCxTQUFTUDtJQUMvQyxPQUFPVTtBQUNYO0FBRUEsZUFBZUMsVUFDWEgsS0FBYSxFQUNiRCxPQUFZLEVBQ1pQLFFBQWlEO0lBRWpELElBQUk7UUFDQSxNQUFNWSxXQUFXLE1BQU1DLE1BQU0sc0RBQXNEO1lBQy9FQyxRQUFRO1lBQ1JQO1lBQ0FRLE1BQU0xQixLQUFLQyxTQUFTLENBQUM7Z0JBQ2pCMEIsV0FBV1I7Z0JBQ1hTLGNBQWM7b0JBQ1ZDLFFBQVE7d0JBQ0pDLFFBQVE7NEJBQ0pDLFVBQVVwQixTQUFTb0IsUUFBUTs0QkFDM0JDLFdBQVdyQixTQUFTcUIsU0FBUzt3QkFDakM7d0JBQ0FDLFFBQVE7b0JBQ1o7Z0JBQ0o7Z0JBQ0FDLGdCQUFnQjtZQUNwQjtRQUNKO1FBRUEsSUFBSSxDQUFDWCxTQUFTWSxFQUFFLEVBQUU7WUFDZHJGLFFBQVFELEtBQUssQ0FBQyw4QkFBOEI7Z0JBQ3hDdUYsUUFBUWIsU0FBU2EsTUFBTTtnQkFDdkJDLFlBQVlkLFNBQVNjLFVBQVU7Z0JBQy9CbEI7WUFDSjtZQUNBLE9BQU87UUFDWDtRQUVBLE1BQU1tQixPQUFPLE1BQU1mLFNBQVNnQixJQUFJO1FBQ2hDLElBQUksQ0FBQ0QsS0FBSzFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQmQsUUFBUXNFLEdBQUcsQ0FBQywwQ0FBMENEO1lBQ3RELE9BQU87UUFDWDtRQUVBckUsUUFBUXNFLEdBQUcsQ0FBQyxnQ0FBZ0M7WUFDeENqRCxJQUFJbUUsS0FBSzFFLE1BQU0sQ0FBQyxFQUFFLENBQUNPLEVBQUU7WUFDckJULE1BQU00RSxLQUFLMUUsTUFBTSxDQUFDLEVBQUUsQ0FBQ0osV0FBVyxFQUFFQyxRQUFRNkUsS0FBSzFFLE1BQU0sQ0FBQyxFQUFFLENBQUNGLElBQUk7UUFDakU7UUFFQSxPQUFPO1lBQUVFLFFBQVE7Z0JBQUMwRSxLQUFLMUUsTUFBTSxDQUFDLEVBQUU7YUFBQztRQUFDO0lBQ3RDLEVBQUUsT0FBT2YsT0FBTztRQUNaQyxRQUFRRCxLQUFLLENBQUMsc0JBQXNCQTtRQUNwQyxPQUFPO0lBQ1g7QUFDSjtBQUVPLGVBQWUyRixrQkFDbEI5QixVQUFrQixFQUNsQkMsUUFBaUQsRUFDakQ4QixXQUFtQjtJQUVuQjNGLFFBQVFzRSxHQUFHLENBQUMsNkNBQTZDO1FBQ3JEVjtRQUNBQztRQUNBOEI7SUFDSjtJQUVBLElBQUk7UUFDQSxNQUFNN0IsV0FBVzZCO1FBQ2pCLE1BQU1wQixTQUFTLE1BQU1aLG1CQUFtQkMsWUFBWUMsVUFBVUMsVUFBVTtRQUV4RSxJQUFJLENBQUNTLFFBQVF6RCxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ3RCLE9BQU87UUFDWDtRQUVBLE1BQU1MLFFBQVFtRix1QkFBdUJyQixPQUFPekQsTUFBTSxDQUFDLEVBQUU7UUFDckQsSUFBSSxDQUFDTCxPQUFPO1lBQ1IsT0FBTztRQUNYO1FBRUEsMkRBQTJEO1FBQzNELE1BQU1vRixpQkFBaUIzRSxtQkFBbUJ3QixRQUFRLENBQUNqQyxNQUFNWSxFQUFFO1FBRTNELElBQUksQ0FBQ3dFLGdCQUFnQjtZQUNqQjdGLFFBQVFzRSxHQUFHLENBQUMseUNBQXlDO2dCQUNqRGpELElBQUlaLE1BQU1ZLEVBQUU7Z0JBQ1pULE1BQU1KLGVBQWVDO1lBQ3pCO1lBQ0FTLG1CQUFtQmUsUUFBUSxDQUFDeEI7WUFFNUIsaUJBQWlCO1lBQ2pCLE1BQU1xRixVQUF5QkMsZUFBZXRELEdBQUc7WUFDakRxRCxRQUFRL0MsZ0JBQWdCLEdBQUc3QixtQkFBbUJKLE1BQU0sQ0FBQ2tDLElBQUk7WUFDekQrQyxlQUFlQyxNQUFNLENBQUNGO1FBQzFCO1FBRUE5RixRQUFRc0UsR0FBRyxDQUFDLG9DQUFvQztZQUM1Q2pELElBQUlaLE1BQU1ZLEVBQUU7WUFDWlQsTUFBTUosZUFBZUM7WUFDckJvRjtRQUNKO1FBRUEsT0FBT3BGO0lBQ1gsRUFBRSxPQUFPVixPQUFPO1FBQ1pDLFFBQVFELEtBQUssQ0FBQyxrREFBa0RBO1FBQ2hFLE9BQU87SUFDWDtBQUNKO0FBRUEsZ0NBQWdDO0FBQ2hDLFNBQVNrRztJQUNMLElBQUksSUFBa0IsRUFBYTtRQUMvQixPQUFPO1lBQ0hDLFdBQVc7WUFDWEMsV0FBV0MsS0FBS0MsR0FBRztZQUNuQkMsWUFBWUYsS0FBS0MsR0FBRztZQUNwQkUsV0FBV0gsS0FBS0MsR0FBRyxLQUFLLEtBQUssS0FBSyxLQUFLO1lBQ3ZDVixhQUFhO1lBQ2JhLFdBQVc7WUFDWEMsU0FBUztZQUNUL0gsYUFBYSxFQUFFO1lBQ2ZnSSxRQUFRO1lBQ1JDLFVBQVU7WUFDVkMsV0FBVyxFQUFFO1lBQ2IzRixhQUFhLEVBQUU7WUFDZjRGLGNBQWM7WUFDZEMsY0FBYztZQUNkQyxjQUFjO2dCQUFFLEdBQUc7Z0JBQUcsR0FBRztnQkFBRyxHQUFHO1lBQUU7WUFDakNoRSxrQkFBa0I7WUFDbEJpRSxRQUFRO1lBQ1JDLGtCQUFrQjtRQUN0QjtJQUNKO0lBRUEsTUFBTW5GLFVBQVVoRSxrRUFBZ0JBO0lBQ2hDLElBQUksQ0FBQ2dFLFNBQVM7UUFDVixPQUFPbUU7SUFDWDtJQUNBLDZEQUE2RDtJQUM3RG5FLFFBQVFpQixnQkFBZ0IsR0FBRzdCLG1CQUFtQkosTUFBTSxDQUFDa0MsSUFBSTtJQUN6RCxPQUFPbEI7QUFDWDtBQUVBLDRCQUE0QjtBQUM1QixTQUFTb0YsY0FBY3BGLE9BQXNCO0lBQ3pDLElBQUksSUFBa0IsRUFBYTtJQUNuQyxJQUFJO1FBQ0EsTUFBTXFGLGdCQUFnQnJKLGtFQUFnQkE7UUFDdEMsSUFBSSxDQUFDcUosZUFBZTtRQUVwQixxQ0FBcUM7UUFDckNBLGNBQWNMLFlBQVksR0FBR2hGLFFBQVFnRixZQUFZO1FBQ2pESyxjQUFjSixZQUFZLEdBQUdqRixRQUFRaUYsWUFBWTtRQUNqREksY0FBY3BFLGdCQUFnQixHQUFHakIsUUFBUWlCLGdCQUFnQjtRQUV6RHFFLGVBQWVuRSxPQUFPLENBQUNsRiw0REFBY0EsQ0FBQzBELFdBQVcsRUFBRXlCLEtBQUtDLFNBQVMsQ0FBQ2dFO0lBQ3RFLEVBQUUsT0FBT3BILE9BQU87UUFDWkMsUUFBUUQsS0FBSyxDQUFDLG9DQUFvQ0E7SUFDdEQ7QUFDSjtBQUVBLCtCQUErQjtBQUN4QixNQUFNZ0csaUJBQWlCO0lBQzFCdEQsS0FBS3dEO0lBQ0xELFFBQVFrQjtBQUNaLEVBQUU7QUFFRiw0RUFBNEU7QUFDNUUsU0FBU3RCLHVCQUF1Qm5GLEtBQTBCO0lBQ3RELElBQUksQ0FBQ0EsT0FBTyxPQUFPO0lBRW5CVCxRQUFRc0UsR0FBRyxDQUFDLHlDQUF5QztRQUNqRGpELElBQUlaLE1BQU1ZLEVBQUU7UUFDWmdHLFFBQVE1RyxNQUFNNEcsTUFBTSxFQUFFbEgsSUFBSW1ILENBQUFBLElBQU07Z0JBQUUxRyxNQUFNMEcsRUFBRTFHLElBQUk7WUFBQztRQUMvQzJHLHdCQUF3QjlHLE1BQU04RyxzQkFBc0I7SUFDeEQ7SUFFQSxNQUFNN0csY0FBY0QsTUFBTUMsV0FBVyxFQUFFQyxPQUNqQztRQUFFQSxNQUFNRixNQUFNQyxXQUFXLENBQUNDLElBQUk7UUFBRTZHLGNBQWMvRyxNQUFNQyxXQUFXLENBQUM4RyxZQUFZLElBQUk7SUFBSyxJQUNyRi9HLE1BQU1HLElBQUksSUFBSTtJQUVwQiw0Q0FBNEM7SUFDNUMsTUFBTXlHLFNBQVMsQ0FBQzVHLE1BQU00RyxNQUFNLElBQUksRUFBRSxFQUM3QnBJLE1BQU0sQ0FBQyxDQUFDd0ksUUFDTEMsUUFBUUQsU0FBU0EsTUFBTTdHLElBQUksR0FFOUJULEdBQUcsQ0FBQ3NILENBQUFBLFFBQVU7WUFDWDdHLE1BQU02RyxNQUFNN0csSUFBSTtZQUNoQitHLFNBQVNGLE1BQU1FLE9BQU87WUFDdEJDLFVBQVVILE1BQU1HLFFBQVE7WUFDeEJDLG9CQUFvQkosTUFBTUksa0JBQWtCO1FBQ2hEO0lBRUosTUFBTUMsY0FBYztRQUNoQnpHLElBQUlaLE1BQU1ZLEVBQUU7UUFDWlQsTUFBTUgsTUFBTUcsSUFBSTtRQUNoQkY7UUFDQXFILGFBQWF0SCxNQUFNc0gsV0FBVyxJQUFJO1FBQ2xDVjtRQUNBVyxrQkFBa0J2SCxNQUFNdUgsZ0JBQWdCO1FBQ3hDbkUsVUFBVXBELE1BQU1vRCxRQUFRO1FBQ3hCMEQsd0JBQXdCOUcsTUFBTThHLHNCQUFzQixHQUM5QztZQUFFNUcsTUFBTUYsTUFBTThHLHNCQUFzQixDQUFDNUcsSUFBSTtZQUFFNkcsY0FBYy9HLE1BQU04RyxzQkFBc0IsQ0FBQ0MsWUFBWSxJQUFJO1FBQUssSUFDM0dwRTtJQUNWO0lBRUFwRCxRQUFRc0UsR0FBRyxDQUFDLCtDQUErQztRQUN2RGpELElBQUl5RyxZQUFZekcsRUFBRTtRQUNsQmdHLFFBQVFTLFlBQVlULE1BQU0sQ0FBQ2xILEdBQUcsQ0FBQ21ILENBQUFBLElBQU07Z0JBQUUxRyxNQUFNMEcsRUFBRTFHLElBQUk7WUFBQztRQUNwRDJHLHdCQUF3Qk8sWUFBWVAsc0JBQXNCO0lBQzlEO0lBRUEsT0FBT087QUFDWDtBQUVPLE1BQU1HLDZCQUE2QixPQUN0Q3JFLFlBQ0FDLFVBQ0FxRSxhQUFxQixDQUFDO0lBRXRCLElBQUk7UUFDQSxJQUFJLEtBQTRDLEVBQUUsRUFHakQ7UUFFRGxJLFFBQVFzRSxHQUFHLENBQUMscURBQXFEO1lBQzdEVjtZQUNBQztZQUNBcUU7UUFDSjtRQUVBLE1BQU1DLGNBQWM7WUFDaEJ0RCxXQUFXakI7WUFDWGtCLGNBQWM7Z0JBQ1ZDLFFBQVE7b0JBQ0pDLFFBQVE7d0JBQ0pDLFVBQVVwQixTQUFTb0IsUUFBUTt3QkFDM0JDLFdBQVdyQixTQUFTcUIsU0FBUztvQkFDakM7b0JBQ0FDLFFBQVEsUUFBUSxjQUFjO2dCQUNsQztZQUNKO1lBQ0FDLGdCQUFnQjhDO1FBQ3BCO1FBRUEsTUFBTTlELFVBQVU7WUFDWixnQkFBZ0I7WUFDaEIsa0JBQWtCSix5Q0FBMkM7WUFDN0Qsb0JBQW9CO1FBQ3hCO1FBRUEsTUFBTVMsV0FBVyxNQUFNQyxNQUFNLHNEQUFzRDtZQUMvRUMsUUFBUTtZQUNSUDtZQUNBUSxNQUFNMUIsS0FBS0MsU0FBUyxDQUFDZ0Y7UUFDekI7UUFFQSxJQUFJLENBQUMxRCxTQUFTWSxFQUFFLEVBQUU7WUFDZCxNQUFNK0MsWUFBWSxNQUFNM0QsU0FBUzlELElBQUk7WUFDckNYLFFBQVFELEtBQUssQ0FBQyw0QkFBNEI7Z0JBQ3RDdUYsUUFBUWIsU0FBU2EsTUFBTTtnQkFDdkJDLFlBQVlkLFNBQVNjLFVBQVU7Z0JBQy9CeEYsT0FBT3FJO1lBQ1g7WUFDQSxPQUFPLEVBQUU7UUFDYjtRQUVBLE1BQU01QyxPQUFPLE1BQU1mLFNBQVNnQixJQUFJO1FBRWhDLElBQUksQ0FBQ0QsS0FBSzFFLE1BQU0sSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUN3RSxLQUFLMUUsTUFBTSxLQUFLMEUsS0FBSzFFLE1BQU0sQ0FBQ3JCLE1BQU0sS0FBSyxHQUFHO1lBQ3pFTyxRQUFRc0UsR0FBRyxDQUFDLG9DQUFvQ1Y7WUFDaEQsT0FBTyxFQUFFO1FBQ2I7UUFFQSxPQUFPNEIsS0FBSzFFLE1BQU0sQ0FBQ1gsR0FBRyxDQUFDLENBQUNNLFFBQWdCO2dCQUNwQ1ksSUFBSVosTUFBTVksRUFBRTtnQkFDWlgsYUFBYUQsTUFBTUMsV0FBVyxFQUFFQyxPQUFPO29CQUNuQ0EsTUFBTUYsTUFBTUMsV0FBVyxDQUFDQyxJQUFJO29CQUM1QjZHLGNBQWMvRyxNQUFNQyxXQUFXLENBQUM4RyxZQUFZLElBQUk7Z0JBQ3BELElBQUkvRyxNQUFNQyxXQUFXO2dCQUNyQnFILGFBQWF0SCxNQUFNc0gsV0FBVyxJQUFJO2dCQUNsQ1YsUUFBUTVHLE1BQU00RyxNQUFNLEVBQUVsSCxJQUFJLENBQUNzSCxRQUFnQjt3QkFDdkM3RyxNQUFNNkcsTUFBTTdHLElBQUk7d0JBQ2hCK0csU0FBU0YsTUFBTUUsT0FBTzt3QkFDdEJDLFVBQVVILE1BQU1HLFFBQVE7b0JBQzVCLE9BQU8sRUFBRTtnQkFDVEksa0JBQWtCdkgsTUFBTXVILGdCQUFnQjtnQkFDeENuRSxVQUFVcEQsTUFBTW9ELFFBQVE7Z0JBQ3hCMEQsd0JBQXdCOUcsTUFBTThHLHNCQUFzQixHQUFHO29CQUNuRDVHLE1BQU1GLE1BQU04RyxzQkFBc0IsQ0FBQzVHLElBQUk7b0JBQ3ZDNkcsY0FBYy9HLE1BQU04RyxzQkFBc0IsQ0FBQ0MsWUFBWSxJQUFJO2dCQUMvRCxJQUFJcEU7WUFDUjtJQUNKLEVBQUUsT0FBT3JELE9BQU87UUFDWkMsUUFBUUQsS0FBSyxDQUFDLCtCQUErQkE7UUFDN0MsT0FBTyxFQUFFO0lBQ2I7QUFDSixFQUFFO0FBRUYsc0NBQXNDO0FBQy9CLE1BQU1zSSxjQUFjLE9BQ3ZCcEQsVUFDQUMsV0FDQXhHLGFBQ0F3SixhQUFxQixDQUFDLEVBQ3RCSTtJQUVBLElBQUk7UUFDQSxJQUFJLEtBQTRDLEVBQUUsRUFHakQ7UUFFRCxNQUFNQyxrQkFBa0IsQ0FBQyxDQUFDN0osZUFBZUEsWUFBWWUsTUFBTSxHQUFHO1FBQzlELE1BQU0rSSxpQkFBaUIsQ0FBQyxDQUFDRixjQUFjQSxXQUFXN0ksTUFBTSxHQUFHO1FBRTNELElBQUksQ0FBQzhJLG1CQUFtQixDQUFDQyxnQkFBZ0I7WUFDckN4SSxRQUFRRCxLQUFLLENBQUM7WUFDZCxPQUFPLEVBQUU7UUFDYjtRQUVBLGdGQUFnRjtRQUNoRixJQUFJMEksZ0JBQTBCLEVBQUU7UUFDaEMsSUFBSUYsaUJBQWlCO1lBQ2pCRSxnQkFBZ0JoSyw2QkFBNkJDO1FBQ2pELE9BQU8sSUFBSThKLGdCQUFnQjtZQUN2QkMsZ0JBQWdCSDtRQUNwQjtRQUVBdEksUUFBUXNFLEdBQUcsQ0FBQyxzQ0FBc0M7WUFDOUNXO1lBQ0FDO1lBQ0F1RDtZQUNBUDtZQUNBSyxpQkFBaUIsQ0FBQyxDQUFDN0osYUFBYWU7WUFDaEMrSSxnQkFBZ0IsQ0FBQyxDQUFDRixZQUFZN0k7UUFDbEM7UUFFQSwwQkFBMEI7UUFDMUIsSUFBSTtZQUNBLE1BQU0wSSxjQUFjO2dCQUNoQk07Z0JBQ0FyRCxnQkFBZ0I4QztnQkFDaEJRLHFCQUFxQjtvQkFDakIzRCxRQUFRO3dCQUNKQyxRQUFROzRCQUNKQyxVQUFVQTs0QkFDVkMsV0FBV0E7d0JBQ2Y7d0JBQ0FDLFFBQVEsUUFBUSxjQUFjO29CQUNsQztnQkFDSjtZQUNKO1lBRUEsTUFBTWYsVUFBVTtnQkFDWixnQkFBZ0I7Z0JBQ2hCLGtCQUFrQkoseUNBQTJDO2dCQUM3RCxvQkFBb0I7WUFDeEI7WUFFQSxNQUFNUyxXQUFXLE1BQU1DLE1BQU0sd0RBQXdEO2dCQUNqRkMsUUFBUTtnQkFDUlA7Z0JBQ0FRLE1BQU0xQixLQUFLQyxTQUFTLENBQUNnRjtZQUN6QjtZQUVBLElBQUkxRCxTQUFTWSxFQUFFLEVBQUU7Z0JBQ2IsTUFBTUcsT0FBTyxNQUFNZixTQUFTZ0IsSUFBSTtnQkFDaEMsSUFBSUQsS0FBSzFFLE1BQU0sSUFBSUMsTUFBTUMsT0FBTyxDQUFDd0UsS0FBSzFFLE1BQU0sS0FBSzBFLEtBQUsxRSxNQUFNLENBQUNyQixNQUFNLEdBQUcsR0FBRztvQkFDckUsT0FBTytGLEtBQUsxRSxNQUFNLENBQUNYLEdBQUcsQ0FBQyxDQUFDTSxRQUFnQjs0QkFDcENZLElBQUlaLE1BQU1ZLEVBQUU7NEJBQ1pYLGFBQWFELE1BQU1DLFdBQVcsRUFBRUMsT0FBTztnQ0FDbkNBLE1BQU1GLE1BQU1DLFdBQVcsQ0FBQ0MsSUFBSTtnQ0FDNUI2RyxjQUFjL0csTUFBTUMsV0FBVyxDQUFDOEcsWUFBWSxJQUFJOzRCQUNwRCxJQUFJL0csTUFBTUMsV0FBVzs0QkFDckJxSCxhQUFhdEgsTUFBTXNILFdBQVcsSUFBSTs0QkFDbENWLFFBQVE1RyxNQUFNNEcsTUFBTSxFQUFFbEgsSUFBSSxDQUFDc0gsUUFBZ0I7b0NBQ3ZDN0csTUFBTTZHLE1BQU03RyxJQUFJO29DQUNoQitHLFNBQVNGLE1BQU1FLE9BQU87b0NBQ3RCQyxVQUFVSCxNQUFNRyxRQUFRO2dDQUM1QixPQUFPLEVBQUU7NEJBQ1RJLGtCQUFrQnZILE1BQU11SCxnQkFBZ0I7NEJBQ3hDbkUsVUFBVXBELE1BQU1vRCxRQUFROzRCQUN4QjBELHdCQUF3QjlHLE1BQU04RyxzQkFBc0IsR0FBRztnQ0FDbkQ1RyxNQUFNRixNQUFNOEcsc0JBQXNCLENBQUM1RyxJQUFJO2dDQUN2QzZHLGNBQWMvRyxNQUFNOEcsc0JBQXNCLENBQUNDLFlBQVksSUFBSTs0QkFDL0QsSUFBSXBFO3dCQUNSO2dCQUNKO1lBQ0o7WUFFQSxNQUFNZ0YsWUFBWSxNQUFNM0QsU0FBUzlELElBQUk7WUFDckNYLFFBQVFELEtBQUssQ0FBQywyQkFBMkI7Z0JBQ3JDdUYsUUFBUWIsU0FBU2EsTUFBTTtnQkFDdkJDLFlBQVlkLFNBQVNjLFVBQVU7Z0JBQy9CeEYsT0FBT3FJO1lBQ1g7UUFDSixFQUFFLE9BQU9ySSxPQUFPO1lBQ1pDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1FBQzdDO1FBRUEsc0RBQXNEO1FBQ3REQyxRQUFRc0UsR0FBRyxDQUFDO1FBQ1osTUFBTXFFLGNBQWNILGlCQUFpQkYsVUFBVyxDQUFDLEVBQUUsR0FBRzVKLFdBQVksQ0FBQyxFQUFFO1FBQ3JFLE9BQU8sTUFBTXVKLDJCQUEyQlUsYUFBYTtZQUFFMUQ7WUFBVUM7UUFBVSxHQUFHZ0Q7SUFFbEYsRUFBRSxPQUFPbkksT0FBTztRQUNaQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxPQUFPLEVBQUU7SUFDYjtBQUNKLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmF2ZWwtcml6ei8uL3V0aWxzL3BsYWNlcy11dGlscy50cz81NTVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBsYWNlIHJlbGF0ZWQgaW50ZXJmYWNlc1xuZXhwb3J0IGludGVyZmFjZSBQbGFjZSB7XG4gICAgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZGlzcGxheU5hbWU6IHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBsYW5ndWFnZUNvZGU6IHN0cmluZztcbiAgICB9IHwgc3RyaW5nO1xuICAgIGZvcm1hdHRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYXRpb24/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIH07XG4gICAgcHJpbWFyeVR5cGU6IHN0cmluZztcbiAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lPzoge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGxhbmd1YWdlQ29kZTogc3RyaW5nO1xuICAgIH07XG4gICAgcGhvdG9zOiB7IFxuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHdpZHRoUHg/OiBudW1iZXI7XG4gICAgICAgIGhlaWdodFB4PzogbnVtYmVyO1xuICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM/OiBBcnJheTx7XG4gICAgICAgICAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAgICAgICAgIHVyaT86IHN0cmluZztcbiAgICAgICAgICAgIHBob3RvVXJpPzogc3RyaW5nO1xuICAgICAgICB9PjtcbiAgICB9W107XG4gICAgLy8gT3B0aW9uYWwgaW5kaWNlcyBmb3IgaXRpbmVyYXJ5IHBsYW5uaW5nXG4gICAgZGF5SW5kZXg/OiBudW1iZXI7XG4gICAgb3JkZXJJbmRleD86IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEdvb2dsZVBsYWNlUmVzcG9uc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZT86IHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBsYW5ndWFnZUNvZGU6IHN0cmluZztcbiAgICB9O1xuICAgIGZvcm1hdHRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYXRpb24/OiB7XG4gICAgICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIH07XG4gICAgcHJpbWFyeVR5cGU/OiBzdHJpbmc7XG4gICAgcHJpbWFyeVR5cGVEaXNwbGF5TmFtZT86IHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBsYW5ndWFnZUNvZGU6IHN0cmluZztcbiAgICB9O1xuICAgIHBob3Rvcz86IEFycmF5PHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB3aWR0aFB4PzogbnVtYmVyO1xuICAgICAgICBoZWlnaHRQeD86IG51bWJlcjtcbiAgICAgICAgYXV0aG9yQXR0cmlidXRpb25zPzogQXJyYXk8e1xuICAgICAgICAgICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gICAgICAgICAgICB1cmk/OiBzdHJpbmc7XG4gICAgICAgICAgICBwaG90b1VyaT86IHN0cmluZztcbiAgICAgICAgfT47XG4gICAgfT47XG59XG5cbmltcG9ydCB7IFRyYXZlbFByZWZlcmVuY2UsIFRyYXZlbFNlc3Npb24gfSBmcm9tICcuLi9tYW5hZ2Vycy90eXBlcyc7XG5pbXBvcnQgeyBnZXRTdG9yZWRTZXNzaW9uLCBnZXRTdG9yZWRNZXRyaWNzLCBTRVNTSU9OX0NPTkZJRywgc2FmZVN0b3JhZ2VPcCwgc3RvcmFnZSB9IGZyb20gJy4vc2Vzc2lvbi1tYW5hZ2VyJztcblxuLy8gVXBkYXRlZCBwcmVmZXJlbmNlIHRvIHBsYWNlIHR5cGVzIG1hcHBpbmcgYmFzZWQgb24gdHJhdmVsLXJpenouaHRtbFxuZXhwb3J0IGNvbnN0IHByZWZlcmVuY2VUb1BsYWNlVHlwZXM6IFJlY29yZDxUcmF2ZWxQcmVmZXJlbmNlLCBzdHJpbmdbXT4gPSB7XG4gICAgW1RyYXZlbFByZWZlcmVuY2UuQ3VsdHVyZV06IFtcbiAgICAgICAgJ211c2V1bScsXG4gICAgICAgICdjdWx0dXJhbF9jZW50ZXInLFxuICAgICAgICAnY3VsdHVyYWxfbGFuZG1hcmsnLFxuICAgICAgICAnaGlzdG9yaWNhbF9sYW5kbWFyaycsXG4gICAgICAgICdtb251bWVudCcsXG4gICAgICAgICdhcnRfZ2FsbGVyeScsXG4gICAgICAgICdoaXN0b3JpY2FsX3BsYWNlJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuTmF0dXJlXTogW1xuICAgICAgICAnbmF0aW9uYWxfcGFyaycsXG4gICAgICAgICdzdGF0ZV9wYXJrJyxcbiAgICAgICAgJ2JvdGFuaWNhbF9nYXJkZW4nLFxuICAgICAgICAnd2lsZGxpZmVfcGFyaycsXG4gICAgICAgICdnYXJkZW4nLFxuICAgICAgICAnaGlraW5nX2FyZWEnLFxuICAgICAgICAnd2lsZGxpZmVfcmVmdWdlJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuRm9vZF06IFtcbiAgICAgICAgJ3Jlc3RhdXJhbnQnLFxuICAgICAgICAnZmluZV9kaW5pbmdfcmVzdGF1cmFudCcsXG4gICAgICAgICdjYWZlJyxcbiAgICAgICAgJ2Zvb2RfY291cnQnLFxuICAgICAgICAnYmFrZXJ5JyxcbiAgICAgICAgJ2Rlc3NlcnRfc2hvcCcsXG4gICAgICAgICdiYXJfYW5kX2dyaWxsJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuUmVsYXhhdGlvbl06IFtcbiAgICAgICAgJ3NwYScsXG4gICAgICAgICd3ZWxsbmVzc19jZW50ZXInLFxuICAgICAgICAnc2hvcHBpbmdfbWFsbCcsXG4gICAgICAgICdiZWFjaCcsXG4gICAgICAgICdnYXJkZW4nLFxuICAgICAgICAncGxhemEnLFxuICAgICAgICAneW9nYV9zdHVkaW8nXG4gICAgXSxcbiAgICBbVHJhdmVsUHJlZmVyZW5jZS5BZHZlbnR1cmVdOiBbXG4gICAgICAgICdhZHZlbnR1cmVfc3BvcnRzX2NlbnRlcicsXG4gICAgICAgICdhbXVzZW1lbnRfcGFyaycsXG4gICAgICAgICdoaWtpbmdfYXJlYScsXG4gICAgICAgICdzcG9ydHNfY29tcGxleCcsXG4gICAgICAgICd3YXRlcl9wYXJrJyxcbiAgICAgICAgJ29mZl9yb2FkaW5nX2FyZWEnLFxuICAgICAgICAnc3BvcnRzX2FjdGl2aXR5X2xvY2F0aW9uJ1xuICAgIF0sXG4gICAgW1RyYXZlbFByZWZlcmVuY2UuU2hvcHBpbmddOiBbIC8vIEFydHMgJiBNdXNldW1cbiAgICAgICAgJ2FydF9nYWxsZXJ5JyxcbiAgICAgICAgJ2FydF9zdHVkaW8nLFxuICAgICAgICAncGVyZm9ybWluZ19hcnRzX3RoZWF0ZXInLFxuICAgICAgICAnYXVkaXRvcml1bScsXG4gICAgICAgICdjb25jZXJ0X2hhbGwnLFxuICAgICAgICAnbXVzZXVtJyxcbiAgICAgICAgJ29wZXJhX2hvdXNlJ1xuICAgIF1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgcGxhY2UgdHlwZXMgYmFzZWQgb24gcHJlZmVyZW5jZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGFjZVR5cGVzRnJvbVByZWZlcmVuY2VzKHByZWZlcmVuY2VzOiBUcmF2ZWxQcmVmZXJlbmNlW10pOiBzdHJpbmdbXSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVHJhY2sgdXNlZCB0eXBlcyB0byBhdm9pZCByZXBlYXRzXG4gICAgICAgIGNvbnN0IHVzZWRUeXBlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICBjb25zdCByZXN1bHRUeXBlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc3MgZWFjaCBwcmVmZXJlbmNlXG4gICAgICAgIHByZWZlcmVuY2VzLmZvckVhY2gocHJlZiA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVUeXBlcyA9IHByZWZlcmVuY2VUb1BsYWNlVHlwZXNbcHJlZl0/LmZpbHRlcihcbiAgICAgICAgICAgICAgICB0eXBlID0+ICF1c2VkVHlwZXMuaGFzKHR5cGUpXG4gICAgICAgICAgICApIHx8IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUYWtlIDItMyByYW5kb20gdHlwZXMgZnJvbSBlYWNoIHByZWZlcmVuY2VcbiAgICAgICAgICAgIGNvbnN0IG51bVR5cGVzID0gTWF0aC5taW4oTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgKyAyLCBhdmFpbGFibGVUeXBlcy5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUeXBlcyA9IGF2YWlsYWJsZVR5cGVzXG4gICAgICAgICAgICAgICAgLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSlcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgbnVtVHlwZXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHRvIHJlc3VsdHMgYW5kIG1hcmsgYXMgdXNlZFxuICAgICAgICAgICAgc2VsZWN0ZWRUeXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdFR5cGVzLnB1c2godHlwZSk7XG4gICAgICAgICAgICAgICAgdXNlZFR5cGVzLmFkZCh0eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0VHlwZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBwbGFjZSB0eXBlcyBmcm9tIHByZWZlcmVuY2VzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFsndG91cmlzdF9hdHRyYWN0aW9uJ107IC8vIERlZmF1bHQgZmFsbGJhY2tcbiAgICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgcHJpbWFyeSB0eXBlXG5leHBvcnQgY29uc3QgZm9ybWF0UHJpbWFyeVR5cGUgPSAodHlwZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gdHlwZS5zcGxpdCgnXycpXG4gICAgICAgIC5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSlcbiAgICAgICAgLmpvaW4oJyAnKTtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZGlzcGxheSBuYW1lIGZvciBwbGFjZSB0eXBlXG5leHBvcnQgY29uc3QgZ2V0RGlzcGxheU5hbWUgPSAocGxhY2U6IFBsYWNlKTogc3RyaW5nID0+IHtcbiAgICBpZiAodHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcGxhY2UuZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIHJldHVybiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCB8fCBwbGFjZS5uYW1lIHx8ICcnO1xufTtcblxuLy8gRnVuY3Rpb24gdG8gZmlsdGVyIG91dCBkdXBsaWNhdGUgcGxhY2VzXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVW5pcXVlUGxhY2VzKHBsYWNlczogUGxhY2VbXSk6IFBsYWNlW10ge1xuICAgIGlmICghcGxhY2VzIHx8ICFBcnJheS5pc0FycmF5KHBsYWNlcykpIHJldHVybiBbXTtcblxuICAgIC8vIEdldCBzYXZlZCBwbGFjZXMgZnJvbSBnbG9iYWwgc3RhdGUgaWYgYXZhaWxhYmxlXG4gICAgY29uc3Qgc2F2ZWRQbGFjZXMgPSBzYXZlZFBsYWNlc01hbmFnZXIuZ2V0UGxhY2VzKCk7XG5cbiAgICBjb25zdCBzYXZlZFBsYWNlSWRzID0gbmV3IFNldChzYXZlZFBsYWNlcy5tYXAocGxhY2UgPT4gcGxhY2UuaWQpKTtcbiAgICBjb25zdCBzYXZlZFBsYWNlTmFtZXMgPSBuZXcgU2V0KHNhdmVkUGxhY2VzLm1hcChwbGFjZSA9PiBcbiAgICAgICAgdHlwZW9mIHBsYWNlLmRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyBcbiAgICAgICAgICAgID8gcGxhY2UuZGlzcGxheU5hbWUudG9Mb3dlckNhc2UoKSBcbiAgICAgICAgICAgIDogcGxhY2UuZGlzcGxheU5hbWUudGV4dC50b0xvd2VyQ2FzZSgpXG4gICAgKSk7XG5cbiAgICAgLy8gRmlsdGVyIG91dCBwbGFjZXMgdGhhdDpcbiAgICAvLyAxLiBIYXZlIHNhbWUgSUQgYXMgc2F2ZWQgcGxhY2VcbiAgICAvLyAyLiBIYXZlIHNhbWUgbmFtZSBhcyBzYXZlZCBwbGFjZVxuICAgIHJldHVybiBwbGFjZXMuZmlsdGVyKHBsYWNlID0+IHtcbiAgICAgICAgaWYgKCFwbGFjZS5pZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc2F2ZWRQbGFjZUlkcy5oYXMocGxhY2UuaWQpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwbGFjZU5hbWUgPSB0eXBlb2YgcGxhY2UuZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnIFxuICAgICAgICAgICAgPyBwbGFjZS5kaXNwbGF5TmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICA6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoc2F2ZWRQbGFjZU5hbWVzLmhhcyhwbGFjZU5hbWUpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cblxuLy8gQWRkIFNhdmVkUGxhY2VzTWFuYWdlciBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgU2F2ZWRQbGFjZXNNYW5hZ2VyIHtcbiAgICBwbGFjZXM6IE1hcDxzdHJpbmcsIFBsYWNlPjtcbiAgICBhZGRQbGFjZTogKHBsYWNlOiBQbGFjZSkgPT4gdm9pZDtcbiAgICByZW1vdmVQbGFjZTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgZ2V0UGxhY2VzOiAoKSA9PiBQbGFjZVtdO1xuICAgIGdldFBsYWNlQnlJZDogKGlkOiBzdHJpbmcpID0+IFBsYWNlIHwgdW5kZWZpbmVkO1xuICAgIGhhc1BsYWNlOiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICB1cGRhdGVQbGFjZTogKHBsYWNlOiBQbGFjZSkgPT4gdm9pZDtcbiAgICB1cGRhdGVQbGFjZXM6ICh1cGRhdGVkUGxhY2VzOiBQbGFjZVtdKSA9PiB2b2lkO1xuICAgIF9wZXJzaXN0OiAoKSA9PiB2b2lkO1xuICAgIF9ub3RpZnlDaGFuZ2U6ICgpID0+IHZvaWQ7XG4gICAgc2VyaWFsaXplOiAoKSA9PiBzdHJpbmc7XG59XG5cbmNvbnN0IFNUT1JBR0VfS0VZID0gJ3NhdmVkX3BsYWNlcyc7XG5cbi8vIFNhdmVkUGxhY2VzTWFuYWdlciBzaW5nbGV0b25cbmNvbnN0IGNyZWF0ZVNhdmVkUGxhY2VzTWFuYWdlciA9ICgpOiBTYXZlZFBsYWNlc01hbmFnZXIgPT4ge1xuICAgIGNvbnN0IHBsYWNlcyA9IG5ldyBNYXA8c3RyaW5nLCBQbGFjZT4oKTtcbiAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIExvYWQgcGxhY2VzIGZyb20gc2Vzc2lvblN0b3JhZ2VcbiAgICBjb25zdCBsb2FkRnJvbVN0b3JhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICghaW5pdGlhbGl6ZWQgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBnZXRTdG9yZWRTZXNzaW9uKCk7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbj8uc2F2ZWRQbGFjZXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBleGlzdGluZyBwbGFjZXMgYmVmb3JlIGxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnNhdmVkUGxhY2VzLmZvckVhY2gocGxhY2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlPy5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlcy5zZXQocGxhY2UuaWQsIHBsYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW3NhdmVkUGxhY2VzTWFuYWdlcl0gRXJyb3IgbG9hZGluZyBwbGFjZXM6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZXMsXG4gICAgICAgIGFkZFBsYWNlKHBsYWNlOiBQbGFjZSkge1xuICAgICAgICAgICAgbG9hZEZyb21TdG9yYWdlKCk7IC8vIEVuc3VyZSBwbGFjZXMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgaWYgKHBsYWNlPy5pZCkge1xuICAgICAgICAgICAgICAgIHBsYWNlcy5zZXQocGxhY2UuaWQsIHBsYWNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZXJzaXN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVBsYWNlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGxvYWRGcm9tU3RvcmFnZSgpOyAvLyBFbnN1cmUgcGxhY2VzIGFyZSBsb2FkZWRcbiAgICAgICAgICAgIHBsYWNlcy5kZWxldGUoaWQpO1xuICAgICAgICAgICAgdGhpcy5fcGVyc2lzdCgpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBsYWNlcygpOiBQbGFjZVtdIHtcbiAgICAgICAgICAgIGxvYWRGcm9tU3RvcmFnZSgpOyAvLyBFbnN1cmUgcGxhY2VzIGFyZSBsb2FkZWRcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHBsYWNlcy52YWx1ZXMoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBsYWNlQnlJZChpZDogc3RyaW5nKTogUGxhY2UgfCB1bmRlZmluZWQge1xuICAgICAgICAgICAgbG9hZEZyb21TdG9yYWdlKCk7IC8vIEVuc3VyZSBwbGFjZXMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgcmV0dXJuIHBsYWNlcy5nZXQoaWQpO1xuICAgICAgICB9LFxuICAgICAgICBoYXNQbGFjZShpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgICAgICBsb2FkRnJvbVN0b3JhZ2UoKTsgLy8gRW5zdXJlIHBsYWNlcyBhcmUgbG9hZGVkXG4gICAgICAgICAgICByZXR1cm4gcGxhY2VzLmhhcyhpZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVBsYWNlKHBsYWNlOiBQbGFjZSkge1xuICAgICAgICAgICAgaWYgKHBsYWNlPy5pZCAmJiBwbGFjZXMuaGFzKHBsYWNlLmlkKSkge1xuICAgICAgICAgICAgICAgIHBsYWNlcy5zZXQocGxhY2UuaWQsIHBsYWNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZXJzaXN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVBsYWNlcyh1cGRhdGVkUGxhY2VzOiBQbGFjZVtdKSB7XG4gICAgICAgICAgICBsb2FkRnJvbVN0b3JhZ2UoKTsgLy8gRW5zdXJlIHBsYWNlcyBhcmUgbG9hZGVkXG4gICAgICAgICAgICB1cGRhdGVkUGxhY2VzLmZvckVhY2gocGxhY2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZT8uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VzLnNldChwbGFjZS5pZCwgcGxhY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fcGVyc2lzdCgpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9wZXJzaXN0KCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2VzQXJyYXkgPSBBcnJheS5mcm9tKHBsYWNlcy52YWx1ZXMoKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRyYXZlbF9yaXp6X3Nlc3Npb25cbiAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uID0gZ2V0U3RvcmVkU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24uc2F2ZWRQbGFjZXMgPSBwbGFjZXNBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zYXZlZFBsYWNlc0NvdW50ID0gcGxhY2VzLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIHNhZmVTdG9yYWdlT3AoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZT8uc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICAgICAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25vdGlmeUNoYW5nZSgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zYXZlZFBsYWNlcyA9IEFycmF5LmZyb20odGhpcy5wbGFjZXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIGV2ZW50IHdpdGggdHlwZSB0byBoYW5kbGUgZGlmZmVyZW50IHVwZGF0ZSBzY2VuYXJpb3NcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3NhdmVkUGxhY2VzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZXM6IEFycmF5LmZyb20odGhpcy5wbGFjZXMudmFsdWVzKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMucGxhY2VzLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbShwbGFjZXMudmFsdWVzKCkpKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2F2ZWRQbGFjZXNNYW5hZ2VyID0gY3JlYXRlU2F2ZWRQbGFjZXNNYW5hZ2VyKCk7XG5cbi8vIEluaXRpYWxpemUgb24gY2xpZW50IHNpZGVcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNhdmVkUGxhY2VzTWFuYWdlci5wbGFjZXMgPSBuZXcgTWFwPHN0cmluZywgUGxhY2U+KCk7XG59XG5cbi8vIERlY2xhcmUgd2luZG93IGludGVyZmFjZSBmb3Igc2F2ZWQgcGxhY2VzXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgICAgIHNhdmVkUGxhY2VzOiBQbGFjZVtdO1xuICAgICAgICBhZGRQbGFjZVRvTWFwPzogKHBsYWNlOiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgICAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgICAgICAgICB0aXRsZT86IHN0cmluZztcbiAgICAgICAgICAgIHBsYWNlPzogUGxhY2U7XG4gICAgICAgIH0pID0+IHZvaWQ7XG4gICAgICAgIGdldFNhdmVkUGxhY2VzPzogKCkgPT4gUGxhY2VbXTtcbiAgICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBoYW5kbGUgZGlmZmVyZW50IHNlYXJjaCBzdHJhdGVnaWVzXG5hc3luYyBmdW5jdGlvbiBzZWFyY2hXaXRoU3RyYXRlZ3koXG4gICAgc2VhcmNoVGV4dDogc3RyaW5nLFxuICAgIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyIH0sXG4gICAgY2l0eU5hbWU6IHN0cmluZyxcbiAgICB1c2VBbHRlcm5hdGVTZWFyY2g6IGJvb2xlYW5cbik6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HT09HTEVfTUFQU19BUElfS0VZKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR29vZ2xlIE1hcHMgQVBJIGtleSBpcyBtaXNzaW5nJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ1gtR29vZy1BcGktS2V5JzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSxcbiAgICAgICAgJ1gtR29vZy1GaWVsZE1hc2snOiAncGxhY2VzLmlkLHBsYWNlcy5kaXNwbGF5TmFtZSxwbGFjZXMuZm9ybWF0dGVkQWRkcmVzcyxwbGFjZXMubG9jYXRpb24scGxhY2VzLnByaW1hcnlUeXBlLHBsYWNlcy5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLHBsYWNlcy5waG90b3MubmFtZSxwbGFjZXMucGhvdG9zLndpZHRoUHgscGxhY2VzLnBob3Rvcy5oZWlnaHRQeCdcbiAgICB9IGFzIGNvbnN0O1xuXG4gICAgLy8gQ2hvb3NlIHF1ZXJ5IGJhc2VkIG9uIHdoZXRoZXIgd2UncmUgZG9pbmcgYWx0ZXJuYXRlIHNlYXJjaFxuICAgIGNvbnN0IHF1ZXJ5ID0gdXNlQWx0ZXJuYXRlU2VhcmNoIFxuICAgICAgICA/IGBkaWZmZXJlbnQgJHtzZWFyY2hUZXh0fSBpbiAke2NpdHlOYW1lfWBcbiAgICAgICAgOiBgJHtzZWFyY2hUZXh0fSAke2NpdHlOYW1lfWA7XG5cbiAgICBjb25zb2xlLmxvZyhgW3NlYXJjaFdpdGhTdHJhdGVneV0gVXNpbmcgJHt1c2VBbHRlcm5hdGVTZWFyY2ggPyAnYWx0ZXJuYXRlJyA6ICdvcmlnaW5hbCd9IHNlYXJjaDpgLCBxdWVyeSk7XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdHJ5U2VhcmNoKHF1ZXJ5LCBoZWFkZXJzLCBsb2NhdGlvbik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdHJ5U2VhcmNoKFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgaGVhZGVyczogYW55LFxuICAgIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyIH1cbik6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9wbGFjZXMuZ29vZ2xlYXBpcy5jb20vdjEvcGxhY2VzOnNlYXJjaFRleHQnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdGV4dFF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbkJpYXM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBsb2NhdGlvbi5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIwMDAwLjBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0Q291bnQ6IDFcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t0cnlTZWFyY2hdIFNlYXJjaCBmYWlsZWQ6Jywge1xuICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBpZiAoIWRhdGEucGxhY2VzPy5bMF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdHJ5U2VhcmNoXSBObyBwbGFjZXMgZm91bmQgZm9yIHF1ZXJ5OicsIHF1ZXJ5KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1t0cnlTZWFyY2hdIEZvdW5kIG5ldyBwbGFjZTonLCB7XG4gICAgICAgICAgICBpZDogZGF0YS5wbGFjZXNbMF0uaWQsXG4gICAgICAgICAgICBuYW1lOiBkYXRhLnBsYWNlc1swXS5kaXNwbGF5TmFtZT8udGV4dCB8fCBkYXRhLnBsYWNlc1swXS5uYW1lXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7IHBsYWNlczogW2RhdGEucGxhY2VzWzBdXSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t0cnlTZWFyY2hdIEVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoUGxhY2VCeVRleHQoXG4gICAgc2VhcmNoVGV4dDogc3RyaW5nLFxuICAgIGxvY2F0aW9uOiB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyIH0sXG4gICAgZGVzdGluYXRpb246IHN0cmluZ1xuKTogUHJvbWlzZTxQbGFjZSB8IG51bGw+IHtcbiAgICBjb25zb2xlLmxvZygnW3NlYXJjaFBsYWNlQnlUZXh0XSBTdGFydGluZyBzZWFyY2ggd2l0aDonLCB7XG4gICAgICAgIHNlYXJjaFRleHQsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZXN0aW5hdGlvblxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2l0eU5hbWUgPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VhcmNoV2l0aFN0cmF0ZWd5KHNlYXJjaFRleHQsIGxvY2F0aW9uLCBjaXR5TmFtZSwgZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFyZXN1bHQ/LnBsYWNlcz8uWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBsYWNlID0gdHJhbnNmb3JtUGxhY2VSZXNwb25zZShyZXN1bHQucGxhY2VzWzBdKTtcbiAgICAgICAgaWYgKCFwbGFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBwbGFjZSBpcyBhbHJlYWR5IHNhdmVkIHVzaW5nIHNhdmVkUGxhY2VzTWFuYWdlclxuICAgICAgICBjb25zdCBpc0FscmVhZHlTYXZlZCA9IHNhdmVkUGxhY2VzTWFuYWdlci5oYXNQbGFjZShwbGFjZS5pZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWlzQWxyZWFkeVNhdmVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3NlYXJjaFBsYWNlQnlUZXh0XSBBZGRpbmcgbmV3IHBsYWNlOicsIHtcbiAgICAgICAgICAgICAgICBpZDogcGxhY2UuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogZ2V0RGlzcGxheU5hbWUocGxhY2UpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNhdmVkUGxhY2VzTWFuYWdlci5hZGRQbGFjZShwbGFjZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBtZXRyaWNzXG4gICAgICAgICAgICBjb25zdCBtZXRyaWNzOiBUcmF2ZWxTZXNzaW9uID0gbWV0cmljc01hbmFnZXIuZ2V0KCk7XG4gICAgICAgICAgICBtZXRyaWNzLnNhdmVkUGxhY2VzQ291bnQgPSBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemU7XG4gICAgICAgICAgICBtZXRyaWNzTWFuYWdlci51cGRhdGUobWV0cmljcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnW3NlYXJjaFBsYWNlQnlUZXh0XSBGb3VuZCBwbGFjZTonLCB7XG4gICAgICAgICAgICBpZDogcGxhY2UuaWQsXG4gICAgICAgICAgICBuYW1lOiBnZXREaXNwbGF5TmFtZShwbGFjZSksXG4gICAgICAgICAgICBpc0FscmVhZHlTYXZlZFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcGxhY2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW3NlYXJjaFBsYWNlQnlUZXh0XSBFcnJvciBzZWFyY2hpbmcgZm9yIHBsYWNlOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG4vLyBJbml0aWFsaXplIG1ldHJpY3MgaW4gc3RvcmFnZVxuZnVuY3Rpb24gaW5pdGlhbGl6ZU1ldHJpY3MoKTogVHJhdmVsU2Vzc2lvbiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXNzaW9uSWQ6ICcnLFxuICAgICAgICAgICAgc3RhcnRUaW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgbGFzdEFjdGl2ZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGV4cGlyZXNBdDogRGF0ZS5ub3coKSArIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjogJycsXG4gICAgICAgICAgICBzdGFydERhdGU6ICcnLFxuICAgICAgICAgICAgZW5kRGF0ZTogJycsXG4gICAgICAgICAgICBwcmVmZXJlbmNlczogW10sXG4gICAgICAgICAgICBidWRnZXQ6ICcnLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6ICcnLFxuICAgICAgICAgICAgdHJhbnNwb3J0OiBbXSxcbiAgICAgICAgICAgIHNhdmVkUGxhY2VzOiBbXSxcbiAgICAgICAgICAgIGN1cnJlbnRTdGFnZTogMSxcbiAgICAgICAgICAgIHRvdGFsUHJvbXB0czogMCxcbiAgICAgICAgICAgIHN0YWdlUHJvbXB0czogeyAxOiAwLCAyOiAwLCAzOiAwIH0sXG4gICAgICAgICAgICBzYXZlZFBsYWNlc0NvdW50OiAwLFxuICAgICAgICAgICAgaXNQYWlkOiBmYWxzZSxcbiAgICAgICAgICAgIHBheW1lbnRSZWZlcmVuY2U6ICcnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGdldFN0b3JlZFNlc3Npb24oKTtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVNZXRyaWNzKCk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBlbnN1cmUgc2F2ZWRQbGFjZXNDb3VudCBtYXRjaGVzIGFjdHVhbCBzYXZlZCBwbGFjZXNcbiAgICBzZXNzaW9uLnNhdmVkUGxhY2VzQ291bnQgPSBzYXZlZFBsYWNlc01hbmFnZXIucGxhY2VzLnNpemU7XG4gICAgcmV0dXJuIHNlc3Npb247XG59XG5cbi8vIFVwZGF0ZSBtZXRyaWNzIGluIHN0b3JhZ2VcbmZ1bmN0aW9uIHVwZGF0ZU1ldHJpY3Moc2Vzc2lvbjogVHJhdmVsU2Vzc2lvbikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0b3JlZFNlc3Npb24gPSBnZXRTdG9yZWRTZXNzaW9uKCk7XG4gICAgICAgIGlmICghc3RvcmVkU2Vzc2lvbikgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIG9ubHkgbWV0cmljcy1yZWxhdGVkIGZpZWxkc1xuICAgICAgICBzdG9yZWRTZXNzaW9uLnRvdGFsUHJvbXB0cyA9IHNlc3Npb24udG90YWxQcm9tcHRzO1xuICAgICAgICBzdG9yZWRTZXNzaW9uLnN0YWdlUHJvbXB0cyA9IHNlc3Npb24uc3RhZ2VQcm9tcHRzO1xuICAgICAgICBzdG9yZWRTZXNzaW9uLnNhdmVkUGxhY2VzQ291bnQgPSBzZXNzaW9uLnNhdmVkUGxhY2VzQ291bnQ7XG4gICAgICAgIFxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzdG9yZWRTZXNzaW9uKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1BsYWNlc10gRXJyb3IgdXBkYXRpbmcgbWV0cmljczonLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyBFeHBvcnQgdGhlIG1ldHJpY3MgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgbWV0cmljc01hbmFnZXIgPSB7XG4gICAgZ2V0OiBpbml0aWFsaXplTWV0cmljcyxcbiAgICB1cGRhdGU6IHVwZGF0ZU1ldHJpY3Ncbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gR29vZ2xlIFBsYWNlcyBBUEkgcmVzcG9uc2UgdG8gb3VyIFBsYWNlIHR5cGVcbmZ1bmN0aW9uIHRyYW5zZm9ybVBsYWNlUmVzcG9uc2UocGxhY2U6IEdvb2dsZVBsYWNlUmVzcG9uc2UpOiBQbGFjZSB8IG51bGwge1xuICAgIGlmICghcGxhY2UpIHJldHVybiBudWxsO1xuXG4gICAgY29uc29sZS5sb2coJ1t0cmFuc2Zvcm1QbGFjZVJlc3BvbnNlXSBJbnB1dCBwbGFjZTonLCB7XG4gICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgcGhvdG9zOiBwbGFjZS5waG90b3M/Lm1hcChwID0+ICh7IG5hbWU6IHAubmFtZSB9KSksXG4gICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWVcbiAgICB9KTtcblxuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gcGxhY2UuZGlzcGxheU5hbWU/LnRleHQgXG4gICAgICAgID8geyB0ZXh0OiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LCBsYW5ndWFnZUNvZGU6IHBsYWNlLmRpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nIH1cbiAgICAgICAgOiBwbGFjZS5uYW1lIHx8ICcnO1xuXG4gICAgLy8gRW5zdXJlIHBob3RvcyBhcnJheSBpcyBwcm9wZXJseSBmb3JtYXR0ZWRcbiAgICBjb25zdCBwaG90b3MgPSAocGxhY2UucGhvdG9zIHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChwaG90byk6IHBob3RvIGlzIE5vbk51bGxhYmxlPHR5cGVvZiBwaG90bz4gPT4gXG4gICAgICAgICAgICBCb29sZWFuKHBob3RvICYmIHBob3RvLm5hbWUpXG4gICAgICAgIClcbiAgICAgICAgLm1hcChwaG90byA9PiAoe1xuICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZSxcbiAgICAgICAgICAgIHdpZHRoUHg6IHBob3RvLndpZHRoUHgsXG4gICAgICAgICAgICBoZWlnaHRQeDogcGhvdG8uaGVpZ2h0UHgsXG4gICAgICAgICAgICBhdXRob3JBdHRyaWJ1dGlvbnM6IHBob3RvLmF1dGhvckF0dHJpYnV0aW9uc1xuICAgICAgICB9KSk7XG5cbiAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHtcbiAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICBuYW1lOiBwbGFjZS5uYW1lLFxuICAgICAgICBkaXNwbGF5TmFtZSxcbiAgICAgICAgcHJpbWFyeVR5cGU6IHBsYWNlLnByaW1hcnlUeXBlIHx8ICdwbGFjZScsXG4gICAgICAgIHBob3RvcyxcbiAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcGxhY2UuZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgbG9jYXRpb246IHBsYWNlLmxvY2F0aW9uLFxuICAgICAgICBwcmltYXJ5VHlwZURpc3BsYXlOYW1lOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lIFxuICAgICAgICAgICAgPyB7IHRleHQ6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUudGV4dCwgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdbdHJhbnNmb3JtUGxhY2VSZXNwb25zZV0gVHJhbnNmb3JtZWQgcGxhY2U6Jywge1xuICAgICAgICBpZDogdHJhbnNmb3JtZWQuaWQsXG4gICAgICAgIHBob3RvczogdHJhbnNmb3JtZWQucGhvdG9zLm1hcChwID0+ICh7IG5hbWU6IHAubmFtZSB9KSksXG4gICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHRyYW5zZm9ybWVkLnByaW1hcnlUeXBlRGlzcGxheU5hbWVcbiAgICB9KTtcblxuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbn1cblxuZXhwb3J0IGNvbnN0IHNlYXJjaE11bHRpcGxlUGxhY2VzQnlUZXh0ID0gYXN5bmMgKFxuICAgIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICAgIG1heFJlc3VsdHM6IG51bWJlciA9IDVcbik6IFByb21pc2U8UGxhY2VbXT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignR29vZ2xlIE1hcHMgQVBJIGtleSBpcyBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIHNlYXJjaE11bHRpcGxlUGxhY2VzQnlUZXh0IHdpdGggcGFyYW1zOicsIHtcbiAgICAgICAgICAgIHNlYXJjaFRleHQsXG4gICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgIG1heFJlc3VsdHNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XG4gICAgICAgICAgICB0ZXh0UXVlcnk6IHNlYXJjaFRleHQsXG4gICAgICAgICAgICBsb2NhdGlvbkJpYXM6IHtcbiAgICAgICAgICAgICAgICBjaXJjbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jYXRpb24ubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvY2F0aW9uLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIwMDAwLjAgLy8gMjBrbSByYWRpdXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4UmVzdWx0Q291bnQ6IG1heFJlc3VsdHNcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdYLUdvb2ctQXBpLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9NQVBTX0FQSV9LRVksXG4gICAgICAgICAgICAnWC1Hb29nLUZpZWxkTWFzayc6ICdwbGFjZXMuaWQscGxhY2VzLmRpc3BsYXlOYW1lLHBsYWNlcy5mb3JtYXR0ZWRBZGRyZXNzLHBsYWNlcy5sb2NhdGlvbixwbGFjZXMucHJpbWFyeVR5cGUscGxhY2VzLnByaW1hcnlUeXBlRGlzcGxheU5hbWUscGxhY2VzLnBob3Rvcy5uYW1lLHBsYWNlcy5waG90b3Mud2lkdGhQeCxwbGFjZXMucGhvdG9zLmhlaWdodFB4J1xuICAgICAgICB9IGFzIGNvbnN0O1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcGxhY2VzLmdvb2dsZWFwaXMuY29tL3YxL3BsYWNlczpzZWFyY2hUZXh0Jywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZWFyY2ggcGxhY2VzOicsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvckRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZGF0YS5wbGFjZXMgfHwgIUFycmF5LmlzQXJyYXkoZGF0YS5wbGFjZXMpIHx8IGRhdGEucGxhY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIHBsYWNlcyBmb3VuZCBmb3IgdGV4dCBzZWFyY2g6Jywgc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YS5wbGFjZXMubWFwKChwbGFjZTogYW55KSA9PiAoe1xuICAgICAgICAgICAgaWQ6IHBsYWNlLmlkLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IHBsYWNlLmRpc3BsYXlOYW1lPy50ZXh0ID8ge1xuICAgICAgICAgICAgICAgIHRleHQ6IHBsYWNlLmRpc3BsYXlOYW1lLnRleHQsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5kaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJ1xuICAgICAgICAgICAgfSA6IHBsYWNlLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgcHJpbWFyeVR5cGU6IHBsYWNlLnByaW1hcnlUeXBlIHx8ICdwbGFjZScsXG4gICAgICAgICAgICBwaG90b3M6IHBsYWNlLnBob3Rvcz8ubWFwKChwaG90bzogYW55KSA9PiAoeyBcbiAgICAgICAgICAgICAgICBuYW1lOiBwaG90by5uYW1lLFxuICAgICAgICAgICAgICAgIHdpZHRoUHg6IHBob3RvLndpZHRoUHgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0UHg6IHBob3RvLmhlaWdodFB4XG4gICAgICAgICAgICB9KSkgfHwgW10sXG4gICAgICAgICAgICBmb3JtYXR0ZWRBZGRyZXNzOiBwbGFjZS5mb3JtYXR0ZWRBZGRyZXNzLFxuICAgICAgICAgICAgbG9jYXRpb246IHBsYWNlLmxvY2F0aW9uLFxuICAgICAgICAgICAgcHJpbWFyeVR5cGVEaXNwbGF5TmFtZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZSA/IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLnRleHQsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlOiBwbGFjZS5wcmltYXJ5VHlwZURpc3BsYXlOYW1lLmxhbmd1YWdlQ29kZSB8fCAnZW4nXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmcgZm9yIHBsYWNlczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuXG4vLyBGZXRjaCBwbGFjZXMgZnJvbSBHb29nbGUgUGxhY2VzIEFQSVxuZXhwb3J0IGNvbnN0IGZldGNoUGxhY2VzID0gYXN5bmMgKFxuICAgIGxhdGl0dWRlOiBudW1iZXIsXG4gICAgbG9uZ2l0dWRlOiBudW1iZXIsXG4gICAgcHJlZmVyZW5jZXM/OiBUcmF2ZWxQcmVmZXJlbmNlW10sXG4gICAgbWF4UmVzdWx0czogbnVtYmVyID0gNSxcbiAgICBwbGFjZVR5cGVzPzogc3RyaW5nW11cbik6IFByb21pc2U8UGxhY2VbXT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignR29vZ2xlIE1hcHMgQVBJIGtleSBpcyBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcm9tUHJlZmVyZW5jZXMgPSAhIXByZWZlcmVuY2VzICYmIHByZWZlcmVuY2VzLmxlbmd0aCA+IDA7XG4gICAgICAgIGNvbnN0IGZyb21QbGFjZVR5cGVzID0gISFwbGFjZVR5cGVzICYmIHBsYWNlVHlwZXMubGVuZ3RoID4gMDtcbiAgICAgICAgXG4gICAgICAgIGlmICghZnJvbVByZWZlcmVuY2VzICYmICFmcm9tUGxhY2VUeXBlcykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gcHJlZmVyZW5jZXMgb3IgcGxhY2UgdHlwZXMgcHJvdmlkZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZSBwcmVmZXJlbmNlcyBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIHVzZSBwbGFjZVR5cGVzLCBvdGhlcndpc2UgdXNlIGRlZmF1bHRzXG4gICAgICAgIGxldCBpbmNsdWRlZFR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAoZnJvbVByZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICBpbmNsdWRlZFR5cGVzID0gZ2V0UGxhY2VUeXBlc0Zyb21QcmVmZXJlbmNlcyhwcmVmZXJlbmNlcyEpO1xuICAgICAgICB9IGVsc2UgaWYgKGZyb21QbGFjZVR5cGVzKSB7XG4gICAgICAgICAgICBpbmNsdWRlZFR5cGVzID0gcGxhY2VUeXBlcyE7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIGZldGNocGxhY2VzIHdpdGggcGFyYW1zOicsIHtcbiAgICAgICAgICAgIGxhdGl0dWRlLFxuICAgICAgICAgICAgbG9uZ2l0dWRlLFxuICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyxcbiAgICAgICAgICAgIG1heFJlc3VsdHMsXG4gICAgICAgICAgICBmcm9tUHJlZmVyZW5jZXM6ICEhcHJlZmVyZW5jZXM/Lmxlbmd0aCxcbiAgICAgICAgICAgIGZyb21QbGFjZVR5cGVzOiAhIXBsYWNlVHlwZXM/Lmxlbmd0aFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGaXJzdCB0cnkgbmVhcmJ5IHNlYXJjaFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZWRUeXBlcyxcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRDb3VudDogbWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvblJlc3RyaWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMDAwMC4wIC8vIDIwa20gcmFkaXVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ1gtR29vZy1BcGktS2V5JzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSxcbiAgICAgICAgICAgICAgICAnWC1Hb29nLUZpZWxkTWFzayc6ICdwbGFjZXMuaWQscGxhY2VzLmRpc3BsYXlOYW1lLHBsYWNlcy5mb3JtYXR0ZWRBZGRyZXNzLHBsYWNlcy5sb2NhdGlvbixwbGFjZXMucHJpbWFyeVR5cGUscGxhY2VzLnByaW1hcnlUeXBlRGlzcGxheU5hbWUscGxhY2VzLnBob3Rvcy5uYW1lLHBsYWNlcy5waG90b3Mud2lkdGhQeCxwbGFjZXMucGhvdG9zLmhlaWdodFB4J1xuICAgICAgICAgICAgfSBhcyBjb25zdDtcblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9wbGFjZXMuZ29vZ2xlYXBpcy5jb20vdjEvcGxhY2VzOnNlYXJjaE5lYXJieScsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEucGxhY2VzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5wbGFjZXMpICYmIGRhdGEucGxhY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEucGxhY2VzLm1hcCgocGxhY2U6IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwbGFjZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBwbGFjZS5kaXNwbGF5TmFtZT8udGV4dCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwbGFjZS5kaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UuZGlzcGxheU5hbWUubGFuZ3VhZ2VDb2RlIHx8ICdlbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBwbGFjZS5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlUeXBlOiBwbGFjZS5wcmltYXJ5VHlwZSB8fCAncGxhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9zOiBwbGFjZS5waG90b3M/Lm1hcCgocGhvdG86IGFueSkgPT4gKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcGhvdG8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFB4OiBwaG90by53aWR0aFB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFB4OiBwaG90by5oZWlnaHRQeFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQWRkcmVzczogcGxhY2UuZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBwbGFjZS5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlUeXBlRGlzcGxheU5hbWU6IHBsYWNlLnByaW1hcnlUeXBlRGlzcGxheU5hbWUgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogcGxhY2UucHJpbWFyeVR5cGVEaXNwbGF5TmFtZS5sYW5ndWFnZUNvZGUgfHwgJ2VuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggcGxhY2VzOicsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvckRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gbmVhcmJ5IHNlYXJjaDonLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBuZWFyYnkgc2VhcmNoIGZhaWxzLCB0cnkgdGV4dCBzZWFyY2ggYXMgZmFsbGJhY2tcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhbGxpbmcgYmFjayB0byB0ZXh0IHNlYXJjaC4uLicpO1xuICAgICAgICBjb25zdCBzZWFyY2hRdWVyeSA9IGZyb21QbGFjZVR5cGVzID8gcGxhY2VUeXBlcyFbMF0gOiBwcmVmZXJlbmNlcyFbMF07XG4gICAgICAgIHJldHVybiBhd2FpdCBzZWFyY2hNdWx0aXBsZVBsYWNlc0J5VGV4dChzZWFyY2hRdWVyeSwgeyBsYXRpdHVkZSwgbG9uZ2l0dWRlIH0sIG1heFJlc3VsdHMpO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcGxhY2VzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn07Il0sIm5hbWVzIjpbIlRyYXZlbFByZWZlcmVuY2UiLCJnZXRTdG9yZWRTZXNzaW9uIiwiU0VTU0lPTl9DT05GSUciLCJzYWZlU3RvcmFnZU9wIiwic3RvcmFnZSIsInByZWZlcmVuY2VUb1BsYWNlVHlwZXMiLCJDdWx0dXJlIiwiTmF0dXJlIiwiRm9vZCIsIlJlbGF4YXRpb24iLCJBZHZlbnR1cmUiLCJTaG9wcGluZyIsImdldFBsYWNlVHlwZXNGcm9tUHJlZmVyZW5jZXMiLCJwcmVmZXJlbmNlcyIsInVzZWRUeXBlcyIsIlNldCIsInJlc3VsdFR5cGVzIiwiZm9yRWFjaCIsInByZWYiLCJhdmFpbGFibGVUeXBlcyIsImZpbHRlciIsInR5cGUiLCJoYXMiLCJudW1UeXBlcyIsIk1hdGgiLCJtaW4iLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInNlbGVjdGVkVHlwZXMiLCJzb3J0Iiwic2xpY2UiLCJwdXNoIiwiYWRkIiwiZXJyb3IiLCJjb25zb2xlIiwiZm9ybWF0UHJpbWFyeVR5cGUiLCJzcGxpdCIsIm1hcCIsIndvcmQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImpvaW4iLCJnZXREaXNwbGF5TmFtZSIsInBsYWNlIiwiZGlzcGxheU5hbWUiLCJ0ZXh0IiwibmFtZSIsImZpbHRlclVuaXF1ZVBsYWNlcyIsInBsYWNlcyIsIkFycmF5IiwiaXNBcnJheSIsInNhdmVkUGxhY2VzIiwic2F2ZWRQbGFjZXNNYW5hZ2VyIiwiZ2V0UGxhY2VzIiwic2F2ZWRQbGFjZUlkcyIsImlkIiwic2F2ZWRQbGFjZU5hbWVzIiwidG9Mb3dlckNhc2UiLCJwbGFjZU5hbWUiLCJTVE9SQUdFX0tFWSIsImNyZWF0ZVNhdmVkUGxhY2VzTWFuYWdlciIsIk1hcCIsImluaXRpYWxpemVkIiwibG9hZEZyb21TdG9yYWdlIiwic2Vzc2lvbiIsImNsZWFyIiwic2V0IiwiYWRkUGxhY2UiLCJfcGVyc2lzdCIsIl9ub3RpZnlDaGFuZ2UiLCJyZW1vdmVQbGFjZSIsImRlbGV0ZSIsImZyb20iLCJ2YWx1ZXMiLCJnZXRQbGFjZUJ5SWQiLCJnZXQiLCJoYXNQbGFjZSIsInVwZGF0ZVBsYWNlIiwidXBkYXRlUGxhY2VzIiwidXBkYXRlZFBsYWNlcyIsInBsYWNlc0FycmF5Iiwic2F2ZWRQbGFjZXNDb3VudCIsInNpemUiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCIsIndpbmRvdyIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImNvdW50Iiwic2VyaWFsaXplIiwic2VhcmNoV2l0aFN0cmF0ZWd5Iiwic2VhcmNoVGV4dCIsImxvY2F0aW9uIiwiY2l0eU5hbWUiLCJ1c2VBbHRlcm5hdGVTZWFyY2giLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfR09PR0xFX01BUFNfQVBJX0tFWSIsIkVycm9yIiwiaGVhZGVycyIsInF1ZXJ5IiwibG9nIiwicmVzdWx0IiwidHJ5U2VhcmNoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJ0ZXh0UXVlcnkiLCJsb2NhdGlvbkJpYXMiLCJjaXJjbGUiLCJjZW50ZXIiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJhZGl1cyIsIm1heFJlc3VsdENvdW50Iiwib2siLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImpzb24iLCJzZWFyY2hQbGFjZUJ5VGV4dCIsImRlc3RpbmF0aW9uIiwidHJhbnNmb3JtUGxhY2VSZXNwb25zZSIsImlzQWxyZWFkeVNhdmVkIiwibWV0cmljcyIsIm1ldHJpY3NNYW5hZ2VyIiwidXBkYXRlIiwiaW5pdGlhbGl6ZU1ldHJpY3MiLCJzZXNzaW9uSWQiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwibGFzdEFjdGl2ZSIsImV4cGlyZXNBdCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJidWRnZXQiLCJsYW5ndWFnZSIsInRyYW5zcG9ydCIsImN1cnJlbnRTdGFnZSIsInRvdGFsUHJvbXB0cyIsInN0YWdlUHJvbXB0cyIsImlzUGFpZCIsInBheW1lbnRSZWZlcmVuY2UiLCJ1cGRhdGVNZXRyaWNzIiwic3RvcmVkU2Vzc2lvbiIsInNlc3Npb25TdG9yYWdlIiwicGhvdG9zIiwicCIsInByaW1hcnlUeXBlRGlzcGxheU5hbWUiLCJsYW5ndWFnZUNvZGUiLCJwaG90byIsIkJvb2xlYW4iLCJ3aWR0aFB4IiwiaGVpZ2h0UHgiLCJhdXRob3JBdHRyaWJ1dGlvbnMiLCJ0cmFuc2Zvcm1lZCIsInByaW1hcnlUeXBlIiwiZm9ybWF0dGVkQWRkcmVzcyIsInNlYXJjaE11bHRpcGxlUGxhY2VzQnlUZXh0IiwibWF4UmVzdWx0cyIsInJlcXVlc3RCb2R5IiwiZXJyb3JEYXRhIiwiZmV0Y2hQbGFjZXMiLCJwbGFjZVR5cGVzIiwiZnJvbVByZWZlcmVuY2VzIiwiZnJvbVBsYWNlVHlwZXMiLCJpbmNsdWRlZFR5cGVzIiwibG9jYXRpb25SZXN0cmljdGlvbiIsInNlYXJjaFF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n");

/***/ }),

/***/ "./utils/travel-info-utils.ts":
/*!************************************!*\
  !*** ./utils/travel-info-utils.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   travelInfoManager: () => (/* binding */ travelInfoManager)\n/* harmony export */ });\nconst CACHE_DURATION = 24 * 60 * 60 * 1000 // 24 hours\n;\nclass TravelInfoManager {\n    constructor(){\n        this.cache = {};\n        this.cache = {};\n    }\n    getCacheKey(place1, place2) {\n        // Sort IDs to ensure same key regardless of order\n        const ids = [\n            place1.id,\n            place2.id\n        ].sort();\n        return `${ids[0]}-${ids[1]}`;\n    }\n    isCacheValid(info) {\n        return !info.error && Date.now() - info.timestamp < CACHE_DURATION;\n    }\n    async getTravelInfo(place1, place2) {\n        if (!place1?.location || !place2?.location) {\n            console.log(\"[TravelInfoManager] Missing location:\", {\n                place1: place1?.displayName,\n                place2: place2?.displayName,\n                loc1: place1?.location,\n                loc2: place2?.location\n            });\n            return {\n                duration: \"--\",\n                distance: \"--\",\n                timestamp: Date.now(),\n                error: true\n            };\n        }\n        const key = this.getCacheKey(place1, place2);\n        const cached = this.cache[key];\n        if (cached && this.isCacheValid(cached)) {\n            console.log(\"[TravelInfoManager] Using cached info for:\", {\n                from: place1.displayName,\n                to: place2.displayName\n            });\n            return cached;\n        }\n        try {\n            console.log(\"[TravelInfoManager] Fetching new info for:\", {\n                from: place1.displayName,\n                to: place2.displayName\n            });\n            const response = await fetch(\"/api/travel-info\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    origin: {\n                        location: {\n                            latLng: {\n                                latitude: place1.location.latitude,\n                                longitude: place1.location.longitude\n                            }\n                        }\n                    },\n                    destination: {\n                        location: {\n                            latLng: {\n                                latitude: place2.location.latitude,\n                                longitude: place2.location.longitude\n                            }\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                console.error(\"[TravelInfoManager] API Error:\", response.status);\n                return {\n                    duration: \"--\",\n                    distance: \"--\",\n                    timestamp: Date.now(),\n                    error: true\n                };\n            }\n            const data = await response.json();\n            if (data.error) {\n                console.error(\"[TravelInfoManager] Data Error:\", data.error);\n                return {\n                    duration: \"--\",\n                    distance: \"--\",\n                    timestamp: Date.now(),\n                    error: true\n                };\n            }\n            console.log(\"[TravelInfoManager] Raw API response:\", data);\n            const info = {\n                duration: data.duration || \"--\",\n                distance: data.distance || \"--\",\n                timestamp: Date.now(),\n                polyline: data.polyline,\n                legPolyline: data.legPolyline\n            };\n            // Only cache if we have valid data\n            if (data.duration && data.distance && !data.duration.includes(\"NaN\") && !data.distance.includes(\"NaN\")) {\n                this.cache[key] = info;\n            } else {\n                console.error(\"[TravelInfoManager] Invalid data received:\", data);\n            }\n            return info;\n        } catch (error) {\n            console.error(\"[TravelInfoManager] Error:\", error);\n            const errorInfo = {\n                duration: \"--\",\n                distance: \"--\",\n                timestamp: Date.now(),\n                error: true\n            };\n            this.cache[key] = errorInfo;\n            return errorInfo;\n        }\n    }\n    clearCache() {\n        console.log(\"[TravelInfoManager] Clearing entire cache\");\n        this.cache = {};\n    }\n    // Clear all routes involving any of the places\n    clearRoutesForPlaces(places) {\n        console.log(\"[TravelInfoManager] Clearing routes for places:\", places.map((p)=>p.id));\n        const placeIds = new Set(places.map((p)=>p.id));\n        Object.keys(this.cache).forEach((key)=>{\n            const [id1, id2] = key.split(\"-\");\n            if (placeIds.has(id1) || placeIds.has(id2)) {\n                console.log(\"[TravelInfoManager] Clearing cache for:\", key);\n                delete this.cache[key];\n            }\n        });\n    }\n    // Deprecated: Use clearRoutesForPlaces instead\n    clearRoutesForPlace(place) {\n        this.clearRoutesForPlaces([\n            place\n        ]);\n    }\n}\nconst travelInfoManager = new TravelInfoManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/travel-info-utils.ts\n");

/***/ })

};
;