"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_map-component_tsx";
exports.ids = ["components_map-component_tsx"];
exports.modules = {

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/script */ \"./node_modules/next/script.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_script__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n\n\n\n\nconst globalSavedPlaces = new Map();\nconst MapComponent = ({ city, apiKey })=>{\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [infoWindow, setInfoWindow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [scriptLoaded, setScriptLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const savedPlacesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const lastUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Memoize getSavedPlaces to prevent unnecessary re-renders\n    const getSavedPlaces = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const now = Date.now();\n        // Only update if more than 1000ms has passed since last update\n        if (now - lastUpdateRef.current < 1000) {\n            return savedPlacesRef.current;\n        }\n        lastUpdateRef.current = now;\n        return savedPlacesRef.current;\n    }, []);\n    // Expose getSavedPlaces to window with debouncing\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (false) {}\n        return ()=>{\n            if (false) {}\n        };\n    }, [\n        getSavedPlaces\n    ]);\n    // Update savedPlacesRef when places are added/removed\n    const updateSavedPlaces = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((places)=>{\n        savedPlacesRef.current = places;\n        lastUpdateRef.current = Date.now();\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"MapComponent: Received props:\", {\n            city,\n            apiKeyLength: apiKey?.length\n        });\n        if (!apiKey) {\n            console.error(\"MapComponent: Google Maps API key is missing\");\n            setError(\"Google Maps API key is missing\");\n            setIsLoading(false);\n            return;\n        }\n        if (!scriptLoaded || !mapRef.current) {\n            console.log(\"MapComponent: Waiting for script to load or map ref to be ready...\");\n            return;\n        }\n        console.log(\"MapComponent: Initializing map with city:\", city);\n        const initMap = async ()=>{\n            try {\n                // Import required libraries\n                const { Map: Map1 } = await window.google.maps.importLibrary(\"maps\");\n                const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({\n                    address: city\n                }, async (results, status)=>{\n                    console.log(\"Geocoding response:\", {\n                        status,\n                        resultsLength: results?.length\n                    });\n                    if (status !== \"OK\" || !results?.[0]?.geometry?.location) {\n                        console.error(\"Geocoding failed:\", status);\n                        setError(`Could not find location for ${city}`);\n                        setIsLoading(false);\n                        return;\n                    }\n                    try {\n                        const location = results[0].geometry.location;\n                        const newMap = new Map1(mapRef.current, {\n                            center: location,\n                            zoom: 12,\n                            mapId: \"2d604af04a7c7fa8\"\n                        });\n                        setMap(newMap);\n                        const newInfoWindow = new google.maps.InfoWindow({\n                            maxWidth: 400\n                        });\n                        setInfoWindow(newInfoWindow);\n                        infoWindowRef.current = newInfoWindow;\n                        const createCityInfoWindowContent = async (city, location)=>{\n                            try {\n                                // Search for the city to get its details including photos\n                                const cityPlace = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.searchPlaceByText)(city, {\n                                    latitude: location.lat(),\n                                    longitude: location.lng()\n                                });\n                                if (!cityPlace) return null;\n                                // Create a photo carousel HTML\n                                const photoCarousel = cityPlace.photos && cityPlace.photos.length > 0 ? `\n                                            <div class=\"relative w-full\" style=\"height: 200px;\">\n                                                <div class=\"carousel-container overflow-hidden w-full h-full\">\n                                                    <div class=\"carousel-track flex transition-transform duration-500\" style=\"height: 100%;\">\n                                                        ${cityPlace.photos.slice(0, 5).map((photo, index)=>`\n                                                            <div class=\"carousel-slide w-full h-full flex-none\">\n                                                                <img src=\"https://places.googleapis.com/v1/${photo.name}/media?maxHeightPx=340&maxWidthPx=340&key=${apiKey}\"\n                                                                    alt=\"${city}\"\n                                                                    class=\"w-full h-full object-cover\"\n                                                                />\n                                                            </div>\n                                                        `).join(\"\")}\n                                                    </div>\n                                                </div>\n                                                <button onclick=\"window.prevSlide()\" class=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\n                                                    </svg>\n                                                </button>\n                                                <button onclick=\"window.nextSlide()\" class=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\n                                                    </svg>\n                                                </button>\n                                                <div class=\"absolute bottom-2 left-0 right-0 flex justify-center gap-1\">\n                                                    ${cityPlace.photos.slice(0, 5).map((_, index)=>`\n                                                        <button onclick=\"window.goToSlide(${index})\" class=\"w-2 h-2 rounded-full bg-white/80 hover:bg-white shadow-sm carousel-dot\" data-index=\"${index}\">\n                                                        </button>\n                                                    `).join(\"\")}\n                                                </div>\n                                            </div>\n                                        ` : \"\";\n                                // Add carousel control functions to window\n                                if (cityPlace.photos && cityPlace.photos.length > 0) {\n                                    const numSlides = Math.min(cityPlace.photos.length, 5);\n                                    window.currentSlide = 0;\n                                    window.updateCarousel = ()=>{\n                                        const track = document.querySelector(\".carousel-track\");\n                                        if (track) {\n                                            track.style.transform = `translateX(-${window.currentSlide * 100}%)`;\n                                            // Update dots\n                                            document.querySelectorAll(\".carousel-dot\").forEach((dot, index)=>{\n                                                if (index === window.currentSlide) {\n                                                    dot.classList.add(\"bg-white\");\n                                                    dot.classList.remove(\"bg-white/80\");\n                                                } else {\n                                                    dot.classList.remove(\"bg-white\");\n                                                    dot.classList.add(\"bg-white/80\");\n                                                }\n                                            });\n                                        }\n                                    };\n                                    window.nextSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide + 1) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.prevSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide - 1 + numSlides) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.goToSlide = (index)=>{\n                                        window.currentSlide = index;\n                                        window.updateCarousel();\n                                    };\n                                }\n                                return `\n                                        <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 340px;\">\n                                            ${photoCarousel}\n                                            <div class=\"p-4\">\n                                                <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">${city}</h2>\n                                                ${cityPlace.formattedAddress ? `<p class=\"text-sm text-gray-500 mb-2\">${cityPlace.formattedAddress}</p>` : \"\"}\n                                            </div>\n                                        </div>\n                                    `;\n                            } catch (error) {\n                                console.error(\"Error creating city info window:\", error);\n                                return null;\n                            }\n                        };\n                        // Create a marker for the city\n                        const cityMarker = new google.maps.marker.AdvancedMarkerElement({\n                            map: newMap,\n                            position: location,\n                            title: city\n                        });\n                        // Add click listener to the marker\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            if (infoWindow) {\n                                const content = createCityInfoWindowContent(city, location);\n                                if (content) {\n                                    infoWindow.setContent(await content);\n                                    infoWindow.open(newMap, cityMarker);\n                                }\n                            }\n                        });\n                        markers.set(city, cityMarker);\n                        // Add click listener for future interaction\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            const content = await createCityInfoWindowContent(city, location);\n                            if (content) {\n                                newInfoWindow.setContent(content);\n                                newInfoWindow.open({\n                                    anchor: cityMarker,\n                                    map: newMap\n                                });\n                            }\n                        });\n                    } catch (err) {\n                        console.error(\"Error setting up map:\", err);\n                        setError(\"Failed to initialize map\");\n                    }\n                });\n            } catch (err) {\n                console.error(\"Error initializing map:\", err);\n                setError(\"Failed to initialize map\");\n                setIsLoading(false);\n            }\n        };\n        initMap();\n    }, [\n        city,\n        scriptLoaded,\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    // Simply set the map to null to remove the marker\n                    marker.position = null;\n                    // Close info window if open\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    // Remove event listeners\n                    google.maps.event.clearInstanceListeners(marker);\n                    // Clean up references\n                    markersRef.current.delete(placeId);\n                    globalSavedPlaces.delete(placeId);\n                    // Force update component state\n                    setMarkerCount((prev)=>prev - 1);\n                    setSavedPlaces(new Map(globalSavedPlaces));\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n        };\n        window.addPlaceToMap = async (placeData)=>{\n            try {\n                const [{ AdvancedMarkerElement }, { PinElement }] = await Promise.all([\n                    google.maps.importLibrary(\"marker\"),\n                    google.maps.importLibrary(\"marker\")\n                ]);\n                const pinElement = new google.maps.marker.PinElement({\n                    scale: 1\n                });\n                const markerId = placeData.place?.id;\n                if (!markerId) {\n                    console.error(\"Debug - No place ID provided\");\n                    return;\n                }\n                console.log(\"Debug - Creating marker with ID:\", markerId);\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: placeData.latitude,\n                        lng: placeData.longitude\n                    },\n                    title: placeData.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                // Set the map property after creation\n                marker.map = map;\n                // Add click listener\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (placeData.place) {\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(placeData.place, markerId);\n                        if (content && infoWindowRef.current) {\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.open(map, marker);\n                        }\n                    }\n                });\n                // Store the marker reference\n                markersRef.current.set(markerId, marker);\n                if (placeData.place) {\n                    globalSavedPlaces.set(markerId, placeData.place);\n                    // Force a re-render when adding a marker\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(globalSavedPlaces));\n                    console.log(\"Debug - Added place:\", globalSavedPlaces);\n                }\n                console.log(\"Debug - Marker added successfully\");\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            const places = Array.from(globalSavedPlaces.values());\n            console.log(\"Getting saved places:\", places);\n            return places;\n        };\n    }, [\n        map,\n        infoWindow,\n        markerCount\n    ]);\n    // Add a useEffect to monitor savedPlaces changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Current saved places:\", [\n            ...globalSavedPlaces.entries()\n        ]);\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                window.google?.maps?.event?.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Load saved places from session storage on mount\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    const placesMap = new Map(parsed.savedPlaces.map((place)=>[\n                            place.id || place.name,\n                            place\n                        ]));\n                    setSavedPlaces(placesMap);\n                    savedPlacesRef.current = Array.from(placesMap.values());\n                    Object.assign(globalSavedPlaces, placesMap);\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Save to session storage when places change\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                sessionStorage.setItem(\"travelPlannerSession\", JSON.stringify({\n                    ...parsed,\n                    savedPlaces: Array.from(savedPlaces.values())\n                }));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? `https://places.googleapis.com/v1/${place.photos[0].name}/media?maxHeightPx=200&maxWidthPx=300&key=${apiKey}` : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return `\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\n                ${photoUrl ? `\n                    <div style=\"height: 150px; width: 100%;\">\n                        <img src=\"${photoUrl}\" \n                            alt=\"${placeTitle}\"\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\n                        />\n                    </div>\n                ` : \"\"}\n\n                <div class=\"p-3\">\n                    <div class=\"flex justify-between items-start\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\n                            ${placeTitle}\n                        </h3>\n                        <button \n                            onclick=\"\n                                (function() {\n                                    console.log('Debug - Delete button clicked for markerId:', '${markerId}');\n                                    if (window.removePlaceFromMap) {\n                                        window.removePlaceFromMap('${markerId}');\n                                        // Close the info window after deletion\n                                        if (window.currentInfoWindow) {\n                                            window.currentInfoWindow.close();\n                                        }\n                                    }\n                                })();\n                            \"\n                            class=\"p-1 hover:bg-red-50 rounded-full\"\n                            aria-label=\"Remove place\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n                            </svg>\n                        </button>\n                    </div>\n                    ${place.primaryTypeDisplayName ? `<div class=\"text-sm text-gray-600 mb-1\">${place.primaryTypeDisplayName.text}</div>` : \"\"}\n                    ${place.formattedAddress ? `<p class=\"text-sm text-gray-500\">${place.formattedAddress}</p>` : \"\"}\n                </div>\n            </div>\n        `;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_script__WEBPACK_IMPORTED_MODULE_2___default()), {\n                src: `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,marker&v=beta&callback=Function.prototype`,\n                strategy: \"afterInteractive\",\n                onLoad: ()=>{\n                    console.log(\"Google Maps script loaded\");\n                    setScriptLoaded(true);\n                },\n                onError: (e)=>{\n                    console.error(\"Failed to load Google Maps script:\", e);\n                    setError(\"Failed to load Google Maps\");\n                    setIsLoading(false);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 531,\n                columnNumber: 17\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 text-red-500 p-4 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 546,\n                columnNumber: 17\n            }, undefined),\n            isLoading && !error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-gray-600\",\n                    children: [\n                        \"Loading map...\",\n                        !apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: \"Waiting for API key...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                            lineNumber: 554,\n                            columnNumber: 37\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 552,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 551,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 558,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 529,\n        columnNumber: 9\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapComponent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n");

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: () => (/* binding */ BUDGET_DESCRIPTIONS),\n/* harmony export */   BUDGET_OPTIONS: () => (/* binding */ BUDGET_OPTIONS),\n/* harmony export */   BudgetLevel: () => (/* binding */ BudgetLevel),\n/* harmony export */   CURRENCY_INFO: () => (/* binding */ CURRENCY_INFO),\n/* harmony export */   ComponentType: () => (/* binding */ ComponentType),\n/* harmony export */   DEFAULT_CURRENCIES: () => (/* binding */ DEFAULT_CURRENCIES),\n/* harmony export */   LANGUAGE_LABELS: () => (/* binding */ LANGUAGE_LABELS),\n/* harmony export */   LANGUAGE_OPTIONS: () => (/* binding */ LANGUAGE_OPTIONS),\n/* harmony export */   PREFERENCE_ICONS: () => (/* binding */ PREFERENCE_ICONS),\n/* harmony export */   PREFERENCE_OPTIONS: () => (/* binding */ PREFERENCE_OPTIONS),\n/* harmony export */   SupportedLanguage: () => (/* binding */ SupportedLanguage),\n/* harmony export */   TravelPreference: () => (/* binding */ TravelPreference)\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map(([key, value])=>({\n        value,\n        label: LANGUAGE_LABELS[value]\n    }));\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/types.ts\n");

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: () => (/* binding */ fetchPlaces),\n/* harmony export */   formatPrimaryType: () => (/* binding */ formatPrimaryType),\n/* harmony export */   getPlaceTypeDisplayName: () => (/* binding */ getPlaceTypeDisplayName),\n/* harmony export */   getPlaceTypesFromPreferences: () => (/* binding */ getPlaceTypesFromPreferences),\n/* harmony export */   preferenceToPlaceTypes: () => (/* binding */ preferenceToPlaceTypes),\n/* harmony export */   searchMultiplePlacesByText: () => (/* binding */ searchMultiplePlacesByText),\n/* harmony export */   searchPlaceByText: () => (/* binding */ searchPlaceByText)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n// Place related interfaces\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            const availableTypes = preferenceToPlaceTypes[pref]?.filter((type)=>!usedTypes.has(type)) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getPlaceTypeDisplayName = (place)=>{\n    if (place?.primaryTypeDisplayName?.text) {\n        return place.primaryTypeDisplayName.text;\n    }\n    // Fallback to formatting the primaryType if displayName is not available\n    return place.primaryType ? formatPrimaryType(place.primaryType) : \"Place\";\n};\n// Search for a single place by text query\nconst searchPlaceByText = async (searchText, location)=>{\n    try {\n        if (false) {}\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            }\n        };\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n        });\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search place:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return null;\n        }\n        const data = await response.json();\n        // console.log('Places API text search response:', data);\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.error(\"No places found for text search:\", searchText);\n            return null;\n        }\n        // Return the first result as we only need one place\n        const place = data.places[0];\n        return {\n            id: place.id,\n            displayName: place.displayName?.text ? {\n                text: place.displayName.text,\n                languageCode: place.displayName.languageCode\n            } : place.displayName,\n            primaryType: place.primaryType || \"place\",\n            photos: place.photos?.map((photo)=>({\n                    name: photo.name,\n                    widthPx: photo.widthPx,\n                    heightPx: photo.heightPx,\n                    authorAttributions: photo.authorAttributions\n                })) || [],\n            formattedAddress: place.formattedAddress,\n            location: place.location,\n            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                text: place.primaryTypeDisplayName.text,\n                languageCode: place.primaryTypeDisplayName.languageCode\n            } : undefined\n        };\n    } catch (error) {\n        console.error(\"Error searching for place:\", error);\n        return null;\n    }\n};\n// Search for multiple places by text query\nconst searchMultiplePlacesByText = async (searchText, location, maxResults = 5)=>{\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n        });\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>({\n                id: place.id,\n                displayName: place.displayName?.text ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: place.photos?.map((photo)=>({\n                        name: photo.name\n                    })) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode\n                } : undefined\n            }));\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async (latitude, longitude, preferences, maxResults = 5, placeTypes)=>{\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!preferences?.length,\n            fromPlaceTypes: !!placeTypes?.length\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = new Headers({\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name\"\n            });\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>({\n                            id: place.id,\n                            displayName: place.displayName?.text ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: place.photos?.map((photo)=>({\n                                    name: photo.name\n                                })) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode\n                            } : undefined\n                        }));\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n");

/***/ })

};
;