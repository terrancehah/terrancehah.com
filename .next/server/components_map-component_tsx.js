"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_map-component_tsx";
exports.ids = ["components_map-component_tsx"];
exports.modules = {

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n/* harmony import */ var _utils_session_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/session-manager */ \"./utils/session-manager.ts\");\n/* harmony import */ var _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/travel-info-utils */ \"./utils/travel-info-utils.ts\");\n\n\n\n\n\nconst MapComponent = ({ city, apiKey })=>{\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scriptLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const geometryLoadedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const routesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!apiKey) return;\n        const loadGoogleMapsScript = ()=>{\n            if (window.google?.maps) {\n                setupMapInstance();\n            } else if (!scriptLoadedRef.current && !document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]')) {\n                const script = document.createElement(\"script\");\n                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,marker,geometry&v=beta&callback=setupMapInstance`;\n                script.async = true;\n                script.defer = true;\n                document.head.appendChild(script);\n                scriptLoadedRef.current = true;\n            }\n        };\n        // Initial map setup and geometry library check\n        async function setupMapInstance() {\n            if (!mapRef.current || mapInstanceRef.current) return;\n            try {\n                // Use the city prop directly, fallback to session storage if needed\n                let targetCity = city;\n                if (!targetCity) {\n                    const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n                    if (sessionData) {\n                        const parsed = JSON.parse(sessionData);\n                        targetCity = parsed.city;\n                    }\n                }\n                if (!targetCity) {\n                    console.error(\"No city specified\");\n                    setIsLoading(false);\n                    return;\n                }\n                const location = await getLocation(targetCity);\n                const map = new window.google.maps.Map(mapRef.current, {\n                    zoom: 12,\n                    center: location,\n                    mapId: \"2d604af04a7c7fa8\"\n                });\n                mapInstanceRef.current = map;\n                setMap(map);\n                markersRef.current = new Map();\n                routesRef.current = new Map();\n                // Initialize the InfoWindow\n                infoWindowRef.current = new window.google.maps.InfoWindow({\n                    maxWidth: 300,\n                    pixelOffset: new window.google.maps.Size(0, -30)\n                });\n                setIsLoading(false);\n                // Check if geometry library is loaded\n                if (isGeometryReady()) {\n                    geometryLoadedRef.current = true;\n                } else {\n                    // Poll for geometry library\n                    const checkGeometry = setInterval(()=>{\n                        if (isGeometryReady()) {\n                            geometryLoadedRef.current = true;\n                            clearInterval(checkGeometry);\n                        }\n                    }, 100);\n                    // Clear interval after 10 seconds to prevent infinite polling\n                    setTimeout(()=>clearInterval(checkGeometry), 10000);\n                }\n            } catch (error) {\n                console.error(\"Error setting up map:\", error);\n                setIsLoading(false);\n            }\n        }\n        window.setupMapInstance = setupMapInstance;\n        loadGoogleMapsScript();\n        return ()=>{\n            delete window.setupMapInstance;\n        };\n    }, [\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        const setupMapFeatures = async ()=>{\n            if (!mapInstanceRef.current) return;\n            try {\n                const location = await getLocation(city);\n                // Update existing map instead of creating new one\n                mapInstanceRef.current.setCenter(location);\n                mapInstanceRef.current.setZoom(12);\n                setIsLoading(false);\n            } catch (error) {\n                console.error(\"Error updating map features:\", error);\n                setIsLoading(false);\n            }\n        };\n        setupMapFeatures();\n    }, [\n        city\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        const initializeMap = async ()=>{\n            // Wait for map to be idle before restoring markers\n            await new Promise((resolve)=>{\n                google.maps.event.addListenerOnce(map, \"idle\", ()=>{\n                    resolve();\n                });\n            });\n            const savedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            console.log(\"Restoring markers for saved places:\", savedPlaces.length);\n            savedPlaces.forEach((place)=>{\n                if (place.location) {\n                    window.addPlaceToMap?.({\n                        latitude: place.location.latitude,\n                        longitude: place.location.longitude,\n                        title: typeof place.displayName === \"string\" ? place.displayName : place.displayName.text,\n                        place: place\n                    });\n                }\n            });\n        };\n        initializeMap();\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    marker.map = null;\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    google.maps.event.clearInstanceListeners(marker);\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.removePlace(placeId);\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                const markerId = data.place?.id || data.title || String(Date.now());\n                const pinElement = new window.google.maps.marker.PinElement({\n                    background: \"#FF4444\",\n                    borderColor: \"#CC0000\",\n                    glyphColor: \"#FFFFFF\"\n                });\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(data.place);\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places));\n                }\n                // Ensure the marker is properly added to the map\n                marker.map = mapInstanceRef.current;\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        // Close any existing InfoWindow\n                        infoWindowRef.current?.close();\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current && mapInstanceRef.current) {\n                            const position = marker.position;\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.setPosition(position);\n                            infoWindowRef.current.open(mapInstanceRef.current);\n                        }\n                    }\n                });\n                markersRef.current.set(markerId, marker);\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        mapInstanceRef.current\n    ]); // Only depend on the map instance\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                const updatedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n                const sessionDataWithUpdatedPlaces = {\n                    ...parsed,\n                    lastActive: Date.now(),\n                    savedPlaces: updatedPlaces\n                };\n                sessionStorage.setItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(sessionDataWithUpdatedPlaces));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                window.google?.maps?.event?.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const sessionData = sessionStorage.getItem(_utils_session_manager__WEBPACK_IMPORTED_MODULE_3__.SESSION_CONFIG.STORAGE_KEY);\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    const getPhotoUrl = (photo, index)=>{\n        return photo.getURI?.() || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? `https://places.googleapis.com/v1/${place.photos[0].name}/media?maxHeightPx=200&maxWidthPx=300&key=${apiKey}` : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return `\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\n                ${photoUrl ? `\n                    <div style=\"height: 150px; width: 100%;\">\n                        <img src=\"${photoUrl}\" \n                            alt=\"${placeTitle}\"\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\n                        />\n                    </div>\n                ` : \"\"}\n\n                <div class=\"p-3\">\n                    <div class=\"flex justify-between items-start\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\n                            ${placeTitle}\n                        </h3>\n                    </div>\n                    ${place.primaryTypeDisplayName ? `<div class=\"text-sm text-gray-600 mb-1\">${place.primaryTypeDisplayName.text}</div>` : \"\"}\n                    ${place.formattedAddress ? `<p class=\"text-sm text-gray-500\">${place.formattedAddress}</p>` : \"\"}\n                </div>\n            </div>\n        `;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handlePlacesChanged = (event)=>{\n            if (!mapInstanceRef.current) return;\n            // Clear ALL existing routes\n            routesRef.current.forEach((route)=>{\n                route.setMap(null);\n            });\n            routesRef.current.clear();\n            // Group and draw routes\n            const places = _utils_places_utils__WEBPACK_IMPORTED_MODULE_2__.savedPlacesManager.getPlaces();\n            const days = places.reduce((acc, place)=>{\n                if (place.dayIndex === undefined) return acc;\n                const dayId = `day-${place.dayIndex}`;\n                if (!acc[dayId]) acc[dayId] = [];\n                acc[dayId].push(place);\n                return acc;\n            }, {});\n            Object.entries(days).forEach(([dayId, places])=>{\n                const sortedPlaces = [\n                    ...places\n                ].sort((a, b)=>(a.orderIndex ?? 0) - (b.orderIndex ?? 0));\n                const dayIndex = parseInt(dayId.replace(\"day-\", \"\"));\n                // Array of distinct colors for routes\n                const colors = [\n                    \"#2196F3\",\n                    \"#9C27B0\",\n                    \"#795548\",\n                    \"#FF9800\",\n                    \"#009688\",\n                    \"#E91E63\",\n                    \"#673AB7\",\n                    \"#3F51B5\",\n                    \"#00BCD4\",\n                    \"#4CAF50\" // Green\n                ];\n                const color = colors[dayIndex % colors.length];\n                drawDayRoute(dayId, sortedPlaces, color);\n            });\n        };\n        window.addEventListener(\"savedPlacesChanged\", handlePlacesChanged);\n        return ()=>{\n            window.removeEventListener(\"savedPlacesChanged\", handlePlacesChanged);\n        };\n    }, []);\n    const drawDayRoute = async (dayId, places, color)=>{\n        console.log(`drawDayRoute called for day ${dayId} with ${places.length} places`);\n        const existingRoute = routesRef.current.get(dayId);\n        if (existingRoute) {\n            existingRoute.setMap(null);\n            routesRef.current.delete(dayId);\n        }\n        if (!places || places.length < 2 || !mapInstanceRef.current || !isGeometryReady()) {\n            console.log(\"Not ready:\", {\n                places: places?.length,\n                mapReady: !!mapInstanceRef.current,\n                geometryReady: isGeometryReady()\n            });\n            return;\n        }\n        const coordinates = [];\n        for(let i = 0; i < places.length - 1; i++){\n            const place1 = places[i];\n            const place2 = places[i + 1];\n            if (!place1.location || !place2.location) {\n                console.log(\"Missing location for place:\", {\n                    place1Name: place1.name,\n                    place2Name: place2.name,\n                    place1Location: place1.location,\n                    place2Location: place2.location\n                });\n                continue;\n            }\n            console.log(`Getting travel info between ${place1.name} and ${place2.name}`);\n            const info = await _utils_travel_info_utils__WEBPACK_IMPORTED_MODULE_4__.travelInfoManager.getTravelInfo(place1, place2);\n            console.log(\"Received travel info:\", info);\n            if (info.legPolyline) {\n                console.log(\"Decoding polyline:\", info.legPolyline);\n                try {\n                    const path = google.maps.geometry.encoding.decodePath(info.legPolyline);\n                    console.log(\"Decoded path:\", path);\n                    if (path) {\n                        coordinates.push(...path);\n                    }\n                } catch (error) {\n                    console.error(\"Error decoding polyline:\", error);\n                }\n            } else {\n                console.log(\"No polyline in travel info\");\n            }\n        }\n        console.log(`Found ${coordinates.length} coordinates for route`);\n        if (coordinates.length > 0) {\n            const route = new google.maps.Polyline({\n                path: coordinates,\n                geodesic: true,\n                strokeColor: color,\n                strokeOpacity: 0.8,\n                strokeWeight: 3,\n                map: mapInstanceRef.current\n            });\n            console.log(\"Created new polyline:\", route);\n            routesRef.current.set(dayId, route);\n        }\n    };\n    const isGeometryReady = ()=>{\n        return !!(window.google?.maps?.geometry?.encoding?.decodePath && typeof window.google.maps.geometry.encoding.decodePath === \"function\");\n    };\n    const getLocation = async (city)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject)=>{\n            geocoder.geocode({\n                address: city\n            }, (results, status)=>{\n                if (status !== \"OK\" || !results?.[0]?.geometry?.location) {\n                    console.error(\"Geocoding failed:\", status);\n                    reject(\"Could not find location for \" + city);\n                } else {\n                    resolve(results[0].geometry.location);\n                }\n            });\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 590,\n                columnNumber: 13\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 bg-red-500 text-white p-2 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 592,\n                columnNumber: 17\n            }, undefined),\n            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"\n                }, void 0, false, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 598,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 597,\n                columnNumber: 17\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 589,\n        columnNumber: 9\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapComponent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n");

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: () => (/* binding */ BUDGET_DESCRIPTIONS),\n/* harmony export */   BUDGET_OPTIONS: () => (/* binding */ BUDGET_OPTIONS),\n/* harmony export */   BudgetLevel: () => (/* binding */ BudgetLevel),\n/* harmony export */   CURRENCY_INFO: () => (/* binding */ CURRENCY_INFO),\n/* harmony export */   ComponentType: () => (/* binding */ ComponentType),\n/* harmony export */   DEFAULT_CURRENCIES: () => (/* binding */ DEFAULT_CURRENCIES),\n/* harmony export */   LANGUAGE_LABELS: () => (/* binding */ LANGUAGE_LABELS),\n/* harmony export */   LANGUAGE_OPTIONS: () => (/* binding */ LANGUAGE_OPTIONS),\n/* harmony export */   PREFERENCE_ICONS: () => (/* binding */ PREFERENCE_ICONS),\n/* harmony export */   PREFERENCE_OPTIONS: () => (/* binding */ PREFERENCE_OPTIONS),\n/* harmony export */   SupportedLanguage: () => (/* binding */ SupportedLanguage),\n/* harmony export */   TravelPreference: () => (/* binding */ TravelPreference)\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map(([key, value])=>({\n        value,\n        label: LANGUAGE_LABELS[value]\n    }));\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/types.ts\n");

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: () => (/* binding */ fetchPlaces),\n/* harmony export */   filterUniquePlaces: () => (/* binding */ filterUniquePlaces),\n/* harmony export */   formatPrimaryType: () => (/* binding */ formatPrimaryType),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getPlaceTypesFromPreferences: () => (/* binding */ getPlaceTypesFromPreferences),\n/* harmony export */   metricsManager: () => (/* binding */ metricsManager),\n/* harmony export */   preferenceToPlaceTypes: () => (/* binding */ preferenceToPlaceTypes),\n/* harmony export */   savedPlacesManager: () => (/* binding */ savedPlacesManager),\n/* harmony export */   searchMultiplePlacesByText: () => (/* binding */ searchMultiplePlacesByText),\n/* harmony export */   searchPlaceByText: () => (/* binding */ searchPlaceByText)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            const availableTypes = preferenceToPlaceTypes[pref]?.filter((type)=>!usedTypes.has(type)) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return place.displayName?.text || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from sessionStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"undefined\" !== \"undefined\") {}\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place?.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        updatePlace (place) {\n            if (place?.id && places.has(place.id)) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        _persist () {\n            if (false) {}\n        },\n        _notifyChange () {\n            if (false) {}\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (false) {}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? `different ${searchText} in ${cityName}` : `${searchText} ${cityName}`;\n    console.log(`[searchWithStrategy] Using ${useAlternateSearch ? \"alternate\" : \"original\"} search:`, query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.places?.[0]) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: data.places[0].displayName?.text || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!result?.places?.[0]) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (true) {\n        return {\n            sessionId: \"\",\n            startTime: Date.now(),\n            lastActive: Date.now(),\n            expiresAt: Date.now() + 24 * 60 * 60 * 1000,\n            destination: \"\",\n            startDate: \"\",\n            endDate: \"\",\n            preferences: [],\n            budget: \"\",\n            language: \"\",\n            transport: [],\n            savedPlaces: [],\n            currentStage: 1,\n            totalPrompts: 0,\n            stagePrompts: {\n                1: 0,\n                2: 0,\n                3: 0\n            },\n            savedPlacesCount: 0,\n            isPaid: false,\n            paymentReference: \"\"\n        };\n    }\n    const session = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n    if (!session) {\n        return initializeMetrics();\n    }\n    // Always ensure savedPlacesCount matches actual saved places\n    session.savedPlacesCount = savedPlacesManager.places.size;\n    return session;\n}\n// Update metrics in storage\nfunction updateMetrics(session) {\n    if (true) return;\n    try {\n        const storedSession = (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.getStoredSession)();\n        if (!storedSession) return;\n        // Update only metrics-related fields\n        storedSession.totalPrompts = session.totalPrompts;\n        storedSession.stagePrompts = session.stagePrompts;\n        storedSession.savedPlacesCount = session.savedPlacesCount;\n        sessionStorage.setItem(_session_manager__WEBPACK_IMPORTED_MODULE_1__.SESSION_CONFIG.STORAGE_KEY, JSON.stringify(storedSession));\n    } catch (error) {\n        console.error(\"[Places] Error updating metrics:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: place.photos?.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = place.displayName?.text ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async (searchText, location, maxResults = 5)=>{\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>({\n                id: place.id,\n                displayName: place.displayName?.text ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: place.photos?.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    })) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            }));\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async (latitude, longitude, preferences, maxResults = 5, placeTypes)=>{\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!preferences?.length,\n            fromPlaceTypes: !!placeTypes?.length\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>({\n                            id: place.id,\n                            displayName: place.displayName?.text ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: place.photos?.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                })) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        }));\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n");

/***/ }),

/***/ "./utils/travel-info-utils.ts":
/*!************************************!*\
  !*** ./utils/travel-info-utils.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   travelInfoManager: () => (/* binding */ travelInfoManager)\n/* harmony export */ });\nconst CACHE_KEY = \"travel_info_cache\";\nconst CACHE_DURATION = 24 * 60 * 60 * 1000 // 24 hours\n;\nclass TravelInfoManager {\n    constructor(){\n        this.cache = {};\n        if (false) {}\n    }\n    getCacheKey(place1, place2) {\n        return `${place1.id}-${place2.id}`;\n    }\n    isCacheValid(info) {\n        return !info.error && Date.now() - info.timestamp < CACHE_DURATION;\n    }\n    async getTravelInfo(place1, place2) {\n        if (!place1?.location || !place2?.location) {\n            console.log(\"[TravelInfoManager] Missing location:\", {\n                place1: place1?.displayName,\n                place2: place2?.displayName,\n                loc1: place1?.location,\n                loc2: place2?.location\n            });\n            return {\n                duration: \"--\",\n                distance: \"--\",\n                timestamp: Date.now(),\n                error: true\n            };\n        }\n        const key = this.getCacheKey(place1, place2);\n        const cached = this.cache[key];\n        if (cached && this.isCacheValid(cached)) {\n            console.log(\"[TravelInfoManager] Using cached info for:\", {\n                from: place1.displayName,\n                to: place2.displayName\n            });\n            return cached;\n        }\n        try {\n            console.log(\"[TravelInfoManager] Fetching new info for:\", {\n                from: place1.displayName,\n                to: place2.displayName\n            });\n            const response = await fetch(\"/api/travel-info\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    origin: {\n                        location: {\n                            latLng: {\n                                latitude: place1.location.latitude,\n                                longitude: place1.location.longitude\n                            }\n                        }\n                    },\n                    destination: {\n                        location: {\n                            latLng: {\n                                latitude: place2.location.latitude,\n                                longitude: place2.location.longitude\n                            }\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                console.error(\"[TravelInfoManager] API Error:\", response.status);\n                return {\n                    duration: \"--\",\n                    distance: \"--\",\n                    timestamp: Date.now(),\n                    error: true\n                };\n            }\n            const data = await response.json();\n            if (data.error) {\n                console.error(\"[TravelInfoManager] Data Error:\", data.error);\n                return {\n                    duration: \"--\",\n                    distance: \"--\",\n                    timestamp: Date.now(),\n                    error: true\n                };\n            }\n            console.log(\"[TravelInfoManager] Raw API response:\", data);\n            const info = {\n                duration: data.duration || \"--\",\n                distance: data.distance || \"--\",\n                timestamp: Date.now(),\n                polyline: data.polyline,\n                legPolyline: data.legPolyline\n            };\n            // Only cache if we have valid data\n            if (data.duration && data.distance && !data.duration.includes(\"NaN\") && !data.distance.includes(\"NaN\")) {\n                this.cache[key] = info;\n                this.persist();\n            } else {\n                console.error(\"[TravelInfoManager] Invalid data received:\", data);\n            }\n            return info;\n        } catch (error) {\n            console.error(\"[TravelInfoManager] Error:\", error);\n            const errorInfo = {\n                duration: \"--\",\n                distance: \"--\",\n                timestamp: Date.now(),\n                error: true\n            };\n            this.cache[key] = errorInfo;\n            return errorInfo;\n        }\n    }\n    persist() {\n        if (false) {}\n    }\n    clearCache() {\n        this.cache = {};\n        this.persist();\n    }\n    // Add this new method to clear routes for specific places\n    clearRoutesForPlace(place) {\n        // Clear all routes that involve this place\n        Object.keys(this.cache).forEach((key)=>{\n            if (key.includes(place.id)) {\n                delete this.cache[key];\n            }\n        });\n        // Update localStorage\n        if (false) {}\n    }\n}\nconst travelInfoManager = new TravelInfoManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/travel-info-utils.ts\n");

/***/ })

};
;