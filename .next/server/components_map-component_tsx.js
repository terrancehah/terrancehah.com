"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_map-component_tsx";
exports.ids = ["components_map-component_tsx"];
exports.modules = {

/***/ "./components/map-component.tsx":
/*!**************************************!*\
  !*** ./components/map-component.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/script */ \"./node_modules/next/script.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_script__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/places-utils */ \"./utils/places-utils.ts\");\n\n\n\n\n// Keep for backward compatibility\nconst globalSavedPlaces = _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places;\nconst MapComponent = ({ city, apiKey })=>{\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [markers, setMarkers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [infoWindow, setInfoWindow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [scriptLoaded, setScriptLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedPlace, setSelectedPlace] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [savedPlaces, setSavedPlaces] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [markerCount, setMarkerCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Memoize getSavedPlaces to prevent unnecessary re-renders\n    // const getSavedPlaces = useCallback(() => {\n    //     const now = Date.now();\n    //     // Only update if more than 1000ms has passed since last update\n    //     if (now - lastUpdateRef.current < 1000) {\n    //         return savedPlacesRef.current;\n    //     }\n    //     lastUpdateRef.current = now;\n    //     return savedPlacesRef.current;\n    // }, []);\n    // Expose getSavedPlaces to window with debouncing\n    // useEffect(() => {\n    //     if (typeof window !== 'undefined') {\n    //         window.getSavedPlaces = getSavedPlaces;\n    //     }\n    //     return () => {\n    //         if (typeof window !== 'undefined') {\n    //             delete window.getSavedPlaces;\n    //         }\n    //     };\n    // }, [getSavedPlaces]);\n    // // Update savedPlacesRef when places are added/removed\n    // const updateSavedPlaces = useCallback((places: Place[]) => {\n    //     savedPlacesRef.current = places;\n    //     lastUpdateRef.current = Date.now();\n    // }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"MapComponent: Received props:\", {\n            city,\n            apiKeyLength: apiKey?.length\n        });\n        if (!apiKey) {\n            console.error(\"MapComponent: Google Maps API key is missing\");\n            setError(\"Google Maps API key is missing\");\n            setIsLoading(false);\n            return;\n        }\n        if (!scriptLoaded || !mapRef.current) {\n            console.log(\"MapComponent: Waiting for script to load or map ref to be ready...\");\n            return;\n        }\n        console.log(\"MapComponent: Initializing map with city:\", city);\n        const initMap = async ()=>{\n            try {\n                // Import required libraries\n                const { Map: Map1 } = await window.google.maps.importLibrary(\"maps\");\n                const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n                const geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({\n                    address: city\n                }, async (results, status)=>{\n                    console.log(\"Geocoding response:\", {\n                        status,\n                        resultsLength: results?.length\n                    });\n                    if (status !== \"OK\" || !results?.[0]?.geometry?.location) {\n                        console.error(\"Geocoding failed:\", status);\n                        setError(`Could not find location for ${city}`);\n                        setIsLoading(false);\n                        return;\n                    }\n                    try {\n                        const location = results[0].geometry.location;\n                        const newMap = new Map1(mapRef.current, {\n                            center: location,\n                            zoom: 12,\n                            mapId: \"2d604af04a7c7fa8\"\n                        });\n                        setMap(newMap);\n                        const newInfoWindow = new google.maps.InfoWindow({\n                            maxWidth: 400\n                        });\n                        setInfoWindow(newInfoWindow);\n                        infoWindowRef.current = newInfoWindow;\n                        const createCityInfoWindowContent = async (city, location)=>{\n                            try {\n                                // Search for the city to get its details including photos\n                                const cityPlace = await (0,_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.searchPlaceByText)(city, {\n                                    latitude: location.lat(),\n                                    longitude: location.lng()\n                                }, city);\n                                if (!cityPlace) return null;\n                                // Create a photo carousel HTML\n                                const photoCarousel = cityPlace.photos && cityPlace.photos.length > 0 ? `\n                                            <div class=\"relative w-full\" style=\"height: 200px;\">\n                                                <div class=\"carousel-container overflow-hidden w-full h-full\">\n                                                    <div class=\"carousel-track flex transition-transform duration-500\" style=\"height: 100%;\">\n                                                        ${cityPlace.photos.slice(0, 5).map((photo, index)=>`\n                                                            <div class=\"carousel-slide w-full h-full flex-none\">\n                                                                <img src=\"https://places.googleapis.com/v1/${photo.name}/media?maxHeightPx=340&maxWidthPx=340&key=${apiKey}\"\n                                                                    alt=\"${city}\"\n                                                                    class=\"w-full h-full object-cover\"\n                                                                />\n                                                            </div>\n                                                        `).join(\"\")}\n                                                    </div>\n                                                </div>\n                                                <button onclick=\"window.prevSlide()\" class=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\n                                                    </svg>\n                                                </button>\n                                                <button onclick=\"window.nextSlide()\" class=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-1 shadow-md hover:bg-white\">\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\n                                                    </svg>\n                                                </button>\n                                                <div class=\"absolute bottom-2 left-0 right-0 flex justify-center gap-1\">\n                                                    ${cityPlace.photos.slice(0, 5).map((_, index)=>`\n                                                        <button onclick=\"window.goToSlide(${index})\" class=\"w-2 h-2 rounded-full bg-white/80 hover:bg-white shadow-sm carousel-dot\" data-index=\"${index}\">\n                                                        </button>\n                                                    `).join(\"\")}\n                                                </div>\n                                            </div>\n                                        ` : \"\";\n                                // Add carousel control functions to window\n                                if (cityPlace.photos && cityPlace.photos.length > 0) {\n                                    const numSlides = Math.min(cityPlace.photos.length, 5);\n                                    window.currentSlide = 0;\n                                    window.updateCarousel = ()=>{\n                                        const track = document.querySelector(\".carousel-track\");\n                                        if (track) {\n                                            track.style.transform = `translateX(-${window.currentSlide * 100}%)`;\n                                            // Update dots\n                                            document.querySelectorAll(\".carousel-dot\").forEach((dot, index)=>{\n                                                if (index === window.currentSlide) {\n                                                    dot.classList.add(\"bg-white\");\n                                                    dot.classList.remove(\"bg-white/80\");\n                                                } else {\n                                                    dot.classList.remove(\"bg-white\");\n                                                    dot.classList.add(\"bg-white/80\");\n                                                }\n                                            });\n                                        }\n                                    };\n                                    window.nextSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide + 1) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.prevSlide = ()=>{\n                                        window.currentSlide = (window.currentSlide - 1 + numSlides) % numSlides;\n                                        window.updateCarousel();\n                                    };\n                                    window.goToSlide = (index)=>{\n                                        window.currentSlide = index;\n                                        window.updateCarousel();\n                                    };\n                                }\n                                return `\n                                        <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 340px;\">\n                                            ${photoCarousel}\n                                            <div class=\"p-4\">\n                                                <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">${city}</h2>\n                                                ${cityPlace.formattedAddress ? `<p class=\"text-sm text-gray-500 mb-2\">${cityPlace.formattedAddress}</p>` : \"\"}\n                                            </div>\n                                        </div>\n                                    `;\n                            } catch (error) {\n                                console.error(\"Error creating city info window:\", error);\n                                return null;\n                            }\n                        };\n                        // Create a marker for the city\n                        const cityMarker = new google.maps.marker.AdvancedMarkerElement({\n                            map: newMap,\n                            position: location,\n                            title: city\n                        });\n                        // Add click listener to the marker\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            if (infoWindow) {\n                                const content = createCityInfoWindowContent(city, location);\n                                if (content) {\n                                    infoWindow.setContent(await content);\n                                    infoWindow.open(newMap, cityMarker);\n                                }\n                            }\n                        });\n                        markers.set(city, cityMarker);\n                        // Add click listener for future interaction\n                        cityMarker.addListener(\"gmp-click\", async ()=>{\n                            const content = await createCityInfoWindowContent(city, location);\n                            if (content) {\n                                newInfoWindow.setContent(content);\n                                newInfoWindow.open({\n                                    anchor: cityMarker,\n                                    map: newMap\n                                });\n                            }\n                        });\n                    } catch (err) {\n                        console.error(\"Error setting up map:\", err);\n                        setError(\"Failed to initialize map\");\n                    }\n                });\n            } catch (err) {\n                console.error(\"Error initializing map:\", err);\n                setError(\"Failed to initialize map\");\n                setIsLoading(false);\n            }\n        };\n        initMap();\n    }, [\n        city,\n        scriptLoaded,\n        apiKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!map) return;\n        window.removePlaceFromMap = (placeId)=>{\n            console.log(\"Debug - Starting removal process for placeId:\", placeId);\n            // Remove from global storage\n            _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.removePlace(placeId);\n            try {\n                const marker = markersRef.current.get(placeId);\n                if (marker) {\n                    console.log(\"Debug - Found marker:\", marker);\n                    // Simply set the map to null to remove the marker\n                    marker.position = null;\n                    // Close info window if open\n                    if (infoWindowRef.current) {\n                        infoWindowRef.current.close();\n                    }\n                    // Remove event listeners\n                    google.maps.event.clearInstanceListeners(marker);\n                    // Clean up references\n                    markersRef.current.delete(placeId);\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.removePlace(placeId);\n                    // Force update component state\n                    setMarkerCount((prev)=>prev - 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places));\n                    console.log(\"Debug - After removal markers:\", [\n                        ...markersRef.current.entries()\n                    ]);\n                    console.log(\"Debug - Successfully removed marker and place:\", placeId);\n                } else {\n                    console.warn(\"Debug - Could not find marker for placeId:\", placeId);\n                }\n            } catch (error) {\n                console.error(\"Debug - Error during marker removal:\", error);\n            }\n            // Notify components that places changed\n            window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                detail: {\n                    places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                    count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                }\n            }));\n        };\n        window.addPlaceToMap = async (data)=>{\n            try {\n                // Add this check at the start of the function\n                const markerId = data.place?.id;\n                if (!markerId) {\n                    console.error(\"Debug - No place ID provided\");\n                    return;\n                }\n                // Add this check for duplicates\n                if (_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.hasPlace(markerId)) {\n                    console.log(\"Debug - Place already exists:\", markerId);\n                    return;\n                }\n                // Add to global storage first\n                if (data.place) {\n                    _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.addPlace(data.place);\n                    // Force a re-render when adding a marker\n                    setMarkerCount((prev)=>prev + 1);\n                    setSavedPlaces(new Map(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places));\n                    console.log(\"Debug - Added place:\", _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places);\n                }\n                const [{ AdvancedMarkerElement }, { PinElement }] = await Promise.all([\n                    google.maps.importLibrary(\"marker\"),\n                    google.maps.importLibrary(\"marker\")\n                ]);\n                const pinElement = new google.maps.marker.PinElement({\n                    scale: 1\n                });\n                console.log(\"Debug - Creating marker with ID:\", markerId);\n                // Remove existing marker if it exists\n                if (markersRef.current.has(markerId)) {\n                    const existingMarker = markersRef.current.get(markerId);\n                    if (existingMarker) {\n                        existingMarker.map = null;\n                        if (existingMarker.element) {\n                            existingMarker.element.remove();\n                        }\n                        markersRef.current.delete(markerId);\n                    }\n                }\n                const marker = new google.maps.marker.AdvancedMarkerElement({\n                    position: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    },\n                    title: data.title,\n                    content: pinElement.element,\n                    gmpDraggable: false\n                });\n                // Set the map property after creation\n                marker.map = map;\n                // Add click listener\n                marker.addListener(\"gmp-click\", ()=>{\n                    if (data.place) {\n                        window.currentInfoWindowMarker = {\n                            markerId: markerId,\n                            marker: marker\n                        };\n                        const content = createPlaceInfoWindowContent(data.place, markerId);\n                        if (content && infoWindowRef.current) {\n                            infoWindowRef.current.setContent(content);\n                            infoWindowRef.current.open(map, marker);\n                        }\n                    }\n                });\n                // Store the marker reference\n                // markersRef.current.set(markerId, marker);\n                // if (data.place) {\n                //     savedPlacesManager.addPlace(data.place);\n                //     // Force a re-render when adding a marker\n                //     setMarkerCount(prev => prev + 1);\n                //     setSavedPlaces(new Map(savedPlacesManager.places));\n                //     console.log('Debug - Added place:', savedPlacesManager.places);\n                // }\n                // console.log('Debug - Marker added successfully');\n                // Notify components that places changed\n                window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                    detail: {\n                        places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                        count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                    }\n                }));\n            } catch (err) {\n                console.error(\"Error adding place marker:\", err);\n            }\n        };\n        window.getSavedPlaces = ()=>{\n            return _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.getPlaces();\n        };\n    }, [\n        map,\n        infoWindow,\n        markerCount\n    ]);\n    // // Add a useEffect to monitor savedPlaces changes\n    // useEffect(() => {\n    //     console.log('Current saved places:', [...globalSavedPlaces.entries()]);\n    // }, [savedPlaces]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\" && map) {\n                window.google?.maps?.event?.trigger(map, \"resize\");\n            }\n        };\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, [\n        map\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Load saved places from session storage on mount\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                if (parsed.savedPlaces) {\n                    parsed.savedPlaces.forEach((place)=>{\n                        if (place.id) {\n                            _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.addPlace(place);\n                        }\n                    });\n                    // Notify components of initial load\n                    window.dispatchEvent(new CustomEvent(\"savedPlacesChanged\", {\n                        detail: {\n                            places: Array.from(_utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.values()),\n                            count: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.places.size\n                        }\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error loading saved places from session:\", error);\n            }\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Save to session storage when places change\n        const sessionData = sessionStorage.getItem(\"travelPlannerSession\");\n        if (sessionData) {\n            try {\n                const parsed = JSON.parse(sessionData);\n                sessionStorage.setItem(\"travelPlannerSession\", JSON.stringify({\n                    ...parsed,\n                    savedPlaces: _utils_places_utils__WEBPACK_IMPORTED_MODULE_3__.savedPlacesManager.getPlaces()\n                }));\n            } catch (error) {\n                console.error(\"Error saving places to session:\", error);\n            }\n        }\n    }, [\n        savedPlaces\n    ]);\n    const getPhotoUrl = (photo, index)=>{\n        return photo.getURI?.() || \"\";\n    };\n    const handleSlideChange = (_, index)=>{\n        if (window.currentSlide !== undefined) {\n            window.currentSlide = index;\n        }\n    };\n    const createPlaceInfoWindowContent = (place, markerId)=>{\n        console.log(\"Debug - Creating info window content for markerId:\", markerId);\n        const photoUrl = place.photos && place.photos[0] ? `https://places.googleapis.com/v1/${place.photos[0].name}/media?maxHeightPx=200&maxWidthPx=300&key=${apiKey}` : \"\";\n        const placeTitle = typeof place.displayName === \"string\" ? place.displayName : place.displayName.text;\n        return `\n            <div class=\"bg-white rounded-lg shadow-sm\" style=\"max-width: 300px;\">\n                ${photoUrl ? `\n                    <div style=\"height: 150px; width: 100%;\">\n                        <img src=\"${photoUrl}\" \n                            alt=\"${placeTitle}\"\n                            style=\"width: 100%; height: 100%; object-fit: cover; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;\"\n                        />\n                    </div>\n                ` : \"\"}\n\n                <div class=\"p-3\">\n                    <div class=\"flex justify-between items-start\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-1\">\n                            ${placeTitle}\n                        </h3>\n                        <button \n                            onclick=\"\n                                (function() {\n                                    console.log('Debug - Delete button clicked for markerId:', '${markerId}');\n                                    if (window.removePlaceFromMap) {\n                                        window.removePlaceFromMap('${markerId}');\n                                        // Close the info window after deletion\n                                        if (window.currentInfoWindow) {\n                                            window.currentInfoWindow.close();\n                                        }\n                                    }\n                                })();\n                            \"\n                            class=\"p-1 hover:bg-red-50 rounded-full\"\n                            aria-label=\"Remove place\"\n                        >\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n                            </svg>\n                        </button>\n                    </div>\n                    ${place.primaryTypeDisplayName ? `<div class=\"text-sm text-gray-600 mb-1\">${place.primaryTypeDisplayName.text}</div>` : \"\"}\n                    ${place.formattedAddress ? `<p class=\"text-sm text-gray-500\">${place.formattedAddress}</p>` : \"\"}\n                </div>\n            </div>\n        `;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_script__WEBPACK_IMPORTED_MODULE_2___default()), {\n                src: `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,marker&v=beta&callback=Function.prototype`,\n                strategy: \"afterInteractive\",\n                onLoad: ()=>{\n                    console.log(\"Google Maps script loaded\");\n                    setScriptLoaded(true);\n                },\n                onError: (e)=>{\n                    console.error(\"Failed to load Google Maps script:\", e);\n                    setError(\"Failed to load Google Maps\");\n                    setIsLoading(false);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 598,\n                columnNumber: 17\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100 text-red-500 p-4 text-center\",\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 613,\n                columnNumber: 17\n            }, undefined),\n            isLoading && !error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 flex items-center justify-center bg-gray-100\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-gray-600\",\n                    children: [\n                        \"Loading map...\",\n                        !apiKey && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: \"Waiting for API key...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                            lineNumber: 621,\n                            columnNumber: 37\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                    lineNumber: 619,\n                    columnNumber: 21\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 618,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n                lineNumber: 625,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terrancehah/Documents/terrancehah.com/components/map-component.tsx\",\n        lineNumber: 596,\n        columnNumber: 9\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapComponent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/map-component.tsx\n");

/***/ }),

/***/ "./managers/stage-manager.ts":
/*!***********************************!*\
  !*** ./managers/stage-manager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STAGE_LIMITS: () => (/* binding */ STAGE_LIMITS),\n/* harmony export */   validateStageProgression: () => (/* binding */ validateStageProgression)\n/* harmony export */ });\n// Validation functions for each stage\nconst STAGE_LIMITS = {\n    3: {\n        maxPrompts: 5,\n        upgradeMessage: `I'm sorry to tell you that you have reached the prompts limit in the free version. \n    Would you like to upgrade to unlock unlimited places browsing and premium features? \n    This will give you access to personalized recommendations, detailed scheduling, and local insights.`\n    }\n};\nconst STAGE_VALIDATORS = {\n    // Stage 1: Initial Parameter Check\n    1: {\n        validate: (details)=>{\n            const missingRequirements = [];\n            if (!details.destination) missingRequirements.push(\"destination\");\n            if (!details.startDate) missingRequirements.push(\"start date\");\n            if (!details.endDate) missingRequirements.push(\"end date\");\n            if (!details.preferences?.length) missingRequirements.push(\"preferences\");\n            if (!details.language) missingRequirements.push(\"language\");\n            return {\n                isValid: missingRequirements.length === 0,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 2: City Introduction\n    2: {\n        validate: (details, metrics)=>{\n            return {\n                isValid: true,\n                missingRequirements: []\n            };\n        }\n    },\n    // Stage 3: Places Introduction\n    3: {\n        validate: (_, metrics)=>{\n            const stagePrompts = metrics.stagePrompts?.[3] || 0;\n            const maxPrompts = STAGE_LIMITS[3].maxPrompts;\n            if (stagePrompts >= maxPrompts) {\n                return {\n                    isValid: true,\n                    missingRequirements: [\n                        \"Maximum places limit reached. Ready for upgrade.\"\n                    ],\n                    upgradeRequired: true\n                };\n            }\n            return {\n                isValid: false,\n                missingRequirements: [\n                    \"Continue adding places\"\n                ]\n            };\n        }\n    },\n    // Stage 4: Itinerary Review (with payment check)\n    4: {\n        validate: (_, metrics)=>{\n            const missingRequirements = [];\n            // Only allow progression if user has paid\n            if (!metrics.isPaid) {\n                missingRequirements.push(\"payment required\");\n            }\n            return {\n                isValid: metrics.isPaid,\n                missingRequirements\n            };\n        }\n    },\n    // Stage 5: Final Confirmation (keeping it open as requested)\n    5: {\n        validate: (_, metrics)=>{\n            const missingRequirements = [];\n            // First validate Stage 1 parameters\n            const stage1Validator = STAGE_VALIDATORS[1];\n            const stage1Result = stage1Validator.validate(_, metrics);\n            if (!stage1Result.isValid) {\n                return stage1Result;\n            }\n            return {\n                isValid: true,\n                missingRequirements\n            };\n        }\n    }\n};\n// Main validation function to be used in the chat component\nfunction validateStageProgression(currentStage, nextStage, travelDetails, metrics) {\n    // Ensure stage progression is sequential\n    if (nextStage !== currentStage + 1) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage progression\"\n            ]\n        };\n    }\n    // Get validator for the current stage\n    const validator = STAGE_VALIDATORS[currentStage];\n    if (!validator) {\n        return {\n            canProgress: false,\n            missingRequirements: [\n                \"invalid stage\"\n            ]\n        };\n    }\n    // Run validation\n    const { isValid, missingRequirements, upgradeRequired } = validator.validate(travelDetails, metrics);\n    return {\n        canProgress: isValid,\n        missingRequirements,\n        upgradeRequired\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/stage-manager.ts\n");

/***/ }),

/***/ "./managers/types.ts":
/*!***************************!*\
  !*** ./managers/types.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUDGET_DESCRIPTIONS: () => (/* binding */ BUDGET_DESCRIPTIONS),\n/* harmony export */   BUDGET_OPTIONS: () => (/* binding */ BUDGET_OPTIONS),\n/* harmony export */   BudgetLevel: () => (/* binding */ BudgetLevel),\n/* harmony export */   CURRENCY_INFO: () => (/* binding */ CURRENCY_INFO),\n/* harmony export */   ComponentType: () => (/* binding */ ComponentType),\n/* harmony export */   DEFAULT_CURRENCIES: () => (/* binding */ DEFAULT_CURRENCIES),\n/* harmony export */   LANGUAGE_LABELS: () => (/* binding */ LANGUAGE_LABELS),\n/* harmony export */   LANGUAGE_OPTIONS: () => (/* binding */ LANGUAGE_OPTIONS),\n/* harmony export */   PREFERENCE_ICONS: () => (/* binding */ PREFERENCE_ICONS),\n/* harmony export */   PREFERENCE_OPTIONS: () => (/* binding */ PREFERENCE_OPTIONS),\n/* harmony export */   SupportedLanguage: () => (/* binding */ SupportedLanguage),\n/* harmony export */   TravelPreference: () => (/* binding */ TravelPreference)\n/* harmony export */ });\n///Users/terrancehah/Documents/terrancehah.com/managers/types.ts\nvar ComponentType;\n(function(ComponentType) {\n    ComponentType[\"DatePicker\"] = \"DatePicker\";\n    ComponentType[\"PreferenceSelector\"] = \"PreferenceSelector\";\n    ComponentType[\"BudgetSelector\"] = \"BudgetSelector\";\n    ComponentType[\"LanguageSelector\"] = \"LanguageSelector\";\n    ComponentType[\"PlaceCard\"] = \"PlaceCard\";\n    ComponentType[\"TransportSelector\"] = \"TransportSelector\";\n    ComponentType[\"Carousel\"] = \"Carousel\";\n    ComponentType[\"DetailsCard\"] = \"DetailsCard\";\n    ComponentType[\"SavedPlacesCarousel\"] = \"SavedPlacesCarousel\";\n    ComponentType[\"QuickResponse\"] = \"QuickResponse\";\n})(ComponentType || (ComponentType = {}));\nvar BudgetLevel;\n(function(BudgetLevel) {\n    BudgetLevel[\"Budget\"] = \"$\";\n    BudgetLevel[\"Moderate\"] = \"$$\";\n    BudgetLevel[\"Luxury\"] = \"$$$\";\n    BudgetLevel[\"UltraLuxury\"] = \"$$$$\";\n})(BudgetLevel || (BudgetLevel = {}));\nvar TravelPreference;\n(function(TravelPreference) {\n    TravelPreference[\"Culture\"] = \"Culture and Heritage\";\n    TravelPreference[\"Nature\"] = \"Nature\";\n    TravelPreference[\"Food\"] = \"Foodie\";\n    TravelPreference[\"Relaxation\"] = \"Leisure\";\n    TravelPreference[\"Adventure\"] = \"Adventure\";\n    TravelPreference[\"Shopping\"] = \"Arts & Museum\";\n})(TravelPreference || (TravelPreference = {}));\nvar SupportedLanguage;\n(function(SupportedLanguage) {\n    SupportedLanguage[\"English\"] = \"English\";\n    SupportedLanguage[\"Malay\"] = \"Malay (Bahasa Melayu)\";\n    SupportedLanguage[\"Spanish\"] = \"Espanol\";\n    SupportedLanguage[\"French\"] = \"Francais\";\n    SupportedLanguage[\"German\"] = \"Deutsch\";\n    SupportedLanguage[\"Italian\"] = \"Italiano\";\n    SupportedLanguage[\"Czech\"] = \"Czech (Cestina)\";\n    SupportedLanguage[\"SimplifiedChinese\"] = \"Simplified Chinese (简体中文)\";\n    SupportedLanguage[\"TraditionalChinese\"] = \"Traditional Chinese (繁體中文)\";\n    SupportedLanguage[\"Japanese\"] = \"Japanese (日本語)\";\n    SupportedLanguage[\"Korean\"] = \"Korean (한국어)\";\n})(SupportedLanguage || (SupportedLanguage = {}));\nconst BUDGET_DESCRIPTIONS = {\n    [\"$\"]: \"Budget-friendly options ($)\",\n    [\"$$\"]: \"Mid-range options ($$)\",\n    [\"$$$\"]: \"High-end options ($$$)\",\n    [\"$$$$\"]: \"Ultra luxury options ($$$$)\"\n};\nconst PREFERENCE_ICONS = {\n    [\"Culture and Heritage\"]: \"\\uD83C\\uDF8F\",\n    [\"Nature\"]: \"\\uD83C\\uDF40\",\n    [\"Foodie\"]: \"\\uD83C\\uDF71\",\n    [\"Leisure\"]: \"\\uD83C\\uDF07\",\n    [\"Adventure\"]: \"\\uD83E\\uDE82\",\n    [\"Arts & Museum\"]: \"\\uD83C\\uDFA8\"\n};\nconst LANGUAGE_LABELS = {\n    [\"English\"]: \"English\",\n    [\"Malay (Bahasa Melayu)\"]: \"Malay (Bahasa Melayu)\",\n    [\"Espanol\"]: \"Espanol\",\n    [\"Francais\"]: \"Francais\",\n    [\"Deutsch\"]: \"Deutsch\",\n    [\"Italiano\"]: \"Italiano\",\n    [\"Czech (Cestina)\"]: \"Czech (Cestina)\",\n    [\"Simplified Chinese (简体中文)\"]: \"Simplified Chinese (简体中文)\",\n    [\"Traditional Chinese (繁體中文)\"]: \"Traditional Chinese (繁體中文)\",\n    [\"Japanese (日本語)\"]: \"Japanese (日本語)\",\n    [\"Korean (한국어)\"]: \"Korean (한국어)\"\n};\nconst BUDGET_OPTIONS = [\n    {\n        value: \"$\",\n        label: \"Budget\",\n        description: \"Budget-friendly options with basic amenities\"\n    },\n    {\n        value: \"$$\",\n        label: \"Moderate\",\n        description: \"Mid-range options with good value\"\n    },\n    {\n        value: \"$$$\",\n        label: \"Luxury\",\n        description: \"High-end options with premium services\"\n    },\n    {\n        value: \"$$$$\",\n        label: \"Ultra Luxury\",\n        description: \"Exclusive luxury experiences\"\n    }\n];\nconst LANGUAGE_OPTIONS = Object.entries(SupportedLanguage).map(([key, value])=>({\n        value,\n        label: LANGUAGE_LABELS[value]\n    }));\nconst PREFERENCE_OPTIONS = [\n    {\n        value: \"Culture and Heritage\",\n        label: \"Culture and Heritage\",\n        icon: PREFERENCE_ICONS[\"Culture and Heritage\"]\n    },\n    {\n        value: \"Nature\",\n        label: \"Nature\",\n        icon: PREFERENCE_ICONS[\"Nature\"]\n    },\n    {\n        value: \"Foodie\",\n        label: \"Foodie\",\n        icon: PREFERENCE_ICONS[\"Foodie\"]\n    },\n    {\n        value: \"Leisure\",\n        label: \"Leisure\",\n        icon: PREFERENCE_ICONS[\"Leisure\"]\n    },\n    {\n        value: \"Adventure\",\n        label: \"Adventure\",\n        icon: PREFERENCE_ICONS[\"Adventure\"]\n    },\n    {\n        value: \"Arts & Museum\",\n        label: \"Arts & Museum\",\n        icon: PREFERENCE_ICONS[\"Arts & Museum\"]\n    }\n];\nconst CURRENCY_INFO = {\n    \"USD\": {\n        name: \"US Dollar\",\n        symbol: \"$\",\n        position: \"before\"\n    },\n    \"EUR\": {\n        name: \"Euro\",\n        symbol: \"€\",\n        position: \"before\"\n    },\n    \"GBP\": {\n        name: \"British Pound\",\n        symbol: \"\\xa3\",\n        position: \"before\"\n    },\n    \"CNY\": {\n        name: \"Chinese Yuan\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"JPY\": {\n        name: \"Japanese Yen\",\n        symbol: \"\\xa5\",\n        position: \"before\"\n    },\n    \"SGD\": {\n        name: \"Singapore Dollar\",\n        symbol: \"S$\",\n        position: \"before\"\n    },\n    \"MYR\": {\n        name: \"Malaysian Ringgit\",\n        symbol: \"RM\",\n        position: \"before\"\n    },\n    \"KRW\": {\n        name: \"South Korean Won\",\n        symbol: \"₩\",\n        position: \"before\"\n    },\n    \"AUD\": {\n        name: \"Australian Dollar\",\n        symbol: \"A$\",\n        position: \"before\"\n    },\n    \"CAD\": {\n        name: \"Canadian Dollar\",\n        symbol: \"C$\",\n        position: \"before\"\n    }\n};\nconst DEFAULT_CURRENCIES = [\n    \"USD\",\n    \"EUR\",\n    \"GBP\",\n    \"CNY\",\n    \"JPY\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./managers/types.ts\n");

/***/ }),

/***/ "./utils/local-metrics.ts":
/*!********************************!*\
  !*** ./utils/local-metrics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METRICS_STORAGE_KEY: () => (/* binding */ METRICS_STORAGE_KEY),\n/* harmony export */   checkInputLimits: () => (/* binding */ checkInputLimits),\n/* harmony export */   checkSession: () => (/* binding */ checkSession),\n/* harmony export */   clearPaymentReference: () => (/* binding */ clearPaymentReference),\n/* harmony export */   getPaymentReference: () => (/* binding */ getPaymentReference),\n/* harmony export */   getPaymentReferenceId: () => (/* binding */ getPaymentReferenceId),\n/* harmony export */   getPaymentStatus: () => (/* binding */ getPaymentStatus),\n/* harmony export */   getStoredMetrics: () => (/* binding */ getStoredMetrics),\n/* harmony export */   resetMetrics: () => (/* binding */ resetMetrics),\n/* harmony export */   setPaymentReference: () => (/* binding */ setPaymentReference),\n/* harmony export */   setPaymentReferenceId: () => (/* binding */ setPaymentReferenceId),\n/* harmony export */   setPaymentStatus: () => (/* binding */ setPaymentStatus),\n/* harmony export */   updateStoredMetrics: () => (/* binding */ updateStoredMetrics)\n/* harmony export */ });\n/* harmony import */ var _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/stage-manager */ \"./managers/stage-manager.ts\");\n/* harmony import */ var _session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-manager */ \"./utils/session-manager.ts\");\n\n\nconst METRICS_STORAGE_KEY = \"travel_interaction_metrics\";\nconst SESSION_KEY = \"travel_session_id\";\nconst PAYMENT_REF_KEY = \"payment_reference_id\";\nconst MAX_TOTAL_INPUTS = 15;\nfunction getStoredMetrics() {\n    try {\n        // Check session validity first\n        if (!(0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.checkSessionValidity)()) {\n            return resetMetrics();\n        }\n        const storedMetrics = localStorage.getItem(METRICS_STORAGE_KEY);\n        if (!storedMetrics) {\n            return resetMetrics();\n        }\n        const metrics = JSON.parse(storedMetrics);\n        // Ensure all fields exist\n        metrics.totalPrompts = metrics.totalPrompts || 0;\n        metrics.savedPlacesCount = metrics.savedPlacesCount || 0;\n        metrics.isPaid = metrics.isPaid || false;\n        metrics.stagePrompts = metrics.stagePrompts || {\n            1: 0,\n            2: 0,\n            3: 0\n        };\n        metrics.paymentReference = metrics.paymentReference || \"\";\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving metrics:\", error);\n        return resetMetrics();\n    }\n}\nfunction updateStoredMetrics(currentStage, incrementPrompt = true) {\n    try {\n        const metrics = getStoredMetrics();\n        if (incrementPrompt) {\n            // Only increment if explicitly requested and not already at limit\n            const { withinStageLimit } = checkInputLimits(currentStage);\n            if (withinStageLimit) {\n                metrics.totalPrompts += 1;\n                if (!metrics.stagePrompts) {\n                    metrics.stagePrompts = {};\n                }\n                metrics.stagePrompts[currentStage] = (metrics.stagePrompts[currentStage] || 0) + 1;\n            }\n        }\n        // Save to storage\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating metrics:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction checkInputLimits(currentStage) {\n    const metrics = getStoredMetrics();\n    const stagePrompts = metrics.stagePrompts?.[currentStage] || 0;\n    const totalPrompts = metrics.totalPrompts || 0;\n    // Only apply stage limits to stage 3, all other stages should be unlimited\n    const result = {\n        withinStageLimit: currentStage === 3 ? stagePrompts < _managers_stage_manager__WEBPACK_IMPORTED_MODULE_0__.STAGE_LIMITS[3].maxPrompts : true,\n        withinTotalLimit: currentStage === 3 ? totalPrompts < MAX_TOTAL_INPUTS : true,\n        stageInputCount: stagePrompts,\n        totalInputCount: totalPrompts\n    };\n    // console.log(`[Metrics] Input limit check for stage ${currentStage}:`, result);\n    return result;\n}\nfunction resetMetrics() {\n    const metrics = {\n        totalPrompts: 0,\n        savedPlacesCount: 0,\n        isPaid: false,\n        stagePrompts: {\n            1: 0,\n            2: 0,\n            3: 0\n        },\n        paymentReference: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    };\n    localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n    (0,_session_manager__WEBPACK_IMPORTED_MODULE_1__.initializeSession)(); // Initialize a new session when metrics are reset\n    return metrics;\n}\nfunction checkSession() {\n    const currentSession = localStorage.getItem(SESSION_KEY);\n    if (!currentSession) {\n        const newSession = Date.now().toString();\n        localStorage.setItem(SESSION_KEY, newSession);\n        resetMetrics();\n        return false;\n    }\n    return true;\n}\nfunction setPaymentStatus(isPaid) {\n    try {\n        const metrics = getStoredMetrics();\n        metrics.isPaid = isPaid;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        return metrics;\n    } catch (error) {\n        console.error(\"[Metrics] Error updating payment status:\", error);\n        return getStoredMetrics();\n    }\n}\nfunction getPaymentStatus() {\n    const metrics = getStoredMetrics();\n    return metrics.isPaid || false;\n}\nfunction setPaymentReferenceId(referenceId) {\n    try {\n        localStorage.setItem(PAYMENT_REF_KEY, referenceId);\n        console.log(\"[Metrics] Stored payment reference ID:\", referenceId);\n    } catch (error) {\n        console.error(\"[Metrics] Error storing payment reference ID:\", error);\n    }\n}\nfunction getPaymentReferenceId() {\n    try {\n        return localStorage.getItem(PAYMENT_REF_KEY);\n    } catch (error) {\n        console.error(\"[Metrics] Error retrieving payment reference ID:\", error);\n        return null;\n    }\n}\nfunction setPaymentReference(reference) {\n    try {\n        const metrics = getStoredMetrics();\n        metrics.paymentReference = reference;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        console.log(\"[Metrics] Payment reference set:\", reference);\n    } catch (error) {\n        console.error(\"[Metrics] Error setting payment reference:\", error);\n    }\n}\nfunction getPaymentReference() {\n    try {\n        const metrics = getStoredMetrics();\n        return metrics.paymentReference;\n    } catch (error) {\n        console.error(\"[Metrics] Error getting payment reference:\", error);\n        return undefined;\n    }\n}\nfunction clearPaymentReference() {\n    try {\n        const metrics = getStoredMetrics();\n        delete metrics.paymentReference;\n        localStorage.setItem(METRICS_STORAGE_KEY, JSON.stringify(metrics));\n        console.log(\"[Metrics] Payment reference cleared\");\n    } catch (error) {\n        console.error(\"[Metrics] Error clearing payment reference:\", error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/local-metrics.ts\n");

/***/ }),

/***/ "./utils/places-utils.ts":
/*!*******************************!*\
  !*** ./utils/places-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPlaces: () => (/* binding */ fetchPlaces),\n/* harmony export */   filterUniquePlaces: () => (/* binding */ filterUniquePlaces),\n/* harmony export */   formatPrimaryType: () => (/* binding */ formatPrimaryType),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getPlaceTypesFromPreferences: () => (/* binding */ getPlaceTypesFromPreferences),\n/* harmony export */   metricsManager: () => (/* binding */ metricsManager),\n/* harmony export */   preferenceToPlaceTypes: () => (/* binding */ preferenceToPlaceTypes),\n/* harmony export */   savedPlacesManager: () => (/* binding */ savedPlacesManager),\n/* harmony export */   searchMultiplePlacesByText: () => (/* binding */ searchMultiplePlacesByText),\n/* harmony export */   searchPlaceByText: () => (/* binding */ searchPlaceByText)\n/* harmony export */ });\n/* harmony import */ var _managers_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/types */ \"./managers/types.ts\");\n/* harmony import */ var _local_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local-metrics */ \"./utils/local-metrics.ts\");\n// Place related interfaces\n\n\n// Updated preference to place types mapping based on travel-rizz.html\nconst preferenceToPlaceTypes = {\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Culture]: [\n        \"museum\",\n        \"cultural_center\",\n        \"cultural_landmark\",\n        \"historical_landmark\",\n        \"monument\",\n        \"art_gallery\",\n        \"historical_place\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Nature]: [\n        \"national_park\",\n        \"state_park\",\n        \"botanical_garden\",\n        \"wildlife_park\",\n        \"garden\",\n        \"hiking_area\",\n        \"wildlife_refuge\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Food]: [\n        \"restaurant\",\n        \"fine_dining_restaurant\",\n        \"cafe\",\n        \"food_court\",\n        \"bakery\",\n        \"dessert_shop\",\n        \"bar_and_grill\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Relaxation]: [\n        \"spa\",\n        \"wellness_center\",\n        \"shopping_mall\",\n        \"beach\",\n        \"garden\",\n        \"plaza\",\n        \"yoga_studio\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Adventure]: [\n        \"adventure_sports_center\",\n        \"amusement_park\",\n        \"hiking_area\",\n        \"sports_complex\",\n        \"water_park\",\n        \"off_roading_area\",\n        \"sports_activity_location\"\n    ],\n    [_managers_types__WEBPACK_IMPORTED_MODULE_0__.TravelPreference.Shopping]: [\n        \"art_gallery\",\n        \"art_studio\",\n        \"performing_arts_theater\",\n        \"auditorium\",\n        \"concert_hall\",\n        \"museum\",\n        \"opera_house\"\n    ]\n};\n// Helper function to get place types based on preferences\nfunction getPlaceTypesFromPreferences(preferences) {\n    try {\n        // Track used types to avoid repeats\n        const usedTypes = new Set();\n        const resultTypes = [];\n        // Process each preference\n        preferences.forEach((pref)=>{\n            const availableTypes = preferenceToPlaceTypes[pref]?.filter((type)=>!usedTypes.has(type)) || [];\n            // Take 2-3 random types from each preference\n            const numTypes = Math.min(Math.floor(Math.random() * 2) + 2, availableTypes.length);\n            const selectedTypes = availableTypes.sort(()=>Math.random() - 0.5).slice(0, numTypes);\n            // Add to results and mark as used\n            selectedTypes.forEach((type)=>{\n                resultTypes.push(type);\n                usedTypes.add(type);\n            });\n        });\n        return resultTypes;\n    } catch (error) {\n        console.error(\"Error getting place types from preferences:\", error);\n        return [\n            \"tourist_attraction\"\n        ]; // Default fallback\n    }\n}\n// Helper function to format primary type\nconst formatPrimaryType = (type)=>{\n    return type.split(\"_\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n};\n// Helper function to get display name for place type\nconst getDisplayName = (place)=>{\n    if (typeof place.displayName === \"string\") {\n        return place.displayName;\n    }\n    return place.displayName?.text || place.name || \"\";\n};\n// Function to filter out duplicate places\nfunction filterUniquePlaces(places) {\n    if (!places || !Array.isArray(places)) return [];\n    // Get saved places from global state if available\n    const savedPlaces = savedPlacesManager.getPlaces();\n    const savedPlaceIds = new Set(savedPlaces.map((place)=>place.id));\n    const savedPlaceNames = new Set(savedPlaces.map((place)=>typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase()));\n    // Filter out places that:\n    // 1. Have same ID as saved place\n    // 2. Have same name as saved place\n    return places.filter((place)=>{\n        if (!place.id) return false;\n        if (savedPlaceIds.has(place.id)) return false;\n        const placeName = typeof place.displayName === \"string\" ? place.displayName.toLowerCase() : place.displayName.text.toLowerCase();\n        if (savedPlaceNames.has(placeName)) return false;\n        return true;\n    });\n}\nconst STORAGE_KEY = \"saved_places\";\n// SavedPlacesManager singleton\nconst createSavedPlacesManager = ()=>{\n    const places = new Map();\n    let initialized = false;\n    // Load places from localStorage\n    const loadFromStorage = ()=>{\n        if (!initialized && \"undefined\" !== \"undefined\") {}\n    };\n    return {\n        places,\n        addPlace (place) {\n            loadFromStorage(); // Ensure places are loaded\n            if (place?.id) {\n                places.set(place.id, place);\n                this._persist();\n                this._notifyChange();\n            }\n        },\n        removePlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            places.delete(id);\n            this._persist();\n            this._notifyChange();\n        },\n        getPlaces () {\n            loadFromStorage(); // Ensure places are loaded\n            return Array.from(places.values());\n        },\n        hasPlace (id) {\n            loadFromStorage(); // Ensure places are loaded\n            return places.has(id);\n        },\n        _persist () {\n            if (false) {}\n        },\n        _notifyChange () {\n            if (false) {}\n        },\n        serialize () {\n            return JSON.stringify(Array.from(places.values()));\n        }\n    };\n};\nconst savedPlacesManager = createSavedPlacesManager();\n// Initialize on client side\nif (false) {}\n// Helper function to handle different search strategies\nasync function searchWithStrategy(searchText, location, cityName, useAlternateSearch) {\n    if (false) {}\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n        \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n    };\n    // Choose query based on whether we're doing alternate search\n    const query = useAlternateSearch ? `different ${searchText} in ${cityName}` : `${searchText} ${cityName}`;\n    console.log(`[searchWithStrategy] Using ${useAlternateSearch ? \"alternate\" : \"original\"} search:`, query);\n    const result = await trySearch(query, headers, location);\n    return result;\n}\nasync function trySearch(query, headers, location) {\n    try {\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                textQuery: query,\n                locationBias: {\n                    circle: {\n                        center: {\n                            latitude: location.latitude,\n                            longitude: location.longitude\n                        },\n                        radius: 20000.0\n                    }\n                },\n                maxResultCount: 1\n            })\n        });\n        if (!response.ok) {\n            console.error(\"[trySearch] Search failed:\", {\n                status: response.status,\n                statusText: response.statusText,\n                query\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.places?.[0]) {\n            console.log(\"[trySearch] No places found for query:\", query);\n            return null;\n        }\n        console.log(\"[trySearch] Found new place:\", {\n            id: data.places[0].id,\n            name: data.places[0].displayName?.text || data.places[0].name\n        });\n        return {\n            places: [\n                data.places[0]\n            ]\n        };\n    } catch (error) {\n        console.error(\"[trySearch] Error:\", error);\n        return null;\n    }\n}\nasync function searchPlaceByText(searchText, location, destination) {\n    console.log(\"[searchPlaceByText] Starting search with:\", {\n        searchText,\n        location,\n        destination\n    });\n    try {\n        const cityName = destination;\n        const result = await searchWithStrategy(searchText, location, cityName, false);\n        if (!result?.places?.[0]) {\n            return null;\n        }\n        const place = transformPlaceResponse(result.places[0]);\n        if (!place) {\n            return null;\n        }\n        // Check if place is already saved using savedPlacesManager\n        const isAlreadySaved = savedPlacesManager.hasPlace(place.id);\n        if (!isAlreadySaved) {\n            console.log(\"[searchPlaceByText] Adding new place:\", {\n                id: place.id,\n                name: getDisplayName(place)\n            });\n            savedPlacesManager.addPlace(place);\n            // Update metrics\n            const metrics = metricsManager.get();\n            metrics.savedPlacesCount = savedPlacesManager.places.size;\n            metricsManager.update(metrics);\n        }\n        console.log(\"[searchPlaceByText] Found place:\", {\n            id: place.id,\n            name: getDisplayName(place),\n            isAlreadySaved\n        });\n        return place;\n    } catch (error) {\n        console.error(\"[searchPlaceByText] Error searching for place:\", error);\n        return null;\n    }\n}\n// Initialize metrics in storage\nfunction initializeMetrics() {\n    if (true) {\n        return {\n            totalPrompts: 0,\n            savedPlacesCount: 0,\n            isPaid: false,\n            stagePrompts: {},\n            paymentReference: \"\" // Empty string instead of null to match type\n        };\n    }\n    const metrics = (0,_local_metrics__WEBPACK_IMPORTED_MODULE_1__.getStoredMetrics)();\n    // Always ensure savedPlacesCount matches actual saved places\n    metrics.savedPlacesCount = savedPlacesManager.places.size;\n    return metrics;\n}\n// Update metrics in storage\nfunction updateMetrics(metrics) {\n    if (true) return;\n    try {\n        localStorage.setItem(_local_metrics__WEBPACK_IMPORTED_MODULE_1__.METRICS_STORAGE_KEY, JSON.stringify(metrics));\n    } catch (error) {\n        console.error(\"[updateMetrics] Error:\", error);\n    }\n}\n// Export the metrics functions\nconst metricsManager = {\n    get: initializeMetrics,\n    update: updateMetrics\n};\n// Helper function to transform Google Places API response to our Place type\nfunction transformPlaceResponse(place) {\n    if (!place) return null;\n    console.log(\"[transformPlaceResponse] Input place:\", {\n        id: place.id,\n        photos: place.photos?.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: place.primaryTypeDisplayName\n    });\n    const displayName = place.displayName?.text ? {\n        text: place.displayName.text,\n        languageCode: place.displayName.languageCode || \"en\"\n    } : place.name || \"\";\n    // Ensure photos array is properly formatted\n    const photos = (place.photos || []).filter((photo)=>Boolean(photo && photo.name)).map((photo)=>({\n            name: photo.name,\n            widthPx: photo.widthPx,\n            heightPx: photo.heightPx,\n            authorAttributions: photo.authorAttributions\n        }));\n    const transformed = {\n        id: place.id,\n        name: place.name,\n        displayName,\n        primaryType: place.primaryType || \"place\",\n        photos,\n        formattedAddress: place.formattedAddress,\n        location: place.location,\n        primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n            text: place.primaryTypeDisplayName.text,\n            languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n        } : undefined\n    };\n    console.log(\"[transformPlaceResponse] Transformed place:\", {\n        id: transformed.id,\n        photos: transformed.photos.map((p)=>({\n                name: p.name\n            })),\n        primaryTypeDisplayName: transformed.primaryTypeDisplayName\n    });\n    return transformed;\n}\nconst searchMultiplePlacesByText = async (searchText, location, maxResults = 5)=>{\n    try {\n        if (false) {}\n        console.log(\"Executing searchMultiplePlacesByText with params:\", {\n            searchText,\n            location,\n            maxResults\n        });\n        const requestBody = {\n            textQuery: searchText,\n            locationBias: {\n                circle: {\n                    center: {\n                        latitude: location.latitude,\n                        longitude: location.longitude\n                    },\n                    radius: 20000.0 // 20km radius\n                }\n            },\n            maxResultCount: maxResults\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n            \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n        };\n        const response = await fetch(\"https://places.googleapis.com/v1/places:searchText\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            console.error(\"Failed to search places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return [];\n        }\n        const data = await response.json();\n        if (!data.places || !Array.isArray(data.places) || data.places.length === 0) {\n            console.log(\"No places found for text search:\", searchText);\n            return [];\n        }\n        return data.places.map((place)=>({\n                id: place.id,\n                displayName: place.displayName?.text ? {\n                    text: place.displayName.text,\n                    languageCode: place.displayName.languageCode || \"en\"\n                } : place.displayName,\n                primaryType: place.primaryType || \"place\",\n                photos: place.photos?.map((photo)=>({\n                        name: photo.name,\n                        widthPx: photo.widthPx,\n                        heightPx: photo.heightPx\n                    })) || [],\n                formattedAddress: place.formattedAddress,\n                location: place.location,\n                primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                    text: place.primaryTypeDisplayName.text,\n                    languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                } : undefined\n            }));\n    } catch (error) {\n        console.error(\"Error searching for places:\", error);\n        return [];\n    }\n};\n// Fetch places from Google Places API\nconst fetchPlaces = async (latitude, longitude, preferences, maxResults = 5, placeTypes)=>{\n    try {\n        if (false) {}\n        const fromPreferences = !!preferences && preferences.length > 0;\n        const fromPlaceTypes = !!placeTypes && placeTypes.length > 0;\n        if (!fromPreferences && !fromPlaceTypes) {\n            console.error(\"No preferences or place types provided\");\n            return [];\n        }\n        // Use preferences if provided, otherwise use placeTypes, otherwise use defaults\n        let includedTypes = [];\n        if (fromPreferences) {\n            includedTypes = getPlaceTypesFromPreferences(preferences);\n        } else if (fromPlaceTypes) {\n            includedTypes = placeTypes;\n        }\n        console.log(\"Executing fetchplaces with params:\", {\n            latitude,\n            longitude,\n            includedTypes,\n            maxResults,\n            fromPreferences: !!preferences?.length,\n            fromPlaceTypes: !!placeTypes?.length\n        });\n        // First try nearby search\n        try {\n            const requestBody = {\n                includedTypes,\n                maxResultCount: maxResults,\n                locationRestriction: {\n                    circle: {\n                        center: {\n                            latitude: latitude,\n                            longitude: longitude\n                        },\n                        radius: 20000.0 // 20km radius\n                    }\n                }\n            };\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"X-Goog-Api-Key\": \"AIzaSyDvcgBgSprgTRQO_6BWh5EAOPu1vdS6KD4\",\n                \"X-Goog-FieldMask\": \"places.id,places.displayName,places.formattedAddress,places.location,places.primaryType,places.primaryTypeDisplayName,places.photos.name,places.photos.widthPx,places.photos.heightPx\"\n            };\n            const response = await fetch(\"https://places.googleapis.com/v1/places:searchNearby\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.places && Array.isArray(data.places) && data.places.length > 0) {\n                    return data.places.map((place)=>({\n                            id: place.id,\n                            displayName: place.displayName?.text ? {\n                                text: place.displayName.text,\n                                languageCode: place.displayName.languageCode || \"en\"\n                            } : place.displayName,\n                            primaryType: place.primaryType || \"place\",\n                            photos: place.photos?.map((photo)=>({\n                                    name: photo.name,\n                                    widthPx: photo.widthPx,\n                                    heightPx: photo.heightPx\n                                })) || [],\n                            formattedAddress: place.formattedAddress,\n                            location: place.location,\n                            primaryTypeDisplayName: place.primaryTypeDisplayName ? {\n                                text: place.primaryTypeDisplayName.text,\n                                languageCode: place.primaryTypeDisplayName.languageCode || \"en\"\n                            } : undefined\n                        }));\n                }\n            }\n            const errorData = await response.text();\n            console.error(\"Failed to fetch places:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n        } catch (error) {\n            console.error(\"Error in nearby search:\", error);\n        }\n        // If nearby search fails, try text search as fallback\n        console.log(\"Falling back to text search...\");\n        const searchQuery = fromPlaceTypes ? placeTypes[0] : preferences[0];\n        return await searchMultiplePlacesByText(searchQuery, {\n            latitude,\n            longitude\n        }, maxResults);\n    } catch (error) {\n        console.error(\"Error fetching places:\", error);\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/places-utils.ts\n");

/***/ }),

/***/ "./utils/session-manager.ts":
/*!**********************************!*\
  !*** ./utils/session-manager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSessionValidity: () => (/* binding */ checkSessionValidity),\n/* harmony export */   checkSessionWithWarning: () => (/* binding */ checkSessionWithWarning),\n/* harmony export */   clearSession: () => (/* binding */ clearSession),\n/* harmony export */   getStoredMetricsWithSession: () => (/* binding */ getStoredMetricsWithSession),\n/* harmony export */   handleSessionExpiry: () => (/* binding */ handleSessionExpiry),\n/* harmony export */   initializeSession: () => (/* binding */ initializeSession),\n/* harmony export */   updateLastActive: () => (/* binding */ updateLastActive)\n/* harmony export */ });\nconst SESSION_CONFIG = {\n    INACTIVITY_TIMEOUT: 2 * 60 * 60 * 1000,\n    ABSOLUTE_TIMEOUT: 24 * 60 * 60 * 1000,\n    WARNING_BEFORE_TIMEOUT: 5 * 60 * 1000,\n    STORAGE_KEYS: {\n        SESSION: \"travel_session\",\n        METRICS: \"travel_interaction_metrics\"\n    }\n};\nfunction initializeSession() {\n    const now = Date.now();\n    const session = {\n        sessionId: generateSessionId(),\n        startTime: now,\n        lastActive: now,\n        expiresAt: now + SESSION_CONFIG.ABSOLUTE_TIMEOUT\n    };\n    localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n    return session;\n}\n// Add warning mechanism\nfunction checkSessionWithWarning() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return {\n        isValid: false,\n        shouldWarn: false\n    };\n    try {\n        const session = JSON.parse(sessionData);\n        const now = Date.now();\n        const timeUntilInactivity = session.lastActive + SESSION_CONFIG.INACTIVITY_TIMEOUT - now;\n        // Check if we should show warning\n        if (timeUntilInactivity > 0 && timeUntilInactivity <= SESSION_CONFIG.WARNING_BEFORE_TIMEOUT) {\n            return {\n                isValid: true,\n                shouldWarn: true\n            };\n        }\n        // Regular validity check\n        if (now >= session.expiresAt || now - session.lastActive >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            return {\n                isValid: false,\n                shouldWarn: false\n            };\n        }\n        return {\n            isValid: true,\n            shouldWarn: false\n        };\n    } catch (error) {\n        console.error(\"[SessionManager] Error checking session:\", error);\n        return {\n            isValid: false,\n            shouldWarn: false\n        };\n    }\n}\nfunction checkSessionValidity() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return false;\n    try {\n        const session = JSON.parse(sessionData);\n        const now = Date.now();\n        // Check absolute timeout\n        if (now >= session.expiresAt) {\n            clearSession();\n            return false;\n        }\n        // Check inactivity timeout\n        if (now - session.lastActive >= SESSION_CONFIG.INACTIVITY_TIMEOUT) {\n            clearSession();\n            return false;\n        }\n        // Update last active timestamp\n        session.lastActive = now;\n        localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n        return true;\n    } catch (error) {\n        console.error(\"[SessionManager] Error parsing session:\", error);\n        clearSession();\n        return false;\n    }\n}\n// ession expiry handler\nfunction handleSessionExpiry() {\n    // Save current state if needed\n    const currentState = {\n        messages: window.getSavedPlaces?.() || [],\n        lastUrl: window.location.pathname\n    };\n    localStorage.setItem(\"expiredSessionState\", JSON.stringify(currentState));\n    // Clear session\n    clearSession();\n    // Redirect to landing page with return path\n    window.location.href = `/?return=${encodeURIComponent(currentState.lastUrl)}`;\n}\nfunction clearSession() {\n    localStorage.removeItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    localStorage.removeItem(SESSION_CONFIG.STORAGE_KEYS.METRICS);\n}\nfunction updateLastActive() {\n    const sessionData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.SESSION);\n    if (!sessionData) return;\n    try {\n        const session = JSON.parse(sessionData);\n        session.lastActive = Date.now();\n        localStorage.setItem(SESSION_CONFIG.STORAGE_KEYS.SESSION, JSON.stringify(session));\n    } catch (error) {\n        console.error(\"[SessionManager] Error updating last active:\", error);\n    }\n}\nfunction generateSessionId() {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n// Hook this into metrics management\nfunction getStoredMetricsWithSession() {\n    if (!checkSessionValidity()) {\n        clearSession();\n        return null;\n    }\n    const metricsData = localStorage.getItem(SESSION_CONFIG.STORAGE_KEYS.METRICS);\n    if (!metricsData) return null;\n    try {\n        return JSON.parse(metricsData);\n    } catch (error) {\n        console.error(\"[SessionManager] Error parsing metrics:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9zZXNzaW9uLW1hbmFnZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVBLE1BQU1BLGlCQUFpQjtJQUNyQkMsb0JBQW9CLElBQUksS0FBSyxLQUFLO0lBQ2xDQyxrQkFBa0IsS0FBSyxLQUFLLEtBQUs7SUFDakNDLHdCQUF3QixJQUFJLEtBQUs7SUFDakNDLGNBQWM7UUFDWkMsU0FBUztRQUNUQyxTQUFTO0lBQ1g7QUFDRjtBQVdPLFNBQVNDO0lBQ2QsTUFBTUMsTUFBTUMsS0FBS0QsR0FBRztJQUNwQixNQUFNRSxVQUEyQjtRQUMvQkMsV0FBV0M7UUFDWEMsV0FBV0w7UUFDWE0sWUFBWU47UUFDWk8sV0FBV1AsTUFBTVIsZUFBZUUsZ0JBQWdCO0lBQ2xEO0lBRUFjLGFBQWFDLE9BQU8sQ0FBQ2pCLGVBQWVJLFlBQVksQ0FBQ0MsT0FBTyxFQUFFYSxLQUFLQyxTQUFTLENBQUNUO0lBQ3pFLE9BQU9BO0FBQ1Q7QUFFQSx3QkFBd0I7QUFDakIsU0FBU1U7SUFDZCxNQUFNQyxjQUFjTCxhQUFhTSxPQUFPLENBQUN0QixlQUFlSSxZQUFZLENBQUNDLE9BQU87SUFDNUUsSUFBSSxDQUFDZ0IsYUFBYSxPQUFPO1FBQUVFLFNBQVM7UUFBT0MsWUFBWTtJQUFNO0lBRTdELElBQUk7UUFDRixNQUFNZCxVQUEyQlEsS0FBS08sS0FBSyxDQUFDSjtRQUM1QyxNQUFNYixNQUFNQyxLQUFLRCxHQUFHO1FBQ3BCLE1BQU1rQixzQkFBc0IsUUFBU1osVUFBVSxHQUFHZCxlQUFlQyxrQkFBa0IsR0FBSU87UUFFdkYsa0NBQWtDO1FBQ2xDLElBQUlrQixzQkFBc0IsS0FBS0EsdUJBQXVCMUIsZUFBZUcsc0JBQXNCLEVBQUU7WUFDM0YsT0FBTztnQkFBRW9CLFNBQVM7Z0JBQU1DLFlBQVk7WUFBSztRQUMzQztRQUVBLHlCQUF5QjtRQUN6QixJQUFJaEIsT0FBT0UsUUFBUUssU0FBUyxJQUFJUCxNQUFNRSxRQUFRSSxVQUFVLElBQUlkLGVBQWVDLGtCQUFrQixFQUFFO1lBQzdGLE9BQU87Z0JBQUVzQixTQUFTO2dCQUFPQyxZQUFZO1lBQU07UUFDN0M7UUFFQSxPQUFPO1lBQUVELFNBQVM7WUFBTUMsWUFBWTtRQUFNO0lBQzVDLEVBQUUsT0FBT0csT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsNENBQTRDQTtRQUMxRCxPQUFPO1lBQUVKLFNBQVM7WUFBT0MsWUFBWTtRQUFNO0lBQzdDO0FBQ0Y7QUFFTyxTQUFTSztJQUNkLE1BQU1SLGNBQWNMLGFBQWFNLE9BQU8sQ0FBQ3RCLGVBQWVJLFlBQVksQ0FBQ0MsT0FBTztJQUM1RSxJQUFJLENBQUNnQixhQUFhLE9BQU87SUFFekIsSUFBSTtRQUNGLE1BQU1YLFVBQTJCUSxLQUFLTyxLQUFLLENBQUNKO1FBQzVDLE1BQU1iLE1BQU1DLEtBQUtELEdBQUc7UUFFcEIseUJBQXlCO1FBQ3pCLElBQUlBLE9BQU9FLFFBQVFLLFNBQVMsRUFBRTtZQUM1QmU7WUFDQSxPQUFPO1FBQ1Q7UUFFQSwyQkFBMkI7UUFDM0IsSUFBSXRCLE1BQU1FLFFBQVFJLFVBQVUsSUFBSWQsZUFBZUMsa0JBQWtCLEVBQUU7WUFDakU2QjtZQUNBLE9BQU87UUFDVDtRQUVBLCtCQUErQjtRQUMvQnBCLFFBQVFJLFVBQVUsR0FBR047UUFDckJRLGFBQWFDLE9BQU8sQ0FBQ2pCLGVBQWVJLFlBQVksQ0FBQ0MsT0FBTyxFQUFFYSxLQUFLQyxTQUFTLENBQUNUO1FBQ3pFLE9BQU87SUFDVCxFQUFFLE9BQU9pQixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywyQ0FBMkNBO1FBQ3pERztRQUNBLE9BQU87SUFDVDtBQUNGO0FBRUEsd0JBQXdCO0FBQ2pCLFNBQVNDO0lBQ2QsK0JBQStCO0lBQy9CLE1BQU1DLGVBQWU7UUFDbkJDLFVBQVVDLE9BQU9DLGNBQWMsUUFBUSxFQUFFO1FBQ3pDQyxTQUFTRixPQUFPRyxRQUFRLENBQUNDLFFBQVE7SUFDbkM7SUFDQXRCLGFBQWFDLE9BQU8sQ0FBQyx1QkFBdUJDLEtBQUtDLFNBQVMsQ0FBQ2E7SUFFM0QsZ0JBQWdCO0lBQ2hCRjtJQUVBLDRDQUE0QztJQUM1Q0ksT0FBT0csUUFBUSxDQUFDRSxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUVDLG1CQUFtQlIsYUFBYUksT0FBTyxFQUFFLENBQUM7QUFDL0U7QUFFTyxTQUFTTjtJQUNkZCxhQUFheUIsVUFBVSxDQUFDekMsZUFBZUksWUFBWSxDQUFDQyxPQUFPO0lBQzNEVyxhQUFheUIsVUFBVSxDQUFDekMsZUFBZUksWUFBWSxDQUFDRSxPQUFPO0FBQzdEO0FBRU8sU0FBU29DO0lBQ2QsTUFBTXJCLGNBQWNMLGFBQWFNLE9BQU8sQ0FBQ3RCLGVBQWVJLFlBQVksQ0FBQ0MsT0FBTztJQUM1RSxJQUFJLENBQUNnQixhQUFhO0lBRWxCLElBQUk7UUFDRixNQUFNWCxVQUEyQlEsS0FBS08sS0FBSyxDQUFDSjtRQUM1Q1gsUUFBUUksVUFBVSxHQUFHTCxLQUFLRCxHQUFHO1FBQzdCUSxhQUFhQyxPQUFPLENBQUNqQixlQUFlSSxZQUFZLENBQUNDLE9BQU8sRUFBRWEsS0FBS0MsU0FBUyxDQUFDVDtJQUMzRSxFQUFFLE9BQU9pQixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxnREFBZ0RBO0lBQ2hFO0FBQ0Y7QUFFQSxTQUFTZjtJQUNQLE9BQU8sQ0FBQyxFQUFFSCxLQUFLRCxHQUFHLEdBQUcsQ0FBQyxFQUFFbUMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ25FO0FBRUEsb0NBQW9DO0FBQzdCLFNBQVNDO0lBQ2QsSUFBSSxDQUFDbEIsd0JBQXdCO1FBQzNCQztRQUNBLE9BQU87SUFDVDtJQUVBLE1BQU1rQixjQUFjaEMsYUFBYU0sT0FBTyxDQUFDdEIsZUFBZUksWUFBWSxDQUFDRSxPQUFPO0lBQzVFLElBQUksQ0FBQzBDLGFBQWEsT0FBTztJQUV6QixJQUFJO1FBQ0YsT0FBTzlCLEtBQUtPLEtBQUssQ0FBQ3VCO0lBQ3BCLEVBQUUsT0FBT3JCLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDJDQUEyQ0E7UUFDekQsT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmF2ZWwtcml6ei8uL3V0aWxzL3Nlc3Npb24tbWFuYWdlci50cz8xMzNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJJbnRlcmFjdGlvbk1ldHJpY3MgfSBmcm9tICcuLi9tYW5hZ2Vycy9zdGFnZS1tYW5hZ2VyJztcblxuY29uc3QgU0VTU0lPTl9DT05GSUcgPSB7XG4gIElOQUNUSVZJVFlfVElNRU9VVDogMiAqIDYwICogNjAgKiAxMDAwLCAvLyAyIGhvdXJzXG4gIEFCU09MVVRFX1RJTUVPVVQ6IDI0ICogNjAgKiA2MCAqIDEwMDAsIC8vIGtlZXAgMjQgaG91cnNcbiAgV0FSTklOR19CRUZPUkVfVElNRU9VVDogNSAqIDYwICogMTAwMCwgLy8gNSBtaW51dGVzIHdhcm5pbmdcbiAgU1RPUkFHRV9LRVlTOiB7XG4gICAgU0VTU0lPTjogJ3RyYXZlbF9zZXNzaW9uJyxcbiAgICBNRVRSSUNTOiAndHJhdmVsX2ludGVyYWN0aW9uX21ldHJpY3MnXG4gIH1cbn07XG5cblxuXG5pbnRlcmZhY2UgU2Vzc2lvbk1ldGFkYXRhIHtcbiAgc2Vzc2lvbklkOiBzdHJpbmc7XG4gIHN0YXJ0VGltZTogbnVtYmVyO1xuICBsYXN0QWN0aXZlOiBudW1iZXI7XG4gIGV4cGlyZXNBdDogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVNlc3Npb24oKTogU2Vzc2lvbk1ldGFkYXRhIHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgY29uc3Qgc2Vzc2lvbjogU2Vzc2lvbk1ldGFkYXRhID0ge1xuICAgIHNlc3Npb25JZDogZ2VuZXJhdGVTZXNzaW9uSWQoKSxcbiAgICBzdGFydFRpbWU6IG5vdyxcbiAgICBsYXN0QWN0aXZlOiBub3csXG4gICAgZXhwaXJlc0F0OiBub3cgKyBTRVNTSU9OX0NPTkZJRy5BQlNPTFVURV9USU1FT1VUXG4gIH07XG4gIFxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWVMuU0VTU0lPTiwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICByZXR1cm4gc2Vzc2lvbjtcbn1cblxuLy8gQWRkIHdhcm5pbmcgbWVjaGFuaXNtXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTZXNzaW9uV2l0aFdhcm5pbmcoKTogeyBpc1ZhbGlkOiBib29sZWFuOyBzaG91bGRXYXJuOiBib29sZWFuIH0ge1xuICBjb25zdCBzZXNzaW9uRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZUy5TRVNTSU9OKTtcbiAgaWYgKCFzZXNzaW9uRGF0YSkgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIHNob3VsZFdhcm46IGZhbHNlIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzZXNzaW9uOiBTZXNzaW9uTWV0YWRhdGEgPSBKU09OLnBhcnNlKHNlc3Npb25EYXRhKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHRpbWVVbnRpbEluYWN0aXZpdHkgPSAoc2Vzc2lvbi5sYXN0QWN0aXZlICsgU0VTU0lPTl9DT05GSUcuSU5BQ1RJVklUWV9USU1FT1VUKSAtIG5vdztcbiAgICBcbiAgICAvLyBDaGVjayBpZiB3ZSBzaG91bGQgc2hvdyB3YXJuaW5nXG4gICAgaWYgKHRpbWVVbnRpbEluYWN0aXZpdHkgPiAwICYmIHRpbWVVbnRpbEluYWN0aXZpdHkgPD0gU0VTU0lPTl9DT05GSUcuV0FSTklOR19CRUZPUkVfVElNRU9VVCkge1xuICAgICAgcmV0dXJuIHsgaXNWYWxpZDogdHJ1ZSwgc2hvdWxkV2FybjogdHJ1ZSB9O1xuICAgIH1cblxuICAgIC8vIFJlZ3VsYXIgdmFsaWRpdHkgY2hlY2tcbiAgICBpZiAobm93ID49IHNlc3Npb24uZXhwaXJlc0F0IHx8IG5vdyAtIHNlc3Npb24ubGFzdEFjdGl2ZSA+PSBTRVNTSU9OX0NPTkZJRy5JTkFDVElWSVRZX1RJTUVPVVQpIHtcbiAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBzaG91bGRXYXJuOiBmYWxzZSB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGlzVmFsaWQ6IHRydWUsIHNob3VsZFdhcm46IGZhbHNlIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1Nlc3Npb25NYW5hZ2VyXSBFcnJvciBjaGVja2luZyBzZXNzaW9uOicsIGVycm9yKTtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgc2hvdWxkV2FybjogZmFsc2UgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTZXNzaW9uVmFsaWRpdHkoKTogYm9vbGVhbiB7XG4gIGNvbnN0IHNlc3Npb25EYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVlTLlNFU1NJT04pO1xuICBpZiAoIXNlc3Npb25EYXRhKSByZXR1cm4gZmFsc2U7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzZXNzaW9uOiBTZXNzaW9uTWV0YWRhdGEgPSBKU09OLnBhcnNlKHNlc3Npb25EYXRhKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgLy8gQ2hlY2sgYWJzb2x1dGUgdGltZW91dFxuICAgIGlmIChub3cgPj0gc2Vzc2lvbi5leHBpcmVzQXQpIHtcbiAgICAgIGNsZWFyU2Vzc2lvbigpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGluYWN0aXZpdHkgdGltZW91dFxuICAgIGlmIChub3cgLSBzZXNzaW9uLmxhc3RBY3RpdmUgPj0gU0VTU0lPTl9DT05GSUcuSU5BQ1RJVklUWV9USU1FT1VUKSB7XG4gICAgICBjbGVhclNlc3Npb24oKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgbGFzdCBhY3RpdmUgdGltZXN0YW1wXG4gICAgc2Vzc2lvbi5sYXN0QWN0aXZlID0gbm93O1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZUy5TRVNTSU9OLCBKU09OLnN0cmluZ2lmeShzZXNzaW9uKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1Nlc3Npb25NYW5hZ2VyXSBFcnJvciBwYXJzaW5nIHNlc3Npb246JywgZXJyb3IpO1xuICAgIGNsZWFyU2Vzc2lvbigpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBlc3Npb24gZXhwaXJ5IGhhbmRsZXJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVTZXNzaW9uRXhwaXJ5KCkge1xuICAvLyBTYXZlIGN1cnJlbnQgc3RhdGUgaWYgbmVlZGVkXG4gIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHtcbiAgICBtZXNzYWdlczogd2luZG93LmdldFNhdmVkUGxhY2VzPy4oKSB8fCBbXSxcbiAgICBsYXN0VXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgfTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2V4cGlyZWRTZXNzaW9uU3RhdGUnLCBKU09OLnN0cmluZ2lmeShjdXJyZW50U3RhdGUpKTtcbiAgXG4gIC8vIENsZWFyIHNlc3Npb25cbiAgY2xlYXJTZXNzaW9uKCk7XG4gIFxuICAvLyBSZWRpcmVjdCB0byBsYW5kaW5nIHBhZ2Ugd2l0aCByZXR1cm4gcGF0aFxuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvP3JldHVybj0ke2VuY29kZVVSSUNvbXBvbmVudChjdXJyZW50U3RhdGUubGFzdFVybCl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyU2Vzc2lvbigpIHtcbiAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVlTLlNFU1NJT04pO1xuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWVMuTUVUUklDUyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVMYXN0QWN0aXZlKCkge1xuICBjb25zdCBzZXNzaW9uRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fQ09ORklHLlNUT1JBR0VfS0VZUy5TRVNTSU9OKTtcbiAgaWYgKCFzZXNzaW9uRGF0YSkgcmV0dXJuO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qgc2Vzc2lvbjogU2Vzc2lvbk1ldGFkYXRhID0gSlNPTi5wYXJzZShzZXNzaW9uRGF0YSk7XG4gICAgc2Vzc2lvbi5sYXN0QWN0aXZlID0gRGF0ZS5ub3coKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWVMuU0VTU0lPTiwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTZXNzaW9uTWFuYWdlcl0gRXJyb3IgdXBkYXRpbmcgbGFzdCBhY3RpdmU6JywgZXJyb3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU2Vzc2lvbklkKCk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xufVxuXG4vLyBIb29rIHRoaXMgaW50byBtZXRyaWNzIG1hbmFnZW1lbnRcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdG9yZWRNZXRyaWNzV2l0aFNlc3Npb24oKTogVXNlckludGVyYWN0aW9uTWV0cmljcyB8IG51bGwge1xuICBpZiAoIWNoZWNrU2Vzc2lvblZhbGlkaXR5KCkpIHtcbiAgICBjbGVhclNlc3Npb24oKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG1ldHJpY3NEYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9DT05GSUcuU1RPUkFHRV9LRVlTLk1FVFJJQ1MpO1xuICBpZiAoIW1ldHJpY3NEYXRhKSByZXR1cm4gbnVsbDtcblxuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKG1ldHJpY3NEYXRhKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbU2Vzc2lvbk1hbmFnZXJdIEVycm9yIHBhcnNpbmcgbWV0cmljczonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJTRVNTSU9OX0NPTkZJRyIsIklOQUNUSVZJVFlfVElNRU9VVCIsIkFCU09MVVRFX1RJTUVPVVQiLCJXQVJOSU5HX0JFRk9SRV9USU1FT1VUIiwiU1RPUkFHRV9LRVlTIiwiU0VTU0lPTiIsIk1FVFJJQ1MiLCJpbml0aWFsaXplU2Vzc2lvbiIsIm5vdyIsIkRhdGUiLCJzZXNzaW9uIiwic2Vzc2lvbklkIiwiZ2VuZXJhdGVTZXNzaW9uSWQiLCJzdGFydFRpbWUiLCJsYXN0QWN0aXZlIiwiZXhwaXJlc0F0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjaGVja1Nlc3Npb25XaXRoV2FybmluZyIsInNlc3Npb25EYXRhIiwiZ2V0SXRlbSIsImlzVmFsaWQiLCJzaG91bGRXYXJuIiwicGFyc2UiLCJ0aW1lVW50aWxJbmFjdGl2aXR5IiwiZXJyb3IiLCJjb25zb2xlIiwiY2hlY2tTZXNzaW9uVmFsaWRpdHkiLCJjbGVhclNlc3Npb24iLCJoYW5kbGVTZXNzaW9uRXhwaXJ5IiwiY3VycmVudFN0YXRlIiwibWVzc2FnZXMiLCJ3aW5kb3ciLCJnZXRTYXZlZFBsYWNlcyIsImxhc3RVcmwiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiaHJlZiIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZUl0ZW0iLCJ1cGRhdGVMYXN0QWN0aXZlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiZ2V0U3RvcmVkTWV0cmljc1dpdGhTZXNzaW9uIiwibWV0cmljc0RhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/session-manager.ts\n");

/***/ })

};
;